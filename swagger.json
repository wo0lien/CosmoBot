{
    "openapi": "3.0.0",
    "info": {
        "title": "nocodb",
        "version": "1.0"
    },
    "servers": [
        {
            "url": "http://localhost:8080"
        },
        {
            "url": "{customUrl}",
            "variables": {
                "customUrl": {
                    "default": "http://localhost:8080",
                    "description": "Provide custom nocodb app base url"
                }
            }
        }
    ],
    "paths": {
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers": {
            "get": {
                "summary": "Volunteers list",
                "operationId": "volunteers-db-table-row-list",
                "description": "List of all rows from Volunteers table and response data fields can be filtered based on query params.",
                "tags": [
                    "Volunteers"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "nested[events][fields]",
                        "description": "Array of field names or comma separated filed names to include in the in nested column `events` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[events][fields]=field1,field2`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/VolunteersResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Volunteers create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "volunteers-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VolunteersResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VolunteersRequest"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/{rowId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    }
                ],
                "summary": "Volunteers read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "volunteers-read",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VolunteersResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ]
            },
            "patch": {
                "summary": "Volunteers update",
                "operationId": "volunteers-update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VolunteersRequest"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "delete": {
                "summary": "Volunteers delete",
                "operationId": "volunteers-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "Volunteers"
                ],
                "description": "Delete a row by using the **primary key** column value."
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/count": {
            "get": {
                "summary": "Volunteers count",
                "operationId": "volunteers-count",
                "description": "Get rows count of a table by applying optional filters.",
                "tags": [
                    "Volunteers"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/find-one": {
            "get": {
                "summary": "Volunteers find-one",
                "operationId": "volunteers-db-table-row-find-one",
                "description": "Find first record matching the conditions.",
                "tags": [
                    "Volunteers"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VolunteersResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/groupby": {
            "get": {
                "summary": "Volunteers groupby",
                "operationId": "volunteers-groupby",
                "description": "Group by a column.",
                "tags": [
                    "Volunteers"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "column_name",
                        "description": "Column name of the column you want to group by, eg. `column_name=column1`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Groupby"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/bulk/v1/pp2k69kcyjib180/Volunteers": {
            "post": {
                "summary": "Volunteers bulk insert",
                "description": "To insert large amount of data in a single api call you can use this api. It's similar to insert method but here you can pass array of objects to insert into table. Array object will be key value paired column name and value.",
                "operationId": "volunteers-bulk-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "patch": {
                "summary": "Volunteers bulk  update",
                "description": "To update multiple records using it's primary key you can use this api. Bulk updated api accepts array object in which each object should contain it's primary columns value mapped to corresponding alias. In addition to primary key you can include the fields which you want to update",
                "operationId": "volunteers-bulk-update",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "delete": {
                "summary": "Volunteers bulk delete by IDs",
                "description": "To delete multiple records using it's primary key you can use this api. Bulk delete api accepts array object in which each object should contain it's primary columns value mapped to corresponding alias.",
                "operationId": "volunteers-bulk-delete",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/bulk/v1/pp2k69kcyjib180/Volunteers/all": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "name": "where",
                    "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                }
            ],
            "patch": {
                "summary": "Volunteers Bulk update with conditions",
                "description": "This api helps you update multiple table rows in a single api call. You don't have to pass the record id instead you can filter records and apply the changes to filtered records. Payload is similar as normal update in which you can pass any partial row data to be updated.",
                "operationId": "volunteers-bulk-update-all",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "delete": {
                "summary": "Bulk delete with conditions",
                "description": "This api helps you delete multiple table rows in a single api call. You don't have to pass the record id instead you can filter records and delete filtered records.",
                "operationId": "volunteers-bulk-delete-all",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/{rowId}/{relationType}/{columnName}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "mm",
                            "hm"
                        ]
                    },
                    "name": "relationType",
                    "in": "path",
                    "required": true
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "events"
                        ]
                    },
                    "name": "columnName",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Relation row list",
                "operationId": "volunteers-nested-list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/{rowId}/{relationType}/{columnName}/{refRowId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "mm",
                            "hm"
                        ]
                    },
                    "name": "relationType",
                    "in": "path",
                    "required": true
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "events"
                        ]
                    },
                    "name": "columnName",
                    "in": "path",
                    "required": true
                },
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "refRowId",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "Relation row add",
                "operationId": "volunteers-nested-add",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "description": ""
            },
            "delete": {
                "summary": "Relation row remove",
                "operationId": "volunteers-nested-remove",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/{rowId}/{relationType}/{columnName}/exclude": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "mm",
                            "hm"
                        ]
                    },
                    "name": "relationType",
                    "in": "path",
                    "required": true
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "events"
                        ]
                    },
                    "name": "columnName",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Referenced tables rows excluding current records children/parent",
                "operationId": "volunteers-nested-children-excluded-list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/export/{type}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "csv",
                            "excel"
                        ]
                    },
                    "name": "type",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Rows export",
                "operationId": "volunteers-csv-export",
                "description": "Export all the records from a table.Currently we are only supports `csv` export.",
                "tags": [
                    "Volunteers"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/octet-stream": {
                                "schema": {}
                            }
                        },
                        "headers": {
                            "nc-export-offset": {
                                "schema": {
                                    "type": "integer"
                                },
                                "description": "Offset of next set of data which will be helpful if there is large amount of data. It will returns `-1` if all set of data exported.",
                                "example": "1000"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "Helps to start export from a certain index. You can get the next set of data offset from previous response header named `nc-export-offset`.",
                        "example": 0
                    }
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/views/Volunteers": {
            "get": {
                "summary": "Volunteers list",
                "operationId": "Volunteers-Volunteers-row-list",
                "description": "List of all rows from Volunteers grid view and data of fields can be filtered based on query params. Data and fields in a grid view will be filtered and sorted by default based on the applied options in Dashboard.",
                "tags": [
                    "Volunteers ( Volunteers grid )"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "nested[events][fields]",
                        "description": "Array of field names or comma separated filed names to include in the in nested column `events` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[events][fields]=field1,field2`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/VolunteersVolunteersGridResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Volunteers create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "Volunteers-Volunteers-row-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers ( Volunteers grid )"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VolunteersVolunteersGridRequest"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/views/Volunteers/count": {
            "get": {
                "summary": "Volunteers count",
                "operationId": "Volunteers-Volunteers-row-count",
                "description": "",
                "tags": [
                    "Volunteers ( Volunteers grid )"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/views/Volunteers/{rowId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "summary": "Volunteers read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "Volunteers-Volunteers-row-read",
                "responses": {
                    "200": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VolunteersVolunteersGridResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers ( Volunteers grid )"
                ]
            },
            "patch": {
                "summary": "Volunteers update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "operationId": "Volunteers-Volunteers-row-update",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Volunteers ( Volunteers grid )"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VolunteersVolunteersGridRequest"
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Volunteers delete",
                "operationId": "Volunteers-Volunteers-row-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "Volunteers ( Volunteers grid )"
                ],
                "description": "Delete a row by using the **primary key** column value."
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/views/Volunteers/export/{type}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "csv",
                            "excel"
                        ]
                    },
                    "name": "type",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Volunteers export",
                "operationId": "Volunteers-Volunteers-row-export",
                "description": "Export all the records from a table view. Currently we are only supports `csv` export.",
                "tags": [
                    "Volunteers ( Volunteers grid )"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/octet-stream": {
                                "schema": {}
                            }
                        },
                        "headers": {
                            "nc-export-offset": {
                                "schema": {
                                    "type": "integer"
                                },
                                "description": "Offset of next set of data which will be helpful if there is large amount of data. It will returns `-1` if all set of data exported.",
                                "example": "1000"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events": {
            "get": {
                "summary": "events list",
                "operationId": "events-db-table-row-list",
                "description": "List of all rows from events table and response data fields can be filtered based on query params.",
                "tags": [
                    "events"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/eventsResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "events create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "events-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/eventsResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/eventsRequest"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/{rowId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    }
                ],
                "summary": "events read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "events-read",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/eventsResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ]
            },
            "patch": {
                "summary": "events update",
                "operationId": "events-update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/eventsRequest"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "delete": {
                "summary": "events delete",
                "operationId": "events-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "events"
                ],
                "description": "Delete a row by using the **primary key** column value."
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/count": {
            "get": {
                "summary": "events count",
                "operationId": "events-count",
                "description": "Get rows count of a table by applying optional filters.",
                "tags": [
                    "events"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/find-one": {
            "get": {
                "summary": "events find-one",
                "operationId": "events-db-table-row-find-one",
                "description": "Find first record matching the conditions.",
                "tags": [
                    "events"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/eventsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/groupby": {
            "get": {
                "summary": "events groupby",
                "operationId": "events-groupby",
                "description": "Group by a column.",
                "tags": [
                    "events"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "column_name",
                        "description": "Column name of the column you want to group by, eg. `column_name=column1`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Groupby"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/bulk/v1/pp2k69kcyjib180/events": {
            "post": {
                "summary": "events bulk insert",
                "description": "To insert large amount of data in a single api call you can use this api. It's similar to insert method but here you can pass array of objects to insert into table. Array object will be key value paired column name and value.",
                "operationId": "events-bulk-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "patch": {
                "summary": "events bulk  update",
                "description": "To update multiple records using it's primary key you can use this api. Bulk updated api accepts array object in which each object should contain it's primary columns value mapped to corresponding alias. In addition to primary key you can include the fields which you want to update",
                "operationId": "events-bulk-update",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "delete": {
                "summary": "events bulk delete by IDs",
                "description": "To delete multiple records using it's primary key you can use this api. Bulk delete api accepts array object in which each object should contain it's primary columns value mapped to corresponding alias.",
                "operationId": "events-bulk-delete",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/bulk/v1/pp2k69kcyjib180/events/all": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "name": "where",
                    "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                }
            ],
            "patch": {
                "summary": "events Bulk update with conditions",
                "description": "This api helps you update multiple table rows in a single api call. You don't have to pass the record id instead you can filter records and apply the changes to filtered records. Payload is similar as normal update in which you can pass any partial row data to be updated.",
                "operationId": "events-bulk-update-all",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "delete": {
                "summary": "Bulk delete with conditions",
                "description": "This api helps you delete multiple table rows in a single api call. You don't have to pass the record id instead you can filter records and delete filtered records.",
                "operationId": "events-bulk-delete-all",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/{rowId}/{relationType}/{columnName}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "mm",
                            "hm"
                        ]
                    },
                    "name": "relationType",
                    "in": "path",
                    "required": true
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "Volunteers"
                        ]
                    },
                    "name": "columnName",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Relation row list",
                "operationId": "events-nested-list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/{rowId}/{relationType}/{columnName}/{refRowId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "mm",
                            "hm"
                        ]
                    },
                    "name": "relationType",
                    "in": "path",
                    "required": true
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "Volunteers"
                        ]
                    },
                    "name": "columnName",
                    "in": "path",
                    "required": true
                },
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "refRowId",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "Relation row add",
                "operationId": "events-nested-add",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "description": ""
            },
            "delete": {
                "summary": "Relation row remove",
                "operationId": "events-nested-remove",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/{rowId}/{relationType}/{columnName}/exclude": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "mm",
                            "hm"
                        ]
                    },
                    "name": "relationType",
                    "in": "path",
                    "required": true
                },
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "Volunteers"
                        ]
                    },
                    "name": "columnName",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Referenced tables rows excluding current records children/parent",
                "operationId": "events-nested-children-excluded-list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "events"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/export/{type}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "csv",
                            "excel"
                        ]
                    },
                    "name": "type",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Rows export",
                "operationId": "events-csv-export",
                "description": "Export all the records from a table.Currently we are only supports `csv` export.",
                "tags": [
                    "events"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/octet-stream": {
                                "schema": {}
                            }
                        },
                        "headers": {
                            "nc-export-offset": {
                                "schema": {
                                    "type": "integer"
                                },
                                "description": "Offset of next set of data which will be helpful if there is large amount of data. It will returns `-1` if all set of data exported.",
                                "example": "1000"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "Helps to start export from a certain index. You can get the next set of data offset from previous response header named `nc-export-offset`.",
                        "example": 0
                    }
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/views/events": {
            "get": {
                "summary": "events list",
                "operationId": "events-events-row-list",
                "description": "List of all rows from events grid view and data of fields can be filtered based on query params. Data and fields in a grid view will be filtered and sorted by default based on the applied options in Dashboard.",
                "tags": [
                    "events ( events grid )"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/eventseventsGridResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "events create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "events-events-row-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "events ( events grid )"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/eventseventsGridRequest"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/views/events/count": {
            "get": {
                "summary": "events count",
                "operationId": "events-events-row-count",
                "description": "",
                "tags": [
                    "events ( events grid )"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/views/events/{rowId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "summary": "events read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "events-events-row-read",
                "responses": {
                    "200": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/eventseventsGridResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "events ( events grid )"
                ]
            },
            "patch": {
                "summary": "events update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "operationId": "events-events-row-update",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "events ( events grid )"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/eventseventsGridRequest"
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "events delete",
                "operationId": "events-events-row-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "events ( events grid )"
                ],
                "description": "Delete a row by using the **primary key** column value."
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/events/views/events/export/{type}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "csv",
                            "excel"
                        ]
                    },
                    "name": "type",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "events export",
                "operationId": "events-events-row-export",
                "description": "Export all the records from a table view. Currently we are only supports `csv` export.",
                "tags": [
                    "events ( events grid )"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/octet-stream": {
                                "schema": {}
                            }
                        },
                        "headers": {
                            "nc-export-offset": {
                                "schema": {
                                    "type": "integer"
                                },
                                "description": "Offset of next set of data which will be helpful if there is large amount of data. It will returns `-1` if all set of data exported.",
                                "example": "1000"
                            }
                        }
                    }
                },
                "parameters": []
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/comm_events": {
            "get": {
                "summary": "comm_events list",
                "operationId": "comm_events-db-table-row-list",
                "description": "List of all rows from comm_events table and response data fields can be filtered based on query params.",
                "tags": [
                    "comm_events"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/comm_eventsResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "comm_events create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "comm_events-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comm_eventsResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "comm_events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/comm_eventsRequest"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/{rowId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    }
                ],
                "summary": "comm_events read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "comm_events-read",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comm_eventsResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "comm_events"
                ]
            },
            "patch": {
                "summary": "comm_events update",
                "operationId": "comm_events-update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comm_eventsRequest"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "comm_events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "delete": {
                "summary": "comm_events delete",
                "operationId": "comm_events-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "comm_events"
                ],
                "description": "Delete a row by using the **primary key** column value."
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/count": {
            "get": {
                "summary": "comm_events count",
                "operationId": "comm_events-count",
                "description": "Get rows count of a table by applying optional filters.",
                "tags": [
                    "comm_events"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/find-one": {
            "get": {
                "summary": "comm_events find-one",
                "operationId": "comm_events-db-table-row-find-one",
                "description": "Find first record matching the conditions.",
                "tags": [
                    "comm_events"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comm_eventsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/groupby": {
            "get": {
                "summary": "comm_events groupby",
                "operationId": "comm_events-groupby",
                "description": "Group by a column.",
                "tags": [
                    "comm_events"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "column_name",
                        "description": "Column name of the column you want to group by, eg. `column_name=column1`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 1
                        },
                        "in": "query",
                        "name": "limit",
                        "description": "The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.",
                        "example": 25
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "The `offset` parameter used for pagination, the value helps to select collection from a certain index.",
                        "example": 0
                    },
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "in": "query",
                        "name": "shuffle",
                        "description": "The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.",
                        "example": 0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Groupby"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/bulk/v1/pp2k69kcyjib180/comm_events": {
            "post": {
                "summary": "comm_events bulk insert",
                "description": "To insert large amount of data in a single api call you can use this api. It's similar to insert method but here you can pass array of objects to insert into table. Array object will be key value paired column name and value.",
                "operationId": "comm_events-bulk-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "comm_events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "patch": {
                "summary": "comm_events bulk  update",
                "description": "To update multiple records using it's primary key you can use this api. Bulk updated api accepts array object in which each object should contain it's primary columns value mapped to corresponding alias. In addition to primary key you can include the fields which you want to update",
                "operationId": "comm_events-bulk-update",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "comm_events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "delete": {
                "summary": "comm_events bulk delete by IDs",
                "description": "To delete multiple records using it's primary key you can use this api. Bulk delete api accepts array object in which each object should contain it's primary columns value mapped to corresponding alias.",
                "operationId": "comm_events-bulk-delete",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "comm_events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/bulk/v1/pp2k69kcyjib180/comm_events/all": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "name": "where",
                    "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                }
            ],
            "patch": {
                "summary": "comm_events Bulk update with conditions",
                "description": "This api helps you update multiple table rows in a single api call. You don't have to pass the record id instead you can filter records and apply the changes to filtered records. Payload is similar as normal update in which you can pass any partial row data to be updated.",
                "operationId": "comm_events-bulk-update-all",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "comm_events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                }
            },
            "delete": {
                "summary": "Bulk delete with conditions",
                "description": "This api helps you delete multiple table rows in a single api call. You don't have to pass the record id instead you can filter records and delete filtered records.",
                "operationId": "comm_events-bulk-delete-all",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "comm_events"
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/export/{type}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "csv",
                            "excel"
                        ]
                    },
                    "name": "type",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Rows export",
                "operationId": "comm_events-csv-export",
                "description": "Export all the records from a table.Currently we are only supports `csv` export.",
                "tags": [
                    "comm_events"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/octet-stream": {
                                "schema": {}
                            }
                        },
                        "headers": {
                            "nc-export-offset": {
                                "schema": {
                                    "type": "integer"
                                },
                                "description": "Offset of next set of data which will be helpful if there is large amount of data. It will returns `-1` if all set of data exported.",
                                "example": "1000"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "schema": {
                            "type": "number",
                            "minimum": 0
                        },
                        "in": "query",
                        "name": "offset",
                        "description": "Helps to start export from a certain index. You can get the next set of data offset from previous response header named `nc-export-offset`.",
                        "example": 0
                    }
                ]
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/views/comm_events": {
            "get": {
                "summary": "comm_events list",
                "operationId": "comm_events-comm_events-row-list",
                "description": "List of all rows from comm_events grid view and data of fields can be filtered based on query params. Data and fields in a grid view will be filtered and sorted by default based on the applied options in Dashboard.",
                "tags": [
                    "comm_events ( comm_events grid )"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "fields",
                        "description": "Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`."
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "sort",
                        "description": "Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`"
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/comm_eventscomm_eventsGridResponse"
                                            }
                                        },
                                        "PageInfo": {
                                            "$ref": "#/components/schemas/Paginated"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "comm_events create",
                "description": "Insert a new row in table by providing a key value pair object where key refers to the column alias. All the required fields should be included with payload excluding `autoincrement` and column with default value.",
                "operationId": "comm_events-comm_events-row-create",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "comm_events ( comm_events grid )"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/comm_eventscomm_eventsGridRequest"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/views/comm_events/count": {
            "get": {
                "summary": "comm_events count",
                "operationId": "comm_events-comm_events-row-count",
                "description": "",
                "tags": [
                    "comm_events ( comm_events grid )"
                ],
                "parameters": [
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "where",
                        "description": "This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "number"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/views/comm_events/{rowId}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "rowId",
                    "in": "path",
                    "required": true,
                    "example": 1,
                    "description": "Primary key of the record you want to read. If the table have composite primary key then combine them by using `___` and pass it as primary key."
                }
            ],
            "get": {
                "summary": "comm_events read",
                "description": "Read a row data by using the **primary key** column value.",
                "operationId": "comm_events-comm_events-row-read",
                "responses": {
                    "200": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comm_eventscomm_eventsGridResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "comm_events ( comm_events grid )"
                ]
            },
            "patch": {
                "summary": "comm_events update",
                "description": "Partial update row in table by providing a key value pair object where key refers to the column alias. You need to only include columns which you want to update.",
                "operationId": "comm_events-comm_events-row-update",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "comm_events ( comm_events grid )"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/comm_eventscomm_eventsGridRequest"
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "comm_events delete",
                "operationId": "comm_events-comm_events-row-delete",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "comm_events ( comm_events grid )"
                ],
                "description": "Delete a row by using the **primary key** column value."
            }
        },
        "/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/views/comm_events/export/{type}": {
            "parameters": [
                {
                    "schema": {
                        "type": "string",
                        "enum": [
                            "csv",
                            "excel"
                        ]
                    },
                    "name": "type",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "comm_events export",
                "operationId": "comm_events-comm_events-row-export",
                "description": "Export all the records from a table view. Currently we are only supports `csv` export.",
                "tags": [
                    "comm_events ( comm_events grid )"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/octet-stream": {
                                "schema": {}
                            }
                        },
                        "headers": {
                            "nc-export-offset": {
                                "schema": {
                                    "type": "integer"
                                },
                                "description": "Offset of next set of data which will be helpful if there is large amount of data. It will returns `-1` if all set of data exported.",
                                "example": "1000"
                            }
                        }
                    }
                },
                "parameters": []
            }
        }
    },
    "components": {
        "schemas": {
            "Paginated": {
                "title": "Paginated",
                "type": "object",
                "properties": {
                    "pageSize": {
                        "type": "integer"
                    },
                    "totalRows": {
                        "type": "integer"
                    },
                    "isFirstPage": {
                        "type": "boolean"
                    },
                    "isLastPage": {
                        "type": "boolean"
                    },
                    "page": {
                        "type": "number"
                    }
                }
            },
            "Attachment": {
                "title": "Attachment",
                "type": "object",
                "properties": {
                    "mimetype": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "title": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    }
                }
            },
            "Groupby": {
                "title": "Groupby",
                "type": "object",
                "properties": {
                    "count": {
                        "type": "number",
                        "description": "count"
                    },
                    "column_name": {
                        "type": "string",
                        "description": "the value of the given column"
                    }
                }
            },
            "VolunteersResponse": {
                "title": "Volunteers Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    },
                    "discordId": {
                        "type": "string"
                    },
                    "tel": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "nc_zosb___events_id": {
                        "type": "integer"
                    },
                    "events": {
                        "$ref": "#/components/schemas/eventsRequest"
                    }
                }
            },
            "VolunteersRequest": {
                "title": "Volunteers Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    },
                    "discordId": {
                        "type": "string"
                    },
                    "tel": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "nc_zosb___events_id": {
                        "type": "integer"
                    }
                }
            },
            "VolunteersVolunteersGridResponse": {
                "title": "Volunteers : Volunteers Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    },
                    "discordId": {
                        "type": "string"
                    },
                    "tel": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "nc_zosb___events_id": {
                        "type": "integer"
                    },
                    "events": {
                        "$ref": "#/components/schemas/eventsRequest"
                    }
                }
            },
            "VolunteersVolunteersGridRequest": {
                "title": "Volunteers : Volunteers Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    },
                    "discordId": {
                        "type": "string"
                    },
                    "tel": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "nc_zosb___events_id": {
                        "type": "integer"
                    }
                }
            },
            "eventsResponse": {
                "title": "events Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "Title": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    },
                    "Debut": {
                        "type": "string"
                    },
                    "Fin": {
                        "type": "string"
                    },
                    "Volunteers": {
                        "type": "number"
                    }
                }
            },
            "eventsRequest": {
                "title": "events Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "Title": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    },
                    "Debut": {
                        "type": "string"
                    },
                    "Fin": {
                        "type": "string"
                    }
                }
            },
            "eventseventsGridResponse": {
                "title": "events : events Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "Title": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    },
                    "Debut": {
                        "type": "string"
                    },
                    "Fin": {
                        "type": "string"
                    },
                    "Volunteers": {
                        "type": "number"
                    }
                }
            },
            "eventseventsGridRequest": {
                "title": "events : events Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "Title": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    },
                    "Debut": {
                        "type": "string"
                    },
                    "Fin": {
                        "type": "string"
                    }
                }
            },
            "comm_eventsResponse": {
                "title": "comm_events Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "Title": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    }
                }
            },
            "comm_eventsRequest": {
                "title": "comm_events Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "Title": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    }
                }
            },
            "comm_eventscomm_eventsGridResponse": {
                "title": "comm_events : comm_events Response",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "Title": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    }
                }
            },
            "comm_eventscomm_eventsGridRequest": {
                "title": "comm_events : comm_events Request",
                "type": "object",
                "description": "",
                "x-internal": false,
                "properties": {
                    "Id": {
                        "type": "integer"
                    },
                    "Title": {
                        "type": "string"
                    },
                    "CreatedAt": {
                        "type": "string"
                    },
                    "UpdatedAt": {
                        "type": "string"
                    }
                }
            }
        },
        "securitySchemes": {
            "xcAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "xc-auth",
                "description": "JWT access token"
            },
            "xcToken": {
                "type": "apiKey",
                "in": "header",
                "name": "xc-token",
                "description": "API token"
            }
        }
    },
    "security": [
        {
            "xcAuth": []
        },
        {
            "xcToken": []
        }
    ]
}