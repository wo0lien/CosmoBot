// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	XcAuthScopes  = "xcAuth.Scopes"
	XcTokenScopes = "xcToken.Scopes"
)

// Groupby defines model for Groupby.
type Groupby struct {
	// ColumnName the value of the given column
	ColumnName *string `json:"column_name,omitempty"`

	// Count count
	Count *float32 `json:"count,omitempty"`
}

// Paginated defines model for Paginated.
type Paginated struct {
	IsFirstPage *bool    `json:"isFirstPage,omitempty"`
	IsLastPage  *bool    `json:"isLastPage,omitempty"`
	Page        *float32 `json:"page,omitempty"`
	PageSize    *int     `json:"pageSize,omitempty"`
	TotalRows   *int     `json:"totalRows,omitempty"`
}

// VolunteersRequest defines model for VolunteersRequest.
type VolunteersRequest struct {
	CreatedAt      *string `json:"CreatedAt,omitempty"`
	Id             *int    `json:"Id,omitempty"`
	UpdatedAt      *string `json:"UpdatedAt,omitempty"`
	DiscordId      *string `json:"discordId,omitempty"`
	Email          *string `json:"email,omitempty"`
	Name           *string `json:"name,omitempty"`
	NcZosbEventsId *int    `json:"nc_zosb___events_id,omitempty"`
	Tel            *string `json:"tel,omitempty"`
}

// VolunteersResponse defines model for VolunteersResponse.
type VolunteersResponse struct {
	CreatedAt      *string        `json:"CreatedAt,omitempty"`
	Id             *int           `json:"Id,omitempty"`
	UpdatedAt      *string        `json:"UpdatedAt,omitempty"`
	DiscordId      *string        `json:"discordId,omitempty"`
	Email          *string        `json:"email,omitempty"`
	Events         *EventsRequest `json:"events,omitempty"`
	Name           *string        `json:"name,omitempty"`
	NcZosbEventsId *int           `json:"nc_zosb___events_id,omitempty"`
	Tel            *string        `json:"tel,omitempty"`
}

// VolunteersVolunteersGridRequest defines model for VolunteersVolunteersGridRequest.
type VolunteersVolunteersGridRequest struct {
	CreatedAt      *string `json:"CreatedAt,omitempty"`
	Id             *int    `json:"Id,omitempty"`
	UpdatedAt      *string `json:"UpdatedAt,omitempty"`
	DiscordId      *string `json:"discordId,omitempty"`
	Email          *string `json:"email,omitempty"`
	Name           *string `json:"name,omitempty"`
	NcZosbEventsId *int    `json:"nc_zosb___events_id,omitempty"`
	Tel            *string `json:"tel,omitempty"`
}

// VolunteersVolunteersGridResponse defines model for VolunteersVolunteersGridResponse.
type VolunteersVolunteersGridResponse struct {
	CreatedAt      *string        `json:"CreatedAt,omitempty"`
	Id             *int           `json:"Id,omitempty"`
	UpdatedAt      *string        `json:"UpdatedAt,omitempty"`
	DiscordId      *string        `json:"discordId,omitempty"`
	Email          *string        `json:"email,omitempty"`
	Events         *EventsRequest `json:"events,omitempty"`
	Name           *string        `json:"name,omitempty"`
	NcZosbEventsId *int           `json:"nc_zosb___events_id,omitempty"`
	Tel            *string        `json:"tel,omitempty"`
}

// CommEventsRequest defines model for comm_eventsRequest.
type CommEventsRequest struct {
	CreatedAt *string `json:"CreatedAt,omitempty"`
	Id        *int    `json:"Id,omitempty"`
	Title     *string `json:"Title,omitempty"`
	UpdatedAt *string `json:"UpdatedAt,omitempty"`
}

// CommEventsResponse defines model for comm_eventsResponse.
type CommEventsResponse struct {
	CreatedAt *string `json:"CreatedAt,omitempty"`
	Id        *int    `json:"Id,omitempty"`
	Title     *string `json:"Title,omitempty"`
	UpdatedAt *string `json:"UpdatedAt,omitempty"`
}

// CommEventscommEventsGridRequest defines model for comm_eventscomm_eventsGridRequest.
type CommEventscommEventsGridRequest struct {
	CreatedAt *string `json:"CreatedAt,omitempty"`
	Id        *int    `json:"Id,omitempty"`
	Title     *string `json:"Title,omitempty"`
	UpdatedAt *string `json:"UpdatedAt,omitempty"`
}

// CommEventscommEventsGridResponse defines model for comm_eventscomm_eventsGridResponse.
type CommEventscommEventsGridResponse struct {
	CreatedAt *string `json:"CreatedAt,omitempty"`
	Id        *int    `json:"Id,omitempty"`
	Title     *string `json:"Title,omitempty"`
	UpdatedAt *string `json:"UpdatedAt,omitempty"`
}

// EventsRequest defines model for eventsRequest.
type EventsRequest struct {
	CreatedAt *string `json:"CreatedAt,omitempty"`
	Debut     *string `json:"Debut,omitempty"`
	Fin       *string `json:"Fin,omitempty"`
	Id        *int    `json:"Id,omitempty"`
	Title     *string `json:"Title,omitempty"`
	UpdatedAt *string `json:"UpdatedAt,omitempty"`
}

// EventsResponse defines model for eventsResponse.
type EventsResponse struct {
	CreatedAt  *string  `json:"CreatedAt,omitempty"`
	Debut      *string  `json:"Debut,omitempty"`
	Fin        *string  `json:"Fin,omitempty"`
	Id         *int     `json:"Id,omitempty"`
	Title      *string  `json:"Title,omitempty"`
	UpdatedAt  *string  `json:"UpdatedAt,omitempty"`
	Volunteers *float32 `json:"Volunteers,omitempty"`
}

// EventseventsGridRequest defines model for eventseventsGridRequest.
type EventseventsGridRequest struct {
	CreatedAt *string `json:"CreatedAt,omitempty"`
	Debut     *string `json:"Debut,omitempty"`
	Fin       *string `json:"Fin,omitempty"`
	Id        *int    `json:"Id,omitempty"`
	Title     *string `json:"Title,omitempty"`
	UpdatedAt *string `json:"UpdatedAt,omitempty"`
}

// EventseventsGridResponse defines model for eventseventsGridResponse.
type EventseventsGridResponse struct {
	CreatedAt  *string  `json:"CreatedAt,omitempty"`
	Debut      *string  `json:"Debut,omitempty"`
	Fin        *string  `json:"Fin,omitempty"`
	Id         *int     `json:"Id,omitempty"`
	Title      *string  `json:"Title,omitempty"`
	UpdatedAt  *string  `json:"UpdatedAt,omitempty"`
	Volunteers *float32 `json:"Volunteers,omitempty"`
}

// VolunteersBulkDeleteJSONBody defines parameters for VolunteersBulkDelete.
type VolunteersBulkDeleteJSONBody = interface{}

// VolunteersBulkUpdateJSONBody defines parameters for VolunteersBulkUpdate.
type VolunteersBulkUpdateJSONBody = interface{}

// VolunteersBulkCreateJSONBody defines parameters for VolunteersBulkCreate.
type VolunteersBulkCreateJSONBody = interface{}

// VolunteersBulkDeleteAllParams defines parameters for VolunteersBulkDeleteAll.
type VolunteersBulkDeleteAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// VolunteersBulkUpdateAllJSONBody defines parameters for VolunteersBulkUpdateAll.
type VolunteersBulkUpdateAllJSONBody = interface{}

// VolunteersBulkUpdateAllParams defines parameters for VolunteersBulkUpdateAll.
type VolunteersBulkUpdateAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// CommEventsBulkDeleteJSONBody defines parameters for CommEventsBulkDelete.
type CommEventsBulkDeleteJSONBody = interface{}

// CommEventsBulkUpdateJSONBody defines parameters for CommEventsBulkUpdate.
type CommEventsBulkUpdateJSONBody = interface{}

// CommEventsBulkCreateJSONBody defines parameters for CommEventsBulkCreate.
type CommEventsBulkCreateJSONBody = interface{}

// CommEventsBulkDeleteAllParams defines parameters for CommEventsBulkDeleteAll.
type CommEventsBulkDeleteAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// CommEventsBulkUpdateAllJSONBody defines parameters for CommEventsBulkUpdateAll.
type CommEventsBulkUpdateAllJSONBody = interface{}

// CommEventsBulkUpdateAllParams defines parameters for CommEventsBulkUpdateAll.
type CommEventsBulkUpdateAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// EventsBulkDeleteJSONBody defines parameters for EventsBulkDelete.
type EventsBulkDeleteJSONBody = interface{}

// EventsBulkUpdateJSONBody defines parameters for EventsBulkUpdate.
type EventsBulkUpdateJSONBody = interface{}

// EventsBulkCreateJSONBody defines parameters for EventsBulkCreate.
type EventsBulkCreateJSONBody = interface{}

// EventsBulkDeleteAllParams defines parameters for EventsBulkDeleteAll.
type EventsBulkDeleteAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// EventsBulkUpdateAllJSONBody defines parameters for EventsBulkUpdateAll.
type EventsBulkUpdateAllJSONBody = interface{}

// EventsBulkUpdateAllParams defines parameters for EventsBulkUpdateAll.
type EventsBulkUpdateAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// VolunteersDbTableRowListParams defines parameters for VolunteersDbTableRowList.
type VolunteersDbTableRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// NestedEventsFields Array of field names or comma separated filed names to include in the in nested column `events` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[events][fields]=field1,field2`
	NestedEventsFields *string `form:"nested[events][fields],omitempty" json:"nested[events][fields],omitempty"`
}

// VolunteersCountParams defines parameters for VolunteersCount.
type VolunteersCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// VolunteersCsvExportParams defines parameters for VolunteersCsvExport.
type VolunteersCsvExportParams struct {
	// Offset Helps to start export from a certain index. You can get the next set of data offset from previous response header named `nc-export-offset`.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// VolunteersDbTableRowFindOneParams defines parameters for VolunteersDbTableRowFindOne.
type VolunteersDbTableRowFindOneParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// VolunteersGroupbyParams defines parameters for VolunteersGroupby.
type VolunteersGroupbyParams struct {
	// ColumnName Column name of the column you want to group by, eg. `column_name=column1`
	ColumnName *string `form:"column_name,omitempty" json:"column_name,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`
}

// VolunteersVolunteersRowListParams defines parameters for VolunteersVolunteersRowList.
type VolunteersVolunteersRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// NestedEventsFields Array of field names or comma separated filed names to include in the in nested column `events` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[events][fields]=field1,field2`
	NestedEventsFields *string `form:"nested[events][fields],omitempty" json:"nested[events][fields],omitempty"`
}

// VolunteersVolunteersRowCountParams defines parameters for VolunteersVolunteersRowCount.
type VolunteersVolunteersRowCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// VolunteersReadParams defines parameters for VolunteersRead.
type VolunteersReadParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// VolunteersUpdateJSONBody defines parameters for VolunteersUpdate.
type VolunteersUpdateJSONBody = interface{}

// VolunteersNestedListParams defines parameters for VolunteersNestedList.
type VolunteersNestedListParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// VolunteersNestedChildrenExcludedListParams defines parameters for VolunteersNestedChildrenExcludedList.
type VolunteersNestedChildrenExcludedListParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// VolunteersNestedAddParams defines parameters for VolunteersNestedAdd.
type VolunteersNestedAddParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CommEventsDbTableRowListParams defines parameters for CommEventsDbTableRowList.
type CommEventsDbTableRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CommEventsCountParams defines parameters for CommEventsCount.
type CommEventsCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// CommEventsCsvExportParams defines parameters for CommEventsCsvExport.
type CommEventsCsvExportParams struct {
	// Offset Helps to start export from a certain index. You can get the next set of data offset from previous response header named `nc-export-offset`.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CommEventsDbTableRowFindOneParams defines parameters for CommEventsDbTableRowFindOne.
type CommEventsDbTableRowFindOneParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// CommEventsGroupbyParams defines parameters for CommEventsGroupby.
type CommEventsGroupbyParams struct {
	// ColumnName Column name of the column you want to group by, eg. `column_name=column1`
	ColumnName *string `form:"column_name,omitempty" json:"column_name,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`
}

// CommEventsCommEventsRowListParams defines parameters for CommEventsCommEventsRowList.
type CommEventsCommEventsRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// CommEventsCommEventsRowCountParams defines parameters for CommEventsCommEventsRowCount.
type CommEventsCommEventsRowCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// CommEventsReadParams defines parameters for CommEventsRead.
type CommEventsReadParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// CommEventsUpdateJSONBody defines parameters for CommEventsUpdate.
type CommEventsUpdateJSONBody = interface{}

// EventsDbTableRowListParams defines parameters for EventsDbTableRowList.
type EventsDbTableRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// EventsCountParams defines parameters for EventsCount.
type EventsCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// EventsCsvExportParams defines parameters for EventsCsvExport.
type EventsCsvExportParams struct {
	// Offset Helps to start export from a certain index. You can get the next set of data offset from previous response header named `nc-export-offset`.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// EventsDbTableRowFindOneParams defines parameters for EventsDbTableRowFindOne.
type EventsDbTableRowFindOneParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// EventsGroupbyParams defines parameters for EventsGroupby.
type EventsGroupbyParams struct {
	// ColumnName Column name of the column you want to group by, eg. `column_name=column1`
	ColumnName *string `form:"column_name,omitempty" json:"column_name,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`
}

// EventsEventsRowListParams defines parameters for EventsEventsRowList.
type EventsEventsRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// EventsEventsRowCountParams defines parameters for EventsEventsRowCount.
type EventsEventsRowCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// EventsReadParams defines parameters for EventsRead.
type EventsReadParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// EventsUpdateJSONBody defines parameters for EventsUpdate.
type EventsUpdateJSONBody = interface{}

// EventsNestedListParams defines parameters for EventsNestedList.
type EventsNestedListParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// EventsNestedChildrenExcludedListParams defines parameters for EventsNestedChildrenExcludedList.
type EventsNestedChildrenExcludedListParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// EventsNestedAddParams defines parameters for EventsNestedAdd.
type EventsNestedAddParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// VolunteersBulkDeleteJSONRequestBody defines body for VolunteersBulkDelete for application/json ContentType.
type VolunteersBulkDeleteJSONRequestBody = VolunteersBulkDeleteJSONBody

// VolunteersBulkUpdateJSONRequestBody defines body for VolunteersBulkUpdate for application/json ContentType.
type VolunteersBulkUpdateJSONRequestBody = VolunteersBulkUpdateJSONBody

// VolunteersBulkCreateJSONRequestBody defines body for VolunteersBulkCreate for application/json ContentType.
type VolunteersBulkCreateJSONRequestBody = VolunteersBulkCreateJSONBody

// VolunteersBulkUpdateAllJSONRequestBody defines body for VolunteersBulkUpdateAll for application/json ContentType.
type VolunteersBulkUpdateAllJSONRequestBody = VolunteersBulkUpdateAllJSONBody

// CommEventsBulkDeleteJSONRequestBody defines body for CommEventsBulkDelete for application/json ContentType.
type CommEventsBulkDeleteJSONRequestBody = CommEventsBulkDeleteJSONBody

// CommEventsBulkUpdateJSONRequestBody defines body for CommEventsBulkUpdate for application/json ContentType.
type CommEventsBulkUpdateJSONRequestBody = CommEventsBulkUpdateJSONBody

// CommEventsBulkCreateJSONRequestBody defines body for CommEventsBulkCreate for application/json ContentType.
type CommEventsBulkCreateJSONRequestBody = CommEventsBulkCreateJSONBody

// CommEventsBulkUpdateAllJSONRequestBody defines body for CommEventsBulkUpdateAll for application/json ContentType.
type CommEventsBulkUpdateAllJSONRequestBody = CommEventsBulkUpdateAllJSONBody

// EventsBulkDeleteJSONRequestBody defines body for EventsBulkDelete for application/json ContentType.
type EventsBulkDeleteJSONRequestBody = EventsBulkDeleteJSONBody

// EventsBulkUpdateJSONRequestBody defines body for EventsBulkUpdate for application/json ContentType.
type EventsBulkUpdateJSONRequestBody = EventsBulkUpdateJSONBody

// EventsBulkCreateJSONRequestBody defines body for EventsBulkCreate for application/json ContentType.
type EventsBulkCreateJSONRequestBody = EventsBulkCreateJSONBody

// EventsBulkUpdateAllJSONRequestBody defines body for EventsBulkUpdateAll for application/json ContentType.
type EventsBulkUpdateAllJSONRequestBody = EventsBulkUpdateAllJSONBody

// VolunteersCreateJSONRequestBody defines body for VolunteersCreate for application/json ContentType.
type VolunteersCreateJSONRequestBody = VolunteersRequest

// VolunteersVolunteersRowCreateJSONRequestBody defines body for VolunteersVolunteersRowCreate for application/json ContentType.
type VolunteersVolunteersRowCreateJSONRequestBody = VolunteersVolunteersGridRequest

// VolunteersVolunteersRowUpdateJSONRequestBody defines body for VolunteersVolunteersRowUpdate for application/json ContentType.
type VolunteersVolunteersRowUpdateJSONRequestBody = VolunteersVolunteersGridRequest

// VolunteersUpdateJSONRequestBody defines body for VolunteersUpdate for application/json ContentType.
type VolunteersUpdateJSONRequestBody = VolunteersUpdateJSONBody

// CommEventsCreateJSONRequestBody defines body for CommEventsCreate for application/json ContentType.
type CommEventsCreateJSONRequestBody = CommEventsRequest

// CommEventsCommEventsRowCreateJSONRequestBody defines body for CommEventsCommEventsRowCreate for application/json ContentType.
type CommEventsCommEventsRowCreateJSONRequestBody = CommEventscommEventsGridRequest

// CommEventsCommEventsRowUpdateJSONRequestBody defines body for CommEventsCommEventsRowUpdate for application/json ContentType.
type CommEventsCommEventsRowUpdateJSONRequestBody = CommEventscommEventsGridRequest

// CommEventsUpdateJSONRequestBody defines body for CommEventsUpdate for application/json ContentType.
type CommEventsUpdateJSONRequestBody = CommEventsUpdateJSONBody

// EventsCreateJSONRequestBody defines body for EventsCreate for application/json ContentType.
type EventsCreateJSONRequestBody = EventsRequest

// EventsEventsRowCreateJSONRequestBody defines body for EventsEventsRowCreate for application/json ContentType.
type EventsEventsRowCreateJSONRequestBody = EventseventsGridRequest

// EventsEventsRowUpdateJSONRequestBody defines body for EventsEventsRowUpdate for application/json ContentType.
type EventsEventsRowUpdateJSONRequestBody = EventseventsGridRequest

// EventsUpdateJSONRequestBody defines body for EventsUpdate for application/json ContentType.
type EventsUpdateJSONRequestBody = EventsUpdateJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// VolunteersBulkDeleteWithBody request with any body
	VolunteersBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersBulkDelete(ctx context.Context, body VolunteersBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersBulkUpdateWithBody request with any body
	VolunteersBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersBulkUpdate(ctx context.Context, body VolunteersBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersBulkCreateWithBody request with any body
	VolunteersBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersBulkCreate(ctx context.Context, body VolunteersBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersBulkDeleteAll request
	VolunteersBulkDeleteAll(ctx context.Context, params *VolunteersBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersBulkUpdateAllWithBody request with any body
	VolunteersBulkUpdateAllWithBody(ctx context.Context, params *VolunteersBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersBulkUpdateAll(ctx context.Context, params *VolunteersBulkUpdateAllParams, body VolunteersBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsBulkDeleteWithBody request with any body
	CommEventsBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommEventsBulkDelete(ctx context.Context, body CommEventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsBulkUpdateWithBody request with any body
	CommEventsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommEventsBulkUpdate(ctx context.Context, body CommEventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsBulkCreateWithBody request with any body
	CommEventsBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommEventsBulkCreate(ctx context.Context, body CommEventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsBulkDeleteAll request
	CommEventsBulkDeleteAll(ctx context.Context, params *CommEventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsBulkUpdateAllWithBody request with any body
	CommEventsBulkUpdateAllWithBody(ctx context.Context, params *CommEventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommEventsBulkUpdateAll(ctx context.Context, params *CommEventsBulkUpdateAllParams, body CommEventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsBulkDeleteWithBody request with any body
	EventsBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsBulkDelete(ctx context.Context, body EventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsBulkUpdateWithBody request with any body
	EventsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsBulkUpdate(ctx context.Context, body EventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsBulkCreateWithBody request with any body
	EventsBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsBulkCreate(ctx context.Context, body EventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsBulkDeleteAll request
	EventsBulkDeleteAll(ctx context.Context, params *EventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsBulkUpdateAllWithBody request with any body
	EventsBulkUpdateAllWithBody(ctx context.Context, params *EventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsBulkUpdateAll(ctx context.Context, params *EventsBulkUpdateAllParams, body EventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersDbTableRowList request
	VolunteersDbTableRowList(ctx context.Context, params *VolunteersDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersCreateWithBody request with any body
	VolunteersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersCreate(ctx context.Context, body VolunteersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersCount request
	VolunteersCount(ctx context.Context, params *VolunteersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersCsvExport request
	VolunteersCsvExport(ctx context.Context, pType string, params *VolunteersCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersDbTableRowFindOne request
	VolunteersDbTableRowFindOne(ctx context.Context, params *VolunteersDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersGroupby request
	VolunteersGroupby(ctx context.Context, params *VolunteersGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersVolunteersRowList request
	VolunteersVolunteersRowList(ctx context.Context, params *VolunteersVolunteersRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersVolunteersRowCreateWithBody request with any body
	VolunteersVolunteersRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersVolunteersRowCreate(ctx context.Context, body VolunteersVolunteersRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersVolunteersRowCount request
	VolunteersVolunteersRowCount(ctx context.Context, params *VolunteersVolunteersRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersVolunteersRowExport request
	VolunteersVolunteersRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersVolunteersRowDelete request
	VolunteersVolunteersRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersVolunteersRowRead request
	VolunteersVolunteersRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersVolunteersRowUpdateWithBody request with any body
	VolunteersVolunteersRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersVolunteersRowUpdate(ctx context.Context, rowId string, body VolunteersVolunteersRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersDelete request
	VolunteersDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersRead request
	VolunteersRead(ctx context.Context, rowId string, params *VolunteersReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersUpdateWithBody request with any body
	VolunteersUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersUpdate(ctx context.Context, rowId string, body VolunteersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersNestedList request
	VolunteersNestedList(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersNestedChildrenExcludedList request
	VolunteersNestedChildrenExcludedList(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersNestedRemove request
	VolunteersNestedRemove(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersNestedAdd request
	VolunteersNestedAdd(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *VolunteersNestedAddParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsDbTableRowList request
	CommEventsDbTableRowList(ctx context.Context, params *CommEventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsCreateWithBody request with any body
	CommEventsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommEventsCreate(ctx context.Context, body CommEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsCount request
	CommEventsCount(ctx context.Context, params *CommEventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsCsvExport request
	CommEventsCsvExport(ctx context.Context, pType string, params *CommEventsCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsDbTableRowFindOne request
	CommEventsDbTableRowFindOne(ctx context.Context, params *CommEventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsGroupby request
	CommEventsGroupby(ctx context.Context, params *CommEventsGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsCommEventsRowList request
	CommEventsCommEventsRowList(ctx context.Context, params *CommEventsCommEventsRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsCommEventsRowCreateWithBody request with any body
	CommEventsCommEventsRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommEventsCommEventsRowCreate(ctx context.Context, body CommEventsCommEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsCommEventsRowCount request
	CommEventsCommEventsRowCount(ctx context.Context, params *CommEventsCommEventsRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsCommEventsRowExport request
	CommEventsCommEventsRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsCommEventsRowDelete request
	CommEventsCommEventsRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsCommEventsRowRead request
	CommEventsCommEventsRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsCommEventsRowUpdateWithBody request with any body
	CommEventsCommEventsRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommEventsCommEventsRowUpdate(ctx context.Context, rowId string, body CommEventsCommEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsDelete request
	CommEventsDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsRead request
	CommEventsRead(ctx context.Context, rowId string, params *CommEventsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommEventsUpdateWithBody request with any body
	CommEventsUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommEventsUpdate(ctx context.Context, rowId string, body CommEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsDbTableRowList request
	EventsDbTableRowList(ctx context.Context, params *EventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsCreateWithBody request with any body
	EventsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsCreate(ctx context.Context, body EventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsCount request
	EventsCount(ctx context.Context, params *EventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsCsvExport request
	EventsCsvExport(ctx context.Context, pType string, params *EventsCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsDbTableRowFindOne request
	EventsDbTableRowFindOne(ctx context.Context, params *EventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsGroupby request
	EventsGroupby(ctx context.Context, params *EventsGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowList request
	EventsEventsRowList(ctx context.Context, params *EventsEventsRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowCreateWithBody request with any body
	EventsEventsRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsEventsRowCreate(ctx context.Context, body EventsEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowCount request
	EventsEventsRowCount(ctx context.Context, params *EventsEventsRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowExport request
	EventsEventsRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowDelete request
	EventsEventsRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowRead request
	EventsEventsRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowUpdateWithBody request with any body
	EventsEventsRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsEventsRowUpdate(ctx context.Context, rowId string, body EventsEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsDelete request
	EventsDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsRead request
	EventsRead(ctx context.Context, rowId string, params *EventsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsUpdateWithBody request with any body
	EventsUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsUpdate(ctx context.Context, rowId string, body EventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsNestedList request
	EventsNestedList(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsNestedChildrenExcludedList request
	EventsNestedChildrenExcludedList(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsNestedRemove request
	EventsNestedRemove(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsNestedAdd request
	EventsNestedAdd(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *EventsNestedAddParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) VolunteersBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkDelete(ctx context.Context, body VolunteersBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkUpdate(ctx context.Context, body VolunteersBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkCreate(ctx context.Context, body VolunteersBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkDeleteAll(ctx context.Context, params *VolunteersBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkDeleteAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkUpdateAllWithBody(ctx context.Context, params *VolunteersBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkUpdateAllRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkUpdateAll(ctx context.Context, params *VolunteersBulkUpdateAllParams, body VolunteersBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkUpdateAllRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsBulkDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsBulkDelete(ctx context.Context, body CommEventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsBulkDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsBulkUpdate(ctx context.Context, body CommEventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsBulkCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsBulkCreate(ctx context.Context, body CommEventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsBulkCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsBulkDeleteAll(ctx context.Context, params *CommEventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsBulkDeleteAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsBulkUpdateAllWithBody(ctx context.Context, params *CommEventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsBulkUpdateAllRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsBulkUpdateAll(ctx context.Context, params *CommEventsBulkUpdateAllParams, body CommEventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsBulkUpdateAllRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkDelete(ctx context.Context, body EventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkUpdate(ctx context.Context, body EventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkCreate(ctx context.Context, body EventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkDeleteAll(ctx context.Context, params *EventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkDeleteAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkUpdateAllWithBody(ctx context.Context, params *EventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkUpdateAllRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkUpdateAll(ctx context.Context, params *EventsBulkUpdateAllParams, body EventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkUpdateAllRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersDbTableRowList(ctx context.Context, params *VolunteersDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersDbTableRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersCreate(ctx context.Context, body VolunteersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersCount(ctx context.Context, params *VolunteersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersCsvExport(ctx context.Context, pType string, params *VolunteersCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersCsvExportRequest(c.Server, pType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersDbTableRowFindOne(ctx context.Context, params *VolunteersDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersDbTableRowFindOneRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersGroupby(ctx context.Context, params *VolunteersGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersGroupbyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersVolunteersRowList(ctx context.Context, params *VolunteersVolunteersRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersVolunteersRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersVolunteersRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersVolunteersRowCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersVolunteersRowCreate(ctx context.Context, body VolunteersVolunteersRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersVolunteersRowCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersVolunteersRowCount(ctx context.Context, params *VolunteersVolunteersRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersVolunteersRowCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersVolunteersRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersVolunteersRowExportRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersVolunteersRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersVolunteersRowDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersVolunteersRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersVolunteersRowReadRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersVolunteersRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersVolunteersRowUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersVolunteersRowUpdate(ctx context.Context, rowId string, body VolunteersVolunteersRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersVolunteersRowUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersRead(ctx context.Context, rowId string, params *VolunteersReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersReadRequest(c.Server, rowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersUpdate(ctx context.Context, rowId string, body VolunteersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersNestedList(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersNestedListRequest(c.Server, rowId, relationType, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersNestedChildrenExcludedList(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersNestedChildrenExcludedListRequest(c.Server, rowId, relationType, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersNestedRemove(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersNestedRemoveRequest(c.Server, rowId, relationType, columnName, refRowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersNestedAdd(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *VolunteersNestedAddParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersNestedAddRequest(c.Server, rowId, relationType, columnName, refRowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsDbTableRowList(ctx context.Context, params *CommEventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsDbTableRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCreate(ctx context.Context, body CommEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCount(ctx context.Context, params *CommEventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCsvExport(ctx context.Context, pType string, params *CommEventsCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCsvExportRequest(c.Server, pType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsDbTableRowFindOne(ctx context.Context, params *CommEventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsDbTableRowFindOneRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsGroupby(ctx context.Context, params *CommEventsGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsGroupbyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCommEventsRowList(ctx context.Context, params *CommEventsCommEventsRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCommEventsRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCommEventsRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCommEventsRowCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCommEventsRowCreate(ctx context.Context, body CommEventsCommEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCommEventsRowCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCommEventsRowCount(ctx context.Context, params *CommEventsCommEventsRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCommEventsRowCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCommEventsRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCommEventsRowExportRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCommEventsRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCommEventsRowDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCommEventsRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCommEventsRowReadRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCommEventsRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCommEventsRowUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsCommEventsRowUpdate(ctx context.Context, rowId string, body CommEventsCommEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsCommEventsRowUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsRead(ctx context.Context, rowId string, params *CommEventsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsReadRequest(c.Server, rowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommEventsUpdate(ctx context.Context, rowId string, body CommEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommEventsUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsDbTableRowList(ctx context.Context, params *EventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsDbTableRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsCreate(ctx context.Context, body EventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsCount(ctx context.Context, params *EventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsCsvExport(ctx context.Context, pType string, params *EventsCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsCsvExportRequest(c.Server, pType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsDbTableRowFindOne(ctx context.Context, params *EventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsDbTableRowFindOneRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsGroupby(ctx context.Context, params *EventsGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsGroupbyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowList(ctx context.Context, params *EventsEventsRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowCreate(ctx context.Context, body EventsEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowCount(ctx context.Context, params *EventsEventsRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowExportRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowReadRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowUpdate(ctx context.Context, rowId string, body EventsEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsRead(ctx context.Context, rowId string, params *EventsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsReadRequest(c.Server, rowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsUpdate(ctx context.Context, rowId string, body EventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsNestedList(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsNestedListRequest(c.Server, rowId, relationType, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsNestedChildrenExcludedList(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsNestedChildrenExcludedListRequest(c.Server, rowId, relationType, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsNestedRemove(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsNestedRemoveRequest(c.Server, rowId, relationType, columnName, refRowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsNestedAdd(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *EventsNestedAddParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsNestedAddRequest(c.Server, rowId, relationType, columnName, refRowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewVolunteersBulkDeleteRequest calls the generic VolunteersBulkDelete builder with application/json body
func NewVolunteersBulkDeleteRequest(server string, body VolunteersBulkDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersBulkDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewVolunteersBulkDeleteRequestWithBody generates requests for VolunteersBulkDelete with any type of body
func NewVolunteersBulkDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersBulkUpdateRequest calls the generic VolunteersBulkUpdate builder with application/json body
func NewVolunteersBulkUpdateRequest(server string, body VolunteersBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewVolunteersBulkUpdateRequestWithBody generates requests for VolunteersBulkUpdate with any type of body
func NewVolunteersBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersBulkCreateRequest calls the generic VolunteersBulkCreate builder with application/json body
func NewVolunteersBulkCreateRequest(server string, body VolunteersBulkCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersBulkCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewVolunteersBulkCreateRequestWithBody generates requests for VolunteersBulkCreate with any type of body
func NewVolunteersBulkCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersBulkDeleteAllRequest generates requests for VolunteersBulkDeleteAll
func NewVolunteersBulkDeleteAllRequest(server string, params *VolunteersBulkDeleteAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/Volunteers/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersBulkUpdateAllRequest calls the generic VolunteersBulkUpdateAll builder with application/json body
func NewVolunteersBulkUpdateAllRequest(server string, params *VolunteersBulkUpdateAllParams, body VolunteersBulkUpdateAllJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersBulkUpdateAllRequestWithBody(server, params, "application/json", bodyReader)
}

// NewVolunteersBulkUpdateAllRequestWithBody generates requests for VolunteersBulkUpdateAll with any type of body
func NewVolunteersBulkUpdateAllRequestWithBody(server string, params *VolunteersBulkUpdateAllParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/Volunteers/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommEventsBulkDeleteRequest calls the generic CommEventsBulkDelete builder with application/json body
func NewCommEventsBulkDeleteRequest(server string, body CommEventsBulkDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommEventsBulkDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewCommEventsBulkDeleteRequestWithBody generates requests for CommEventsBulkDelete with any type of body
func NewCommEventsBulkDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/comm_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommEventsBulkUpdateRequest calls the generic CommEventsBulkUpdate builder with application/json body
func NewCommEventsBulkUpdateRequest(server string, body CommEventsBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommEventsBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewCommEventsBulkUpdateRequestWithBody generates requests for CommEventsBulkUpdate with any type of body
func NewCommEventsBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/comm_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommEventsBulkCreateRequest calls the generic CommEventsBulkCreate builder with application/json body
func NewCommEventsBulkCreateRequest(server string, body CommEventsBulkCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommEventsBulkCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCommEventsBulkCreateRequestWithBody generates requests for CommEventsBulkCreate with any type of body
func NewCommEventsBulkCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/comm_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommEventsBulkDeleteAllRequest generates requests for CommEventsBulkDeleteAll
func NewCommEventsBulkDeleteAllRequest(server string, params *CommEventsBulkDeleteAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/comm_events/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsBulkUpdateAllRequest calls the generic CommEventsBulkUpdateAll builder with application/json body
func NewCommEventsBulkUpdateAllRequest(server string, params *CommEventsBulkUpdateAllParams, body CommEventsBulkUpdateAllJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommEventsBulkUpdateAllRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommEventsBulkUpdateAllRequestWithBody generates requests for CommEventsBulkUpdateAll with any type of body
func NewCommEventsBulkUpdateAllRequestWithBody(server string, params *CommEventsBulkUpdateAllParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/comm_events/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsBulkDeleteRequest calls the generic EventsBulkDelete builder with application/json body
func NewEventsBulkDeleteRequest(server string, body EventsBulkDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsBulkDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewEventsBulkDeleteRequestWithBody generates requests for EventsBulkDelete with any type of body
func NewEventsBulkDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsBulkUpdateRequest calls the generic EventsBulkUpdate builder with application/json body
func NewEventsBulkUpdateRequest(server string, body EventsBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewEventsBulkUpdateRequestWithBody generates requests for EventsBulkUpdate with any type of body
func NewEventsBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsBulkCreateRequest calls the generic EventsBulkCreate builder with application/json body
func NewEventsBulkCreateRequest(server string, body EventsBulkCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsBulkCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEventsBulkCreateRequestWithBody generates requests for EventsBulkCreate with any type of body
func NewEventsBulkCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsBulkDeleteAllRequest generates requests for EventsBulkDeleteAll
func NewEventsBulkDeleteAllRequest(server string, params *EventsBulkDeleteAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/events/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsBulkUpdateAllRequest calls the generic EventsBulkUpdateAll builder with application/json body
func NewEventsBulkUpdateAllRequest(server string, params *EventsBulkUpdateAllParams, body EventsBulkUpdateAllJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsBulkUpdateAllRequestWithBody(server, params, "application/json", bodyReader)
}

// NewEventsBulkUpdateAllRequestWithBody generates requests for EventsBulkUpdateAll with any type of body
func NewEventsBulkUpdateAllRequestWithBody(server string, params *EventsBulkUpdateAllParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/pp2k69kcyjib180/events/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersDbTableRowListRequest generates requests for VolunteersDbTableRowList
func NewVolunteersDbTableRowListRequest(server string, params *VolunteersDbTableRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedEventsFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[events][fields]", runtime.ParamLocationQuery, *params.NestedEventsFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersCreateRequest calls the generic VolunteersCreate builder with application/json body
func NewVolunteersCreateRequest(server string, body VolunteersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewVolunteersCreateRequestWithBody generates requests for VolunteersCreate with any type of body
func NewVolunteersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersCountRequest generates requests for VolunteersCount
func NewVolunteersCountRequest(server string, params *VolunteersCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersCsvExportRequest generates requests for VolunteersCsvExport
func NewVolunteersCsvExportRequest(server string, pType string, params *VolunteersCsvExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersDbTableRowFindOneRequest generates requests for VolunteersDbTableRowFindOne
func NewVolunteersDbTableRowFindOneRequest(server string, params *VolunteersDbTableRowFindOneParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/find-one")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersGroupbyRequest generates requests for VolunteersGroupby
func NewVolunteersGroupbyRequest(server string, params *VolunteersGroupbyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/groupby")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ColumnName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column_name", runtime.ParamLocationQuery, *params.ColumnName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersVolunteersRowListRequest generates requests for VolunteersVolunteersRowList
func NewVolunteersVolunteersRowListRequest(server string, params *VolunteersVolunteersRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/views/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedEventsFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[events][fields]", runtime.ParamLocationQuery, *params.NestedEventsFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersVolunteersRowCreateRequest calls the generic VolunteersVolunteersRowCreate builder with application/json body
func NewVolunteersVolunteersRowCreateRequest(server string, body VolunteersVolunteersRowCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersVolunteersRowCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewVolunteersVolunteersRowCreateRequestWithBody generates requests for VolunteersVolunteersRowCreate with any type of body
func NewVolunteersVolunteersRowCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/views/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersVolunteersRowCountRequest generates requests for VolunteersVolunteersRowCount
func NewVolunteersVolunteersRowCountRequest(server string, params *VolunteersVolunteersRowCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/views/Volunteers/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersVolunteersRowExportRequest generates requests for VolunteersVolunteersRowExport
func NewVolunteersVolunteersRowExportRequest(server string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/views/Volunteers/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersVolunteersRowDeleteRequest generates requests for VolunteersVolunteersRowDelete
func NewVolunteersVolunteersRowDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/views/Volunteers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersVolunteersRowReadRequest generates requests for VolunteersVolunteersRowRead
func NewVolunteersVolunteersRowReadRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/views/Volunteers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersVolunteersRowUpdateRequest calls the generic VolunteersVolunteersRowUpdate builder with application/json body
func NewVolunteersVolunteersRowUpdateRequest(server string, rowId string, body VolunteersVolunteersRowUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersVolunteersRowUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewVolunteersVolunteersRowUpdateRequestWithBody generates requests for VolunteersVolunteersRowUpdate with any type of body
func NewVolunteersVolunteersRowUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/views/Volunteers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersDeleteRequest generates requests for VolunteersDelete
func NewVolunteersDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersReadRequest generates requests for VolunteersRead
func NewVolunteersReadRequest(server string, rowId string, params *VolunteersReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersUpdateRequest calls the generic VolunteersUpdate builder with application/json body
func NewVolunteersUpdateRequest(server string, rowId string, body VolunteersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewVolunteersUpdateRequestWithBody generates requests for VolunteersUpdate with any type of body
func NewVolunteersUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersNestedListRequest generates requests for VolunteersNestedList
func NewVolunteersNestedListRequest(server string, rowId string, relationType string, columnName string, params *VolunteersNestedListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersNestedChildrenExcludedListRequest generates requests for VolunteersNestedChildrenExcludedList
func NewVolunteersNestedChildrenExcludedListRequest(server string, rowId string, relationType string, columnName string, params *VolunteersNestedChildrenExcludedListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/%s/%s/%s/exclude", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersNestedRemoveRequest generates requests for VolunteersNestedRemove
func NewVolunteersNestedRemoveRequest(server string, rowId string, relationType string, columnName string, refRowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "refRowId", runtime.ParamLocationPath, refRowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersNestedAddRequest generates requests for VolunteersNestedAdd
func NewVolunteersNestedAddRequest(server string, rowId string, relationType string, columnName string, refRowId string, params *VolunteersNestedAddParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "refRowId", runtime.ParamLocationPath, refRowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/Volunteers/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsDbTableRowListRequest generates requests for CommEventsDbTableRowList
func NewCommEventsDbTableRowListRequest(server string, params *CommEventsDbTableRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsCreateRequest calls the generic CommEventsCreate builder with application/json body
func NewCommEventsCreateRequest(server string, body CommEventsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommEventsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCommEventsCreateRequestWithBody generates requests for CommEventsCreate with any type of body
func NewCommEventsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommEventsCountRequest generates requests for CommEventsCount
func NewCommEventsCountRequest(server string, params *CommEventsCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsCsvExportRequest generates requests for CommEventsCsvExport
func NewCommEventsCsvExportRequest(server string, pType string, params *CommEventsCsvExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsDbTableRowFindOneRequest generates requests for CommEventsDbTableRowFindOne
func NewCommEventsDbTableRowFindOneRequest(server string, params *CommEventsDbTableRowFindOneParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/find-one")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsGroupbyRequest generates requests for CommEventsGroupby
func NewCommEventsGroupbyRequest(server string, params *CommEventsGroupbyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/groupby")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ColumnName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column_name", runtime.ParamLocationQuery, *params.ColumnName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsCommEventsRowListRequest generates requests for CommEventsCommEventsRowList
func NewCommEventsCommEventsRowListRequest(server string, params *CommEventsCommEventsRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/views/comm_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsCommEventsRowCreateRequest calls the generic CommEventsCommEventsRowCreate builder with application/json body
func NewCommEventsCommEventsRowCreateRequest(server string, body CommEventsCommEventsRowCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommEventsCommEventsRowCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCommEventsCommEventsRowCreateRequestWithBody generates requests for CommEventsCommEventsRowCreate with any type of body
func NewCommEventsCommEventsRowCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/views/comm_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommEventsCommEventsRowCountRequest generates requests for CommEventsCommEventsRowCount
func NewCommEventsCommEventsRowCountRequest(server string, params *CommEventsCommEventsRowCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/views/comm_events/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsCommEventsRowExportRequest generates requests for CommEventsCommEventsRowExport
func NewCommEventsCommEventsRowExportRequest(server string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/views/comm_events/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsCommEventsRowDeleteRequest generates requests for CommEventsCommEventsRowDelete
func NewCommEventsCommEventsRowDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/views/comm_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsCommEventsRowReadRequest generates requests for CommEventsCommEventsRowRead
func NewCommEventsCommEventsRowReadRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/views/comm_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsCommEventsRowUpdateRequest calls the generic CommEventsCommEventsRowUpdate builder with application/json body
func NewCommEventsCommEventsRowUpdateRequest(server string, rowId string, body CommEventsCommEventsRowUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommEventsCommEventsRowUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewCommEventsCommEventsRowUpdateRequestWithBody generates requests for CommEventsCommEventsRowUpdate with any type of body
func NewCommEventsCommEventsRowUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/views/comm_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommEventsDeleteRequest generates requests for CommEventsDelete
func NewCommEventsDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsReadRequest generates requests for CommEventsRead
func NewCommEventsReadRequest(server string, rowId string, params *CommEventsReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommEventsUpdateRequest calls the generic CommEventsUpdate builder with application/json body
func NewCommEventsUpdateRequest(server string, rowId string, body CommEventsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommEventsUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewCommEventsUpdateRequestWithBody generates requests for CommEventsUpdate with any type of body
func NewCommEventsUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/comm_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsDbTableRowListRequest generates requests for EventsDbTableRowList
func NewEventsDbTableRowListRequest(server string, params *EventsDbTableRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsCreateRequest calls the generic EventsCreate builder with application/json body
func NewEventsCreateRequest(server string, body EventsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEventsCreateRequestWithBody generates requests for EventsCreate with any type of body
func NewEventsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsCountRequest generates requests for EventsCount
func NewEventsCountRequest(server string, params *EventsCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsCsvExportRequest generates requests for EventsCsvExport
func NewEventsCsvExportRequest(server string, pType string, params *EventsCsvExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsDbTableRowFindOneRequest generates requests for EventsDbTableRowFindOne
func NewEventsDbTableRowFindOneRequest(server string, params *EventsDbTableRowFindOneParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/find-one")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsGroupbyRequest generates requests for EventsGroupby
func NewEventsGroupbyRequest(server string, params *EventsGroupbyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/groupby")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ColumnName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column_name", runtime.ParamLocationQuery, *params.ColumnName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowListRequest generates requests for EventsEventsRowList
func NewEventsEventsRowListRequest(server string, params *EventsEventsRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/views/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowCreateRequest calls the generic EventsEventsRowCreate builder with application/json body
func NewEventsEventsRowCreateRequest(server string, body EventsEventsRowCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsEventsRowCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEventsEventsRowCreateRequestWithBody generates requests for EventsEventsRowCreate with any type of body
func NewEventsEventsRowCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/views/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsEventsRowCountRequest generates requests for EventsEventsRowCount
func NewEventsEventsRowCountRequest(server string, params *EventsEventsRowCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/views/events/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowExportRequest generates requests for EventsEventsRowExport
func NewEventsEventsRowExportRequest(server string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/views/events/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowDeleteRequest generates requests for EventsEventsRowDelete
func NewEventsEventsRowDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/views/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowReadRequest generates requests for EventsEventsRowRead
func NewEventsEventsRowReadRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/views/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowUpdateRequest calls the generic EventsEventsRowUpdate builder with application/json body
func NewEventsEventsRowUpdateRequest(server string, rowId string, body EventsEventsRowUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsEventsRowUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewEventsEventsRowUpdateRequestWithBody generates requests for EventsEventsRowUpdate with any type of body
func NewEventsEventsRowUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/views/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsDeleteRequest generates requests for EventsDelete
func NewEventsDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsReadRequest generates requests for EventsRead
func NewEventsReadRequest(server string, rowId string, params *EventsReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsUpdateRequest calls the generic EventsUpdate builder with application/json body
func NewEventsUpdateRequest(server string, rowId string, body EventsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewEventsUpdateRequestWithBody generates requests for EventsUpdate with any type of body
func NewEventsUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsNestedListRequest generates requests for EventsNestedList
func NewEventsNestedListRequest(server string, rowId string, relationType string, columnName string, params *EventsNestedListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsNestedChildrenExcludedListRequest generates requests for EventsNestedChildrenExcludedList
func NewEventsNestedChildrenExcludedListRequest(server string, rowId string, relationType string, columnName string, params *EventsNestedChildrenExcludedListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/%s/%s/%s/exclude", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsNestedRemoveRequest generates requests for EventsNestedRemove
func NewEventsNestedRemoveRequest(server string, rowId string, relationType string, columnName string, refRowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "refRowId", runtime.ParamLocationPath, refRowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsNestedAddRequest generates requests for EventsNestedAdd
func NewEventsNestedAddRequest(server string, rowId string, relationType string, columnName string, refRowId string, params *EventsNestedAddParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "refRowId", runtime.ParamLocationPath, refRowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/pp2k69kcyjib180/events/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// VolunteersBulkDeleteWithBodyWithResponse request with any body
	VolunteersBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteResponse, error)

	VolunteersBulkDeleteWithResponse(ctx context.Context, body VolunteersBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteResponse, error)

	// VolunteersBulkUpdateWithBodyWithResponse request with any body
	VolunteersBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateResponse, error)

	VolunteersBulkUpdateWithResponse(ctx context.Context, body VolunteersBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateResponse, error)

	// VolunteersBulkCreateWithBodyWithResponse request with any body
	VolunteersBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkCreateResponse, error)

	VolunteersBulkCreateWithResponse(ctx context.Context, body VolunteersBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkCreateResponse, error)

	// VolunteersBulkDeleteAllWithResponse request
	VolunteersBulkDeleteAllWithResponse(ctx context.Context, params *VolunteersBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteAllResponse, error)

	// VolunteersBulkUpdateAllWithBodyWithResponse request with any body
	VolunteersBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *VolunteersBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateAllResponse, error)

	VolunteersBulkUpdateAllWithResponse(ctx context.Context, params *VolunteersBulkUpdateAllParams, body VolunteersBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateAllResponse, error)

	// CommEventsBulkDeleteWithBodyWithResponse request with any body
	CommEventsBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsBulkDeleteResponse, error)

	CommEventsBulkDeleteWithResponse(ctx context.Context, body CommEventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsBulkDeleteResponse, error)

	// CommEventsBulkUpdateWithBodyWithResponse request with any body
	CommEventsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsBulkUpdateResponse, error)

	CommEventsBulkUpdateWithResponse(ctx context.Context, body CommEventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsBulkUpdateResponse, error)

	// CommEventsBulkCreateWithBodyWithResponse request with any body
	CommEventsBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsBulkCreateResponse, error)

	CommEventsBulkCreateWithResponse(ctx context.Context, body CommEventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsBulkCreateResponse, error)

	// CommEventsBulkDeleteAllWithResponse request
	CommEventsBulkDeleteAllWithResponse(ctx context.Context, params *CommEventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*CommEventsBulkDeleteAllResponse, error)

	// CommEventsBulkUpdateAllWithBodyWithResponse request with any body
	CommEventsBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *CommEventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsBulkUpdateAllResponse, error)

	CommEventsBulkUpdateAllWithResponse(ctx context.Context, params *CommEventsBulkUpdateAllParams, body CommEventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsBulkUpdateAllResponse, error)

	// EventsBulkDeleteWithBodyWithResponse request with any body
	EventsBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkDeleteResponse, error)

	EventsBulkDeleteWithResponse(ctx context.Context, body EventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkDeleteResponse, error)

	// EventsBulkUpdateWithBodyWithResponse request with any body
	EventsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkUpdateResponse, error)

	EventsBulkUpdateWithResponse(ctx context.Context, body EventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkUpdateResponse, error)

	// EventsBulkCreateWithBodyWithResponse request with any body
	EventsBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkCreateResponse, error)

	EventsBulkCreateWithResponse(ctx context.Context, body EventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkCreateResponse, error)

	// EventsBulkDeleteAllWithResponse request
	EventsBulkDeleteAllWithResponse(ctx context.Context, params *EventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*EventsBulkDeleteAllResponse, error)

	// EventsBulkUpdateAllWithBodyWithResponse request with any body
	EventsBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *EventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkUpdateAllResponse, error)

	EventsBulkUpdateAllWithResponse(ctx context.Context, params *EventsBulkUpdateAllParams, body EventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkUpdateAllResponse, error)

	// VolunteersDbTableRowListWithResponse request
	VolunteersDbTableRowListWithResponse(ctx context.Context, params *VolunteersDbTableRowListParams, reqEditors ...RequestEditorFn) (*VolunteersDbTableRowListResponse, error)

	// VolunteersCreateWithBodyWithResponse request with any body
	VolunteersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersCreateResponse, error)

	VolunteersCreateWithResponse(ctx context.Context, body VolunteersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersCreateResponse, error)

	// VolunteersCountWithResponse request
	VolunteersCountWithResponse(ctx context.Context, params *VolunteersCountParams, reqEditors ...RequestEditorFn) (*VolunteersCountResponse, error)

	// VolunteersCsvExportWithResponse request
	VolunteersCsvExportWithResponse(ctx context.Context, pType string, params *VolunteersCsvExportParams, reqEditors ...RequestEditorFn) (*VolunteersCsvExportResponse, error)

	// VolunteersDbTableRowFindOneWithResponse request
	VolunteersDbTableRowFindOneWithResponse(ctx context.Context, params *VolunteersDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*VolunteersDbTableRowFindOneResponse, error)

	// VolunteersGroupbyWithResponse request
	VolunteersGroupbyWithResponse(ctx context.Context, params *VolunteersGroupbyParams, reqEditors ...RequestEditorFn) (*VolunteersGroupbyResponse, error)

	// VolunteersVolunteersRowListWithResponse request
	VolunteersVolunteersRowListWithResponse(ctx context.Context, params *VolunteersVolunteersRowListParams, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowListResponse, error)

	// VolunteersVolunteersRowCreateWithBodyWithResponse request with any body
	VolunteersVolunteersRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowCreateResponse, error)

	VolunteersVolunteersRowCreateWithResponse(ctx context.Context, body VolunteersVolunteersRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowCreateResponse, error)

	// VolunteersVolunteersRowCountWithResponse request
	VolunteersVolunteersRowCountWithResponse(ctx context.Context, params *VolunteersVolunteersRowCountParams, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowCountResponse, error)

	// VolunteersVolunteersRowExportWithResponse request
	VolunteersVolunteersRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowExportResponse, error)

	// VolunteersVolunteersRowDeleteWithResponse request
	VolunteersVolunteersRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowDeleteResponse, error)

	// VolunteersVolunteersRowReadWithResponse request
	VolunteersVolunteersRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowReadResponse, error)

	// VolunteersVolunteersRowUpdateWithBodyWithResponse request with any body
	VolunteersVolunteersRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowUpdateResponse, error)

	VolunteersVolunteersRowUpdateWithResponse(ctx context.Context, rowId string, body VolunteersVolunteersRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowUpdateResponse, error)

	// VolunteersDeleteWithResponse request
	VolunteersDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersDeleteResponse, error)

	// VolunteersReadWithResponse request
	VolunteersReadWithResponse(ctx context.Context, rowId string, params *VolunteersReadParams, reqEditors ...RequestEditorFn) (*VolunteersReadResponse, error)

	// VolunteersUpdateWithBodyWithResponse request with any body
	VolunteersUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersUpdateResponse, error)

	VolunteersUpdateWithResponse(ctx context.Context, rowId string, body VolunteersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersUpdateResponse, error)

	// VolunteersNestedListWithResponse request
	VolunteersNestedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedListParams, reqEditors ...RequestEditorFn) (*VolunteersNestedListResponse, error)

	// VolunteersNestedChildrenExcludedListWithResponse request
	VolunteersNestedChildrenExcludedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*VolunteersNestedChildrenExcludedListResponse, error)

	// VolunteersNestedRemoveWithResponse request
	VolunteersNestedRemoveWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*VolunteersNestedRemoveResponse, error)

	// VolunteersNestedAddWithResponse request
	VolunteersNestedAddWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *VolunteersNestedAddParams, reqEditors ...RequestEditorFn) (*VolunteersNestedAddResponse, error)

	// CommEventsDbTableRowListWithResponse request
	CommEventsDbTableRowListWithResponse(ctx context.Context, params *CommEventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*CommEventsDbTableRowListResponse, error)

	// CommEventsCreateWithBodyWithResponse request with any body
	CommEventsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsCreateResponse, error)

	CommEventsCreateWithResponse(ctx context.Context, body CommEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsCreateResponse, error)

	// CommEventsCountWithResponse request
	CommEventsCountWithResponse(ctx context.Context, params *CommEventsCountParams, reqEditors ...RequestEditorFn) (*CommEventsCountResponse, error)

	// CommEventsCsvExportWithResponse request
	CommEventsCsvExportWithResponse(ctx context.Context, pType string, params *CommEventsCsvExportParams, reqEditors ...RequestEditorFn) (*CommEventsCsvExportResponse, error)

	// CommEventsDbTableRowFindOneWithResponse request
	CommEventsDbTableRowFindOneWithResponse(ctx context.Context, params *CommEventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*CommEventsDbTableRowFindOneResponse, error)

	// CommEventsGroupbyWithResponse request
	CommEventsGroupbyWithResponse(ctx context.Context, params *CommEventsGroupbyParams, reqEditors ...RequestEditorFn) (*CommEventsGroupbyResponse, error)

	// CommEventsCommEventsRowListWithResponse request
	CommEventsCommEventsRowListWithResponse(ctx context.Context, params *CommEventsCommEventsRowListParams, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowListResponse, error)

	// CommEventsCommEventsRowCreateWithBodyWithResponse request with any body
	CommEventsCommEventsRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowCreateResponse, error)

	CommEventsCommEventsRowCreateWithResponse(ctx context.Context, body CommEventsCommEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowCreateResponse, error)

	// CommEventsCommEventsRowCountWithResponse request
	CommEventsCommEventsRowCountWithResponse(ctx context.Context, params *CommEventsCommEventsRowCountParams, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowCountResponse, error)

	// CommEventsCommEventsRowExportWithResponse request
	CommEventsCommEventsRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowExportResponse, error)

	// CommEventsCommEventsRowDeleteWithResponse request
	CommEventsCommEventsRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowDeleteResponse, error)

	// CommEventsCommEventsRowReadWithResponse request
	CommEventsCommEventsRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowReadResponse, error)

	// CommEventsCommEventsRowUpdateWithBodyWithResponse request with any body
	CommEventsCommEventsRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowUpdateResponse, error)

	CommEventsCommEventsRowUpdateWithResponse(ctx context.Context, rowId string, body CommEventsCommEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowUpdateResponse, error)

	// CommEventsDeleteWithResponse request
	CommEventsDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommEventsDeleteResponse, error)

	// CommEventsReadWithResponse request
	CommEventsReadWithResponse(ctx context.Context, rowId string, params *CommEventsReadParams, reqEditors ...RequestEditorFn) (*CommEventsReadResponse, error)

	// CommEventsUpdateWithBodyWithResponse request with any body
	CommEventsUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsUpdateResponse, error)

	CommEventsUpdateWithResponse(ctx context.Context, rowId string, body CommEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsUpdateResponse, error)

	// EventsDbTableRowListWithResponse request
	EventsDbTableRowListWithResponse(ctx context.Context, params *EventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*EventsDbTableRowListResponse, error)

	// EventsCreateWithBodyWithResponse request with any body
	EventsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsCreateResponse, error)

	EventsCreateWithResponse(ctx context.Context, body EventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsCreateResponse, error)

	// EventsCountWithResponse request
	EventsCountWithResponse(ctx context.Context, params *EventsCountParams, reqEditors ...RequestEditorFn) (*EventsCountResponse, error)

	// EventsCsvExportWithResponse request
	EventsCsvExportWithResponse(ctx context.Context, pType string, params *EventsCsvExportParams, reqEditors ...RequestEditorFn) (*EventsCsvExportResponse, error)

	// EventsDbTableRowFindOneWithResponse request
	EventsDbTableRowFindOneWithResponse(ctx context.Context, params *EventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*EventsDbTableRowFindOneResponse, error)

	// EventsGroupbyWithResponse request
	EventsGroupbyWithResponse(ctx context.Context, params *EventsGroupbyParams, reqEditors ...RequestEditorFn) (*EventsGroupbyResponse, error)

	// EventsEventsRowListWithResponse request
	EventsEventsRowListWithResponse(ctx context.Context, params *EventsEventsRowListParams, reqEditors ...RequestEditorFn) (*EventsEventsRowListResponse, error)

	// EventsEventsRowCreateWithBodyWithResponse request with any body
	EventsEventsRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsEventsRowCreateResponse, error)

	EventsEventsRowCreateWithResponse(ctx context.Context, body EventsEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsEventsRowCreateResponse, error)

	// EventsEventsRowCountWithResponse request
	EventsEventsRowCountWithResponse(ctx context.Context, params *EventsEventsRowCountParams, reqEditors ...RequestEditorFn) (*EventsEventsRowCountResponse, error)

	// EventsEventsRowExportWithResponse request
	EventsEventsRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*EventsEventsRowExportResponse, error)

	// EventsEventsRowDeleteWithResponse request
	EventsEventsRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsEventsRowDeleteResponse, error)

	// EventsEventsRowReadWithResponse request
	EventsEventsRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsEventsRowReadResponse, error)

	// EventsEventsRowUpdateWithBodyWithResponse request with any body
	EventsEventsRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsEventsRowUpdateResponse, error)

	EventsEventsRowUpdateWithResponse(ctx context.Context, rowId string, body EventsEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsEventsRowUpdateResponse, error)

	// EventsDeleteWithResponse request
	EventsDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsDeleteResponse, error)

	// EventsReadWithResponse request
	EventsReadWithResponse(ctx context.Context, rowId string, params *EventsReadParams, reqEditors ...RequestEditorFn) (*EventsReadResponse, error)

	// EventsUpdateWithBodyWithResponse request with any body
	EventsUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsUpdateResponse, error)

	EventsUpdateWithResponse(ctx context.Context, rowId string, body EventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsUpdateResponse, error)

	// EventsNestedListWithResponse request
	EventsNestedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedListParams, reqEditors ...RequestEditorFn) (*EventsNestedListResponse, error)

	// EventsNestedChildrenExcludedListWithResponse request
	EventsNestedChildrenExcludedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*EventsNestedChildrenExcludedListResponse, error)

	// EventsNestedRemoveWithResponse request
	EventsNestedRemoveWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*EventsNestedRemoveResponse, error)

	// EventsNestedAddWithResponse request
	EventsNestedAddWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *EventsNestedAddParams, reqEditors ...RequestEditorFn) (*EventsNestedAddResponse, error)
}

type VolunteersBulkDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersBulkDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersBulkDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersBulkCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersBulkCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersBulkCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersBulkDeleteAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersBulkDeleteAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersBulkDeleteAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersBulkUpdateAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersBulkUpdateAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersBulkUpdateAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsBulkDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommEventsBulkDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsBulkDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommEventsBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsBulkCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommEventsBulkCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsBulkCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsBulkDeleteAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommEventsBulkDeleteAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsBulkDeleteAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsBulkUpdateAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommEventsBulkUpdateAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsBulkUpdateAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsBulkDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsBulkDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsBulkDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsBulkCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsBulkCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsBulkCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsBulkDeleteAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsBulkDeleteAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsBulkDeleteAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsBulkUpdateAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsBulkUpdateAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsBulkUpdateAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersDbTableRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated            `json:"PageInfo,omitempty"`
		List     *[]VolunteersResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r VolunteersDbTableRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersDbTableRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolunteersResponse
}

// Status returns HTTPResponse.Status
func (r VolunteersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersCsvExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VolunteersCsvExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersCsvExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersDbTableRowFindOneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolunteersResponse
}

// Status returns HTTPResponse.Status
func (r VolunteersDbTableRowFindOneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersDbTableRowFindOneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersGroupbyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated `json:"PageInfo,omitempty"`
		List     *[]Groupby `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r VolunteersGroupbyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersGroupbyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersVolunteersRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated                          `json:"PageInfo,omitempty"`
		List     *[]VolunteersVolunteersGridResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r VolunteersVolunteersRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersVolunteersRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersVolunteersRowCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersVolunteersRowCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersVolunteersRowCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersVolunteersRowCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count *float32 `json:"count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r VolunteersVolunteersRowCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersVolunteersRowCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersVolunteersRowExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VolunteersVolunteersRowExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersVolunteersRowExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersVolunteersRowDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VolunteersVolunteersRowDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersVolunteersRowDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersVolunteersRowReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolunteersVolunteersGridResponse
}

// Status returns HTTPResponse.Status
func (r VolunteersVolunteersRowReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersVolunteersRowReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersVolunteersRowUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersVolunteersRowUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersVolunteersRowUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VolunteersDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VolunteersResponse
}

// Status returns HTTPResponse.Status
func (r VolunteersReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolunteersRequest
}

// Status returns HTTPResponse.Status
func (r VolunteersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersNestedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersNestedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersNestedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersNestedChildrenExcludedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersNestedChildrenExcludedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersNestedChildrenExcludedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersNestedRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersNestedRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersNestedRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersNestedAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersNestedAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersNestedAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsDbTableRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated            `json:"PageInfo,omitempty"`
		List     *[]CommEventsResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommEventsDbTableRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsDbTableRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommEventsResponse
}

// Status returns HTTPResponse.Status
func (r CommEventsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommEventsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsCsvExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CommEventsCsvExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsCsvExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsDbTableRowFindOneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommEventsResponse
}

// Status returns HTTPResponse.Status
func (r CommEventsDbTableRowFindOneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsDbTableRowFindOneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsGroupbyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated `json:"PageInfo,omitempty"`
		List     *[]Groupby `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommEventsGroupbyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsGroupbyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsCommEventsRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated                          `json:"PageInfo,omitempty"`
		List     *[]CommEventscommEventsGridResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommEventsCommEventsRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsCommEventsRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsCommEventsRowCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommEventsCommEventsRowCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsCommEventsRowCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsCommEventsRowCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count *float32 `json:"count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommEventsCommEventsRowCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsCommEventsRowCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsCommEventsRowExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CommEventsCommEventsRowExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsCommEventsRowExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsCommEventsRowDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CommEventsCommEventsRowDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsCommEventsRowDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsCommEventsRowReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommEventscommEventsGridResponse
}

// Status returns HTTPResponse.Status
func (r CommEventsCommEventsRowReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsCommEventsRowReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsCommEventsRowUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommEventsCommEventsRowUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsCommEventsRowUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CommEventsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CommEventsResponse
}

// Status returns HTTPResponse.Status
func (r CommEventsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommEventsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommEventsRequest
}

// Status returns HTTPResponse.Status
func (r CommEventsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommEventsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsDbTableRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated        `json:"PageInfo,omitempty"`
		List     *[]EventsResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r EventsDbTableRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsDbTableRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventsResponse
}

// Status returns HTTPResponse.Status
func (r EventsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsCsvExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EventsCsvExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsCsvExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsDbTableRowFindOneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventsResponse
}

// Status returns HTTPResponse.Status
func (r EventsDbTableRowFindOneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsDbTableRowFindOneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsGroupbyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated `json:"PageInfo,omitempty"`
		List     *[]Groupby `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r EventsGroupbyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsGroupbyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated                  `json:"PageInfo,omitempty"`
		List     *[]EventseventsGridResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count *float32 `json:"count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventseventsGridResponse
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EventsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EventsResponse
}

// Status returns HTTPResponse.Status
func (r EventsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventsRequest
}

// Status returns HTTPResponse.Status
func (r EventsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsNestedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsNestedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsNestedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsNestedChildrenExcludedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsNestedChildrenExcludedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsNestedChildrenExcludedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsNestedRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsNestedRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsNestedRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsNestedAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsNestedAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsNestedAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// VolunteersBulkDeleteWithBodyWithResponse request with arbitrary body returning *VolunteersBulkDeleteResponse
func (c *ClientWithResponses) VolunteersBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteResponse, error) {
	rsp, err := c.VolunteersBulkDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkDeleteResponse(rsp)
}

func (c *ClientWithResponses) VolunteersBulkDeleteWithResponse(ctx context.Context, body VolunteersBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteResponse, error) {
	rsp, err := c.VolunteersBulkDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkDeleteResponse(rsp)
}

// VolunteersBulkUpdateWithBodyWithResponse request with arbitrary body returning *VolunteersBulkUpdateResponse
func (c *ClientWithResponses) VolunteersBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateResponse, error) {
	rsp, err := c.VolunteersBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersBulkUpdateWithResponse(ctx context.Context, body VolunteersBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateResponse, error) {
	rsp, err := c.VolunteersBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkUpdateResponse(rsp)
}

// VolunteersBulkCreateWithBodyWithResponse request with arbitrary body returning *VolunteersBulkCreateResponse
func (c *ClientWithResponses) VolunteersBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkCreateResponse, error) {
	rsp, err := c.VolunteersBulkCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkCreateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersBulkCreateWithResponse(ctx context.Context, body VolunteersBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkCreateResponse, error) {
	rsp, err := c.VolunteersBulkCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkCreateResponse(rsp)
}

// VolunteersBulkDeleteAllWithResponse request returning *VolunteersBulkDeleteAllResponse
func (c *ClientWithResponses) VolunteersBulkDeleteAllWithResponse(ctx context.Context, params *VolunteersBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteAllResponse, error) {
	rsp, err := c.VolunteersBulkDeleteAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkDeleteAllResponse(rsp)
}

// VolunteersBulkUpdateAllWithBodyWithResponse request with arbitrary body returning *VolunteersBulkUpdateAllResponse
func (c *ClientWithResponses) VolunteersBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *VolunteersBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateAllResponse, error) {
	rsp, err := c.VolunteersBulkUpdateAllWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkUpdateAllResponse(rsp)
}

func (c *ClientWithResponses) VolunteersBulkUpdateAllWithResponse(ctx context.Context, params *VolunteersBulkUpdateAllParams, body VolunteersBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateAllResponse, error) {
	rsp, err := c.VolunteersBulkUpdateAll(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkUpdateAllResponse(rsp)
}

// CommEventsBulkDeleteWithBodyWithResponse request with arbitrary body returning *CommEventsBulkDeleteResponse
func (c *ClientWithResponses) CommEventsBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsBulkDeleteResponse, error) {
	rsp, err := c.CommEventsBulkDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsBulkDeleteResponse(rsp)
}

func (c *ClientWithResponses) CommEventsBulkDeleteWithResponse(ctx context.Context, body CommEventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsBulkDeleteResponse, error) {
	rsp, err := c.CommEventsBulkDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsBulkDeleteResponse(rsp)
}

// CommEventsBulkUpdateWithBodyWithResponse request with arbitrary body returning *CommEventsBulkUpdateResponse
func (c *ClientWithResponses) CommEventsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsBulkUpdateResponse, error) {
	rsp, err := c.CommEventsBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) CommEventsBulkUpdateWithResponse(ctx context.Context, body CommEventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsBulkUpdateResponse, error) {
	rsp, err := c.CommEventsBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsBulkUpdateResponse(rsp)
}

// CommEventsBulkCreateWithBodyWithResponse request with arbitrary body returning *CommEventsBulkCreateResponse
func (c *ClientWithResponses) CommEventsBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsBulkCreateResponse, error) {
	rsp, err := c.CommEventsBulkCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsBulkCreateResponse(rsp)
}

func (c *ClientWithResponses) CommEventsBulkCreateWithResponse(ctx context.Context, body CommEventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsBulkCreateResponse, error) {
	rsp, err := c.CommEventsBulkCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsBulkCreateResponse(rsp)
}

// CommEventsBulkDeleteAllWithResponse request returning *CommEventsBulkDeleteAllResponse
func (c *ClientWithResponses) CommEventsBulkDeleteAllWithResponse(ctx context.Context, params *CommEventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*CommEventsBulkDeleteAllResponse, error) {
	rsp, err := c.CommEventsBulkDeleteAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsBulkDeleteAllResponse(rsp)
}

// CommEventsBulkUpdateAllWithBodyWithResponse request with arbitrary body returning *CommEventsBulkUpdateAllResponse
func (c *ClientWithResponses) CommEventsBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *CommEventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsBulkUpdateAllResponse, error) {
	rsp, err := c.CommEventsBulkUpdateAllWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsBulkUpdateAllResponse(rsp)
}

func (c *ClientWithResponses) CommEventsBulkUpdateAllWithResponse(ctx context.Context, params *CommEventsBulkUpdateAllParams, body CommEventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsBulkUpdateAllResponse, error) {
	rsp, err := c.CommEventsBulkUpdateAll(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsBulkUpdateAllResponse(rsp)
}

// EventsBulkDeleteWithBodyWithResponse request with arbitrary body returning *EventsBulkDeleteResponse
func (c *ClientWithResponses) EventsBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkDeleteResponse, error) {
	rsp, err := c.EventsBulkDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkDeleteResponse(rsp)
}

func (c *ClientWithResponses) EventsBulkDeleteWithResponse(ctx context.Context, body EventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkDeleteResponse, error) {
	rsp, err := c.EventsBulkDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkDeleteResponse(rsp)
}

// EventsBulkUpdateWithBodyWithResponse request with arbitrary body returning *EventsBulkUpdateResponse
func (c *ClientWithResponses) EventsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkUpdateResponse, error) {
	rsp, err := c.EventsBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) EventsBulkUpdateWithResponse(ctx context.Context, body EventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkUpdateResponse, error) {
	rsp, err := c.EventsBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkUpdateResponse(rsp)
}

// EventsBulkCreateWithBodyWithResponse request with arbitrary body returning *EventsBulkCreateResponse
func (c *ClientWithResponses) EventsBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkCreateResponse, error) {
	rsp, err := c.EventsBulkCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkCreateResponse(rsp)
}

func (c *ClientWithResponses) EventsBulkCreateWithResponse(ctx context.Context, body EventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkCreateResponse, error) {
	rsp, err := c.EventsBulkCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkCreateResponse(rsp)
}

// EventsBulkDeleteAllWithResponse request returning *EventsBulkDeleteAllResponse
func (c *ClientWithResponses) EventsBulkDeleteAllWithResponse(ctx context.Context, params *EventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*EventsBulkDeleteAllResponse, error) {
	rsp, err := c.EventsBulkDeleteAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkDeleteAllResponse(rsp)
}

// EventsBulkUpdateAllWithBodyWithResponse request with arbitrary body returning *EventsBulkUpdateAllResponse
func (c *ClientWithResponses) EventsBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *EventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkUpdateAllResponse, error) {
	rsp, err := c.EventsBulkUpdateAllWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkUpdateAllResponse(rsp)
}

func (c *ClientWithResponses) EventsBulkUpdateAllWithResponse(ctx context.Context, params *EventsBulkUpdateAllParams, body EventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkUpdateAllResponse, error) {
	rsp, err := c.EventsBulkUpdateAll(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkUpdateAllResponse(rsp)
}

// VolunteersDbTableRowListWithResponse request returning *VolunteersDbTableRowListResponse
func (c *ClientWithResponses) VolunteersDbTableRowListWithResponse(ctx context.Context, params *VolunteersDbTableRowListParams, reqEditors ...RequestEditorFn) (*VolunteersDbTableRowListResponse, error) {
	rsp, err := c.VolunteersDbTableRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersDbTableRowListResponse(rsp)
}

// VolunteersCreateWithBodyWithResponse request with arbitrary body returning *VolunteersCreateResponse
func (c *ClientWithResponses) VolunteersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersCreateResponse, error) {
	rsp, err := c.VolunteersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersCreateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersCreateWithResponse(ctx context.Context, body VolunteersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersCreateResponse, error) {
	rsp, err := c.VolunteersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersCreateResponse(rsp)
}

// VolunteersCountWithResponse request returning *VolunteersCountResponse
func (c *ClientWithResponses) VolunteersCountWithResponse(ctx context.Context, params *VolunteersCountParams, reqEditors ...RequestEditorFn) (*VolunteersCountResponse, error) {
	rsp, err := c.VolunteersCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersCountResponse(rsp)
}

// VolunteersCsvExportWithResponse request returning *VolunteersCsvExportResponse
func (c *ClientWithResponses) VolunteersCsvExportWithResponse(ctx context.Context, pType string, params *VolunteersCsvExportParams, reqEditors ...RequestEditorFn) (*VolunteersCsvExportResponse, error) {
	rsp, err := c.VolunteersCsvExport(ctx, pType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersCsvExportResponse(rsp)
}

// VolunteersDbTableRowFindOneWithResponse request returning *VolunteersDbTableRowFindOneResponse
func (c *ClientWithResponses) VolunteersDbTableRowFindOneWithResponse(ctx context.Context, params *VolunteersDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*VolunteersDbTableRowFindOneResponse, error) {
	rsp, err := c.VolunteersDbTableRowFindOne(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersDbTableRowFindOneResponse(rsp)
}

// VolunteersGroupbyWithResponse request returning *VolunteersGroupbyResponse
func (c *ClientWithResponses) VolunteersGroupbyWithResponse(ctx context.Context, params *VolunteersGroupbyParams, reqEditors ...RequestEditorFn) (*VolunteersGroupbyResponse, error) {
	rsp, err := c.VolunteersGroupby(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersGroupbyResponse(rsp)
}

// VolunteersVolunteersRowListWithResponse request returning *VolunteersVolunteersRowListResponse
func (c *ClientWithResponses) VolunteersVolunteersRowListWithResponse(ctx context.Context, params *VolunteersVolunteersRowListParams, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowListResponse, error) {
	rsp, err := c.VolunteersVolunteersRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersVolunteersRowListResponse(rsp)
}

// VolunteersVolunteersRowCreateWithBodyWithResponse request with arbitrary body returning *VolunteersVolunteersRowCreateResponse
func (c *ClientWithResponses) VolunteersVolunteersRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowCreateResponse, error) {
	rsp, err := c.VolunteersVolunteersRowCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersVolunteersRowCreateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersVolunteersRowCreateWithResponse(ctx context.Context, body VolunteersVolunteersRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowCreateResponse, error) {
	rsp, err := c.VolunteersVolunteersRowCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersVolunteersRowCreateResponse(rsp)
}

// VolunteersVolunteersRowCountWithResponse request returning *VolunteersVolunteersRowCountResponse
func (c *ClientWithResponses) VolunteersVolunteersRowCountWithResponse(ctx context.Context, params *VolunteersVolunteersRowCountParams, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowCountResponse, error) {
	rsp, err := c.VolunteersVolunteersRowCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersVolunteersRowCountResponse(rsp)
}

// VolunteersVolunteersRowExportWithResponse request returning *VolunteersVolunteersRowExportResponse
func (c *ClientWithResponses) VolunteersVolunteersRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowExportResponse, error) {
	rsp, err := c.VolunteersVolunteersRowExport(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersVolunteersRowExportResponse(rsp)
}

// VolunteersVolunteersRowDeleteWithResponse request returning *VolunteersVolunteersRowDeleteResponse
func (c *ClientWithResponses) VolunteersVolunteersRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowDeleteResponse, error) {
	rsp, err := c.VolunteersVolunteersRowDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersVolunteersRowDeleteResponse(rsp)
}

// VolunteersVolunteersRowReadWithResponse request returning *VolunteersVolunteersRowReadResponse
func (c *ClientWithResponses) VolunteersVolunteersRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowReadResponse, error) {
	rsp, err := c.VolunteersVolunteersRowRead(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersVolunteersRowReadResponse(rsp)
}

// VolunteersVolunteersRowUpdateWithBodyWithResponse request with arbitrary body returning *VolunteersVolunteersRowUpdateResponse
func (c *ClientWithResponses) VolunteersVolunteersRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowUpdateResponse, error) {
	rsp, err := c.VolunteersVolunteersRowUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersVolunteersRowUpdateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersVolunteersRowUpdateWithResponse(ctx context.Context, rowId string, body VolunteersVolunteersRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersVolunteersRowUpdateResponse, error) {
	rsp, err := c.VolunteersVolunteersRowUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersVolunteersRowUpdateResponse(rsp)
}

// VolunteersDeleteWithResponse request returning *VolunteersDeleteResponse
func (c *ClientWithResponses) VolunteersDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersDeleteResponse, error) {
	rsp, err := c.VolunteersDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersDeleteResponse(rsp)
}

// VolunteersReadWithResponse request returning *VolunteersReadResponse
func (c *ClientWithResponses) VolunteersReadWithResponse(ctx context.Context, rowId string, params *VolunteersReadParams, reqEditors ...RequestEditorFn) (*VolunteersReadResponse, error) {
	rsp, err := c.VolunteersRead(ctx, rowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersReadResponse(rsp)
}

// VolunteersUpdateWithBodyWithResponse request with arbitrary body returning *VolunteersUpdateResponse
func (c *ClientWithResponses) VolunteersUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersUpdateResponse, error) {
	rsp, err := c.VolunteersUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersUpdateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersUpdateWithResponse(ctx context.Context, rowId string, body VolunteersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersUpdateResponse, error) {
	rsp, err := c.VolunteersUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersUpdateResponse(rsp)
}

// VolunteersNestedListWithResponse request returning *VolunteersNestedListResponse
func (c *ClientWithResponses) VolunteersNestedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedListParams, reqEditors ...RequestEditorFn) (*VolunteersNestedListResponse, error) {
	rsp, err := c.VolunteersNestedList(ctx, rowId, relationType, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersNestedListResponse(rsp)
}

// VolunteersNestedChildrenExcludedListWithResponse request returning *VolunteersNestedChildrenExcludedListResponse
func (c *ClientWithResponses) VolunteersNestedChildrenExcludedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*VolunteersNestedChildrenExcludedListResponse, error) {
	rsp, err := c.VolunteersNestedChildrenExcludedList(ctx, rowId, relationType, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersNestedChildrenExcludedListResponse(rsp)
}

// VolunteersNestedRemoveWithResponse request returning *VolunteersNestedRemoveResponse
func (c *ClientWithResponses) VolunteersNestedRemoveWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*VolunteersNestedRemoveResponse, error) {
	rsp, err := c.VolunteersNestedRemove(ctx, rowId, relationType, columnName, refRowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersNestedRemoveResponse(rsp)
}

// VolunteersNestedAddWithResponse request returning *VolunteersNestedAddResponse
func (c *ClientWithResponses) VolunteersNestedAddWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *VolunteersNestedAddParams, reqEditors ...RequestEditorFn) (*VolunteersNestedAddResponse, error) {
	rsp, err := c.VolunteersNestedAdd(ctx, rowId, relationType, columnName, refRowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersNestedAddResponse(rsp)
}

// CommEventsDbTableRowListWithResponse request returning *CommEventsDbTableRowListResponse
func (c *ClientWithResponses) CommEventsDbTableRowListWithResponse(ctx context.Context, params *CommEventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*CommEventsDbTableRowListResponse, error) {
	rsp, err := c.CommEventsDbTableRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsDbTableRowListResponse(rsp)
}

// CommEventsCreateWithBodyWithResponse request with arbitrary body returning *CommEventsCreateResponse
func (c *ClientWithResponses) CommEventsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsCreateResponse, error) {
	rsp, err := c.CommEventsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCreateResponse(rsp)
}

func (c *ClientWithResponses) CommEventsCreateWithResponse(ctx context.Context, body CommEventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsCreateResponse, error) {
	rsp, err := c.CommEventsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCreateResponse(rsp)
}

// CommEventsCountWithResponse request returning *CommEventsCountResponse
func (c *ClientWithResponses) CommEventsCountWithResponse(ctx context.Context, params *CommEventsCountParams, reqEditors ...RequestEditorFn) (*CommEventsCountResponse, error) {
	rsp, err := c.CommEventsCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCountResponse(rsp)
}

// CommEventsCsvExportWithResponse request returning *CommEventsCsvExportResponse
func (c *ClientWithResponses) CommEventsCsvExportWithResponse(ctx context.Context, pType string, params *CommEventsCsvExportParams, reqEditors ...RequestEditorFn) (*CommEventsCsvExportResponse, error) {
	rsp, err := c.CommEventsCsvExport(ctx, pType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCsvExportResponse(rsp)
}

// CommEventsDbTableRowFindOneWithResponse request returning *CommEventsDbTableRowFindOneResponse
func (c *ClientWithResponses) CommEventsDbTableRowFindOneWithResponse(ctx context.Context, params *CommEventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*CommEventsDbTableRowFindOneResponse, error) {
	rsp, err := c.CommEventsDbTableRowFindOne(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsDbTableRowFindOneResponse(rsp)
}

// CommEventsGroupbyWithResponse request returning *CommEventsGroupbyResponse
func (c *ClientWithResponses) CommEventsGroupbyWithResponse(ctx context.Context, params *CommEventsGroupbyParams, reqEditors ...RequestEditorFn) (*CommEventsGroupbyResponse, error) {
	rsp, err := c.CommEventsGroupby(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsGroupbyResponse(rsp)
}

// CommEventsCommEventsRowListWithResponse request returning *CommEventsCommEventsRowListResponse
func (c *ClientWithResponses) CommEventsCommEventsRowListWithResponse(ctx context.Context, params *CommEventsCommEventsRowListParams, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowListResponse, error) {
	rsp, err := c.CommEventsCommEventsRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCommEventsRowListResponse(rsp)
}

// CommEventsCommEventsRowCreateWithBodyWithResponse request with arbitrary body returning *CommEventsCommEventsRowCreateResponse
func (c *ClientWithResponses) CommEventsCommEventsRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowCreateResponse, error) {
	rsp, err := c.CommEventsCommEventsRowCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCommEventsRowCreateResponse(rsp)
}

func (c *ClientWithResponses) CommEventsCommEventsRowCreateWithResponse(ctx context.Context, body CommEventsCommEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowCreateResponse, error) {
	rsp, err := c.CommEventsCommEventsRowCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCommEventsRowCreateResponse(rsp)
}

// CommEventsCommEventsRowCountWithResponse request returning *CommEventsCommEventsRowCountResponse
func (c *ClientWithResponses) CommEventsCommEventsRowCountWithResponse(ctx context.Context, params *CommEventsCommEventsRowCountParams, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowCountResponse, error) {
	rsp, err := c.CommEventsCommEventsRowCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCommEventsRowCountResponse(rsp)
}

// CommEventsCommEventsRowExportWithResponse request returning *CommEventsCommEventsRowExportResponse
func (c *ClientWithResponses) CommEventsCommEventsRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowExportResponse, error) {
	rsp, err := c.CommEventsCommEventsRowExport(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCommEventsRowExportResponse(rsp)
}

// CommEventsCommEventsRowDeleteWithResponse request returning *CommEventsCommEventsRowDeleteResponse
func (c *ClientWithResponses) CommEventsCommEventsRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowDeleteResponse, error) {
	rsp, err := c.CommEventsCommEventsRowDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCommEventsRowDeleteResponse(rsp)
}

// CommEventsCommEventsRowReadWithResponse request returning *CommEventsCommEventsRowReadResponse
func (c *ClientWithResponses) CommEventsCommEventsRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowReadResponse, error) {
	rsp, err := c.CommEventsCommEventsRowRead(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCommEventsRowReadResponse(rsp)
}

// CommEventsCommEventsRowUpdateWithBodyWithResponse request with arbitrary body returning *CommEventsCommEventsRowUpdateResponse
func (c *ClientWithResponses) CommEventsCommEventsRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowUpdateResponse, error) {
	rsp, err := c.CommEventsCommEventsRowUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCommEventsRowUpdateResponse(rsp)
}

func (c *ClientWithResponses) CommEventsCommEventsRowUpdateWithResponse(ctx context.Context, rowId string, body CommEventsCommEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsCommEventsRowUpdateResponse, error) {
	rsp, err := c.CommEventsCommEventsRowUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsCommEventsRowUpdateResponse(rsp)
}

// CommEventsDeleteWithResponse request returning *CommEventsDeleteResponse
func (c *ClientWithResponses) CommEventsDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommEventsDeleteResponse, error) {
	rsp, err := c.CommEventsDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsDeleteResponse(rsp)
}

// CommEventsReadWithResponse request returning *CommEventsReadResponse
func (c *ClientWithResponses) CommEventsReadWithResponse(ctx context.Context, rowId string, params *CommEventsReadParams, reqEditors ...RequestEditorFn) (*CommEventsReadResponse, error) {
	rsp, err := c.CommEventsRead(ctx, rowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsReadResponse(rsp)
}

// CommEventsUpdateWithBodyWithResponse request with arbitrary body returning *CommEventsUpdateResponse
func (c *ClientWithResponses) CommEventsUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommEventsUpdateResponse, error) {
	rsp, err := c.CommEventsUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsUpdateResponse(rsp)
}

func (c *ClientWithResponses) CommEventsUpdateWithResponse(ctx context.Context, rowId string, body CommEventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommEventsUpdateResponse, error) {
	rsp, err := c.CommEventsUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommEventsUpdateResponse(rsp)
}

// EventsDbTableRowListWithResponse request returning *EventsDbTableRowListResponse
func (c *ClientWithResponses) EventsDbTableRowListWithResponse(ctx context.Context, params *EventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*EventsDbTableRowListResponse, error) {
	rsp, err := c.EventsDbTableRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsDbTableRowListResponse(rsp)
}

// EventsCreateWithBodyWithResponse request with arbitrary body returning *EventsCreateResponse
func (c *ClientWithResponses) EventsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsCreateResponse, error) {
	rsp, err := c.EventsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsCreateResponse(rsp)
}

func (c *ClientWithResponses) EventsCreateWithResponse(ctx context.Context, body EventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsCreateResponse, error) {
	rsp, err := c.EventsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsCreateResponse(rsp)
}

// EventsCountWithResponse request returning *EventsCountResponse
func (c *ClientWithResponses) EventsCountWithResponse(ctx context.Context, params *EventsCountParams, reqEditors ...RequestEditorFn) (*EventsCountResponse, error) {
	rsp, err := c.EventsCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsCountResponse(rsp)
}

// EventsCsvExportWithResponse request returning *EventsCsvExportResponse
func (c *ClientWithResponses) EventsCsvExportWithResponse(ctx context.Context, pType string, params *EventsCsvExportParams, reqEditors ...RequestEditorFn) (*EventsCsvExportResponse, error) {
	rsp, err := c.EventsCsvExport(ctx, pType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsCsvExportResponse(rsp)
}

// EventsDbTableRowFindOneWithResponse request returning *EventsDbTableRowFindOneResponse
func (c *ClientWithResponses) EventsDbTableRowFindOneWithResponse(ctx context.Context, params *EventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*EventsDbTableRowFindOneResponse, error) {
	rsp, err := c.EventsDbTableRowFindOne(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsDbTableRowFindOneResponse(rsp)
}

// EventsGroupbyWithResponse request returning *EventsGroupbyResponse
func (c *ClientWithResponses) EventsGroupbyWithResponse(ctx context.Context, params *EventsGroupbyParams, reqEditors ...RequestEditorFn) (*EventsGroupbyResponse, error) {
	rsp, err := c.EventsGroupby(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsGroupbyResponse(rsp)
}

// EventsEventsRowListWithResponse request returning *EventsEventsRowListResponse
func (c *ClientWithResponses) EventsEventsRowListWithResponse(ctx context.Context, params *EventsEventsRowListParams, reqEditors ...RequestEditorFn) (*EventsEventsRowListResponse, error) {
	rsp, err := c.EventsEventsRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowListResponse(rsp)
}

// EventsEventsRowCreateWithBodyWithResponse request with arbitrary body returning *EventsEventsRowCreateResponse
func (c *ClientWithResponses) EventsEventsRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsEventsRowCreateResponse, error) {
	rsp, err := c.EventsEventsRowCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowCreateResponse(rsp)
}

func (c *ClientWithResponses) EventsEventsRowCreateWithResponse(ctx context.Context, body EventsEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsEventsRowCreateResponse, error) {
	rsp, err := c.EventsEventsRowCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowCreateResponse(rsp)
}

// EventsEventsRowCountWithResponse request returning *EventsEventsRowCountResponse
func (c *ClientWithResponses) EventsEventsRowCountWithResponse(ctx context.Context, params *EventsEventsRowCountParams, reqEditors ...RequestEditorFn) (*EventsEventsRowCountResponse, error) {
	rsp, err := c.EventsEventsRowCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowCountResponse(rsp)
}

// EventsEventsRowExportWithResponse request returning *EventsEventsRowExportResponse
func (c *ClientWithResponses) EventsEventsRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*EventsEventsRowExportResponse, error) {
	rsp, err := c.EventsEventsRowExport(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowExportResponse(rsp)
}

// EventsEventsRowDeleteWithResponse request returning *EventsEventsRowDeleteResponse
func (c *ClientWithResponses) EventsEventsRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsEventsRowDeleteResponse, error) {
	rsp, err := c.EventsEventsRowDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowDeleteResponse(rsp)
}

// EventsEventsRowReadWithResponse request returning *EventsEventsRowReadResponse
func (c *ClientWithResponses) EventsEventsRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsEventsRowReadResponse, error) {
	rsp, err := c.EventsEventsRowRead(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowReadResponse(rsp)
}

// EventsEventsRowUpdateWithBodyWithResponse request with arbitrary body returning *EventsEventsRowUpdateResponse
func (c *ClientWithResponses) EventsEventsRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsEventsRowUpdateResponse, error) {
	rsp, err := c.EventsEventsRowUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowUpdateResponse(rsp)
}

func (c *ClientWithResponses) EventsEventsRowUpdateWithResponse(ctx context.Context, rowId string, body EventsEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsEventsRowUpdateResponse, error) {
	rsp, err := c.EventsEventsRowUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowUpdateResponse(rsp)
}

// EventsDeleteWithResponse request returning *EventsDeleteResponse
func (c *ClientWithResponses) EventsDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsDeleteResponse, error) {
	rsp, err := c.EventsDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsDeleteResponse(rsp)
}

// EventsReadWithResponse request returning *EventsReadResponse
func (c *ClientWithResponses) EventsReadWithResponse(ctx context.Context, rowId string, params *EventsReadParams, reqEditors ...RequestEditorFn) (*EventsReadResponse, error) {
	rsp, err := c.EventsRead(ctx, rowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsReadResponse(rsp)
}

// EventsUpdateWithBodyWithResponse request with arbitrary body returning *EventsUpdateResponse
func (c *ClientWithResponses) EventsUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsUpdateResponse, error) {
	rsp, err := c.EventsUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EventsUpdateWithResponse(ctx context.Context, rowId string, body EventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsUpdateResponse, error) {
	rsp, err := c.EventsUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsUpdateResponse(rsp)
}

// EventsNestedListWithResponse request returning *EventsNestedListResponse
func (c *ClientWithResponses) EventsNestedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedListParams, reqEditors ...RequestEditorFn) (*EventsNestedListResponse, error) {
	rsp, err := c.EventsNestedList(ctx, rowId, relationType, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsNestedListResponse(rsp)
}

// EventsNestedChildrenExcludedListWithResponse request returning *EventsNestedChildrenExcludedListResponse
func (c *ClientWithResponses) EventsNestedChildrenExcludedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*EventsNestedChildrenExcludedListResponse, error) {
	rsp, err := c.EventsNestedChildrenExcludedList(ctx, rowId, relationType, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsNestedChildrenExcludedListResponse(rsp)
}

// EventsNestedRemoveWithResponse request returning *EventsNestedRemoveResponse
func (c *ClientWithResponses) EventsNestedRemoveWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*EventsNestedRemoveResponse, error) {
	rsp, err := c.EventsNestedRemove(ctx, rowId, relationType, columnName, refRowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsNestedRemoveResponse(rsp)
}

// EventsNestedAddWithResponse request returning *EventsNestedAddResponse
func (c *ClientWithResponses) EventsNestedAddWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *EventsNestedAddParams, reqEditors ...RequestEditorFn) (*EventsNestedAddResponse, error) {
	rsp, err := c.EventsNestedAdd(ctx, rowId, relationType, columnName, refRowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsNestedAddResponse(rsp)
}

// ParseVolunteersBulkDeleteResponse parses an HTTP response from a VolunteersBulkDeleteWithResponse call
func ParseVolunteersBulkDeleteResponse(rsp *http.Response) (*VolunteersBulkDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersBulkDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersBulkUpdateResponse parses an HTTP response from a VolunteersBulkUpdateWithResponse call
func ParseVolunteersBulkUpdateResponse(rsp *http.Response) (*VolunteersBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersBulkCreateResponse parses an HTTP response from a VolunteersBulkCreateWithResponse call
func ParseVolunteersBulkCreateResponse(rsp *http.Response) (*VolunteersBulkCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersBulkCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersBulkDeleteAllResponse parses an HTTP response from a VolunteersBulkDeleteAllWithResponse call
func ParseVolunteersBulkDeleteAllResponse(rsp *http.Response) (*VolunteersBulkDeleteAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersBulkDeleteAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersBulkUpdateAllResponse parses an HTTP response from a VolunteersBulkUpdateAllWithResponse call
func ParseVolunteersBulkUpdateAllResponse(rsp *http.Response) (*VolunteersBulkUpdateAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersBulkUpdateAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsBulkDeleteResponse parses an HTTP response from a CommEventsBulkDeleteWithResponse call
func ParseCommEventsBulkDeleteResponse(rsp *http.Response) (*CommEventsBulkDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsBulkDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsBulkUpdateResponse parses an HTTP response from a CommEventsBulkUpdateWithResponse call
func ParseCommEventsBulkUpdateResponse(rsp *http.Response) (*CommEventsBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsBulkCreateResponse parses an HTTP response from a CommEventsBulkCreateWithResponse call
func ParseCommEventsBulkCreateResponse(rsp *http.Response) (*CommEventsBulkCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsBulkCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsBulkDeleteAllResponse parses an HTTP response from a CommEventsBulkDeleteAllWithResponse call
func ParseCommEventsBulkDeleteAllResponse(rsp *http.Response) (*CommEventsBulkDeleteAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsBulkDeleteAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsBulkUpdateAllResponse parses an HTTP response from a CommEventsBulkUpdateAllWithResponse call
func ParseCommEventsBulkUpdateAllResponse(rsp *http.Response) (*CommEventsBulkUpdateAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsBulkUpdateAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsBulkDeleteResponse parses an HTTP response from a EventsBulkDeleteWithResponse call
func ParseEventsBulkDeleteResponse(rsp *http.Response) (*EventsBulkDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsBulkDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsBulkUpdateResponse parses an HTTP response from a EventsBulkUpdateWithResponse call
func ParseEventsBulkUpdateResponse(rsp *http.Response) (*EventsBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsBulkCreateResponse parses an HTTP response from a EventsBulkCreateWithResponse call
func ParseEventsBulkCreateResponse(rsp *http.Response) (*EventsBulkCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsBulkCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsBulkDeleteAllResponse parses an HTTP response from a EventsBulkDeleteAllWithResponse call
func ParseEventsBulkDeleteAllResponse(rsp *http.Response) (*EventsBulkDeleteAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsBulkDeleteAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsBulkUpdateAllResponse parses an HTTP response from a EventsBulkUpdateAllWithResponse call
func ParseEventsBulkUpdateAllResponse(rsp *http.Response) (*EventsBulkUpdateAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsBulkUpdateAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersDbTableRowListResponse parses an HTTP response from a VolunteersDbTableRowListWithResponse call
func ParseVolunteersDbTableRowListResponse(rsp *http.Response) (*VolunteersDbTableRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersDbTableRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated            `json:"PageInfo,omitempty"`
			List     *[]VolunteersResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersCreateResponse parses an HTTP response from a VolunteersCreateWithResponse call
func ParseVolunteersCreateResponse(rsp *http.Response) (*VolunteersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolunteersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersCountResponse parses an HTTP response from a VolunteersCountWithResponse call
func ParseVolunteersCountResponse(rsp *http.Response) (*VolunteersCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersCsvExportResponse parses an HTTP response from a VolunteersCsvExportWithResponse call
func ParseVolunteersCsvExportResponse(rsp *http.Response) (*VolunteersCsvExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersCsvExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVolunteersDbTableRowFindOneResponse parses an HTTP response from a VolunteersDbTableRowFindOneWithResponse call
func ParseVolunteersDbTableRowFindOneResponse(rsp *http.Response) (*VolunteersDbTableRowFindOneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersDbTableRowFindOneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolunteersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersGroupbyResponse parses an HTTP response from a VolunteersGroupbyWithResponse call
func ParseVolunteersGroupbyResponse(rsp *http.Response) (*VolunteersGroupbyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersGroupbyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated `json:"PageInfo,omitempty"`
			List     *[]Groupby `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersVolunteersRowListResponse parses an HTTP response from a VolunteersVolunteersRowListWithResponse call
func ParseVolunteersVolunteersRowListResponse(rsp *http.Response) (*VolunteersVolunteersRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersVolunteersRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated                          `json:"PageInfo,omitempty"`
			List     *[]VolunteersVolunteersGridResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersVolunteersRowCreateResponse parses an HTTP response from a VolunteersVolunteersRowCreateWithResponse call
func ParseVolunteersVolunteersRowCreateResponse(rsp *http.Response) (*VolunteersVolunteersRowCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersVolunteersRowCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersVolunteersRowCountResponse parses an HTTP response from a VolunteersVolunteersRowCountWithResponse call
func ParseVolunteersVolunteersRowCountResponse(rsp *http.Response) (*VolunteersVolunteersRowCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersVolunteersRowCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count *float32 `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersVolunteersRowExportResponse parses an HTTP response from a VolunteersVolunteersRowExportWithResponse call
func ParseVolunteersVolunteersRowExportResponse(rsp *http.Response) (*VolunteersVolunteersRowExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersVolunteersRowExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVolunteersVolunteersRowDeleteResponse parses an HTTP response from a VolunteersVolunteersRowDeleteWithResponse call
func ParseVolunteersVolunteersRowDeleteResponse(rsp *http.Response) (*VolunteersVolunteersRowDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersVolunteersRowDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVolunteersVolunteersRowReadResponse parses an HTTP response from a VolunteersVolunteersRowReadWithResponse call
func ParseVolunteersVolunteersRowReadResponse(rsp *http.Response) (*VolunteersVolunteersRowReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersVolunteersRowReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolunteersVolunteersGridResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersVolunteersRowUpdateResponse parses an HTTP response from a VolunteersVolunteersRowUpdateWithResponse call
func ParseVolunteersVolunteersRowUpdateResponse(rsp *http.Response) (*VolunteersVolunteersRowUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersVolunteersRowUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersDeleteResponse parses an HTTP response from a VolunteersDeleteWithResponse call
func ParseVolunteersDeleteResponse(rsp *http.Response) (*VolunteersDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVolunteersReadResponse parses an HTTP response from a VolunteersReadWithResponse call
func ParseVolunteersReadResponse(rsp *http.Response) (*VolunteersReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VolunteersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseVolunteersUpdateResponse parses an HTTP response from a VolunteersUpdateWithResponse call
func ParseVolunteersUpdateResponse(rsp *http.Response) (*VolunteersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolunteersRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersNestedListResponse parses an HTTP response from a VolunteersNestedListWithResponse call
func ParseVolunteersNestedListResponse(rsp *http.Response) (*VolunteersNestedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersNestedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersNestedChildrenExcludedListResponse parses an HTTP response from a VolunteersNestedChildrenExcludedListWithResponse call
func ParseVolunteersNestedChildrenExcludedListResponse(rsp *http.Response) (*VolunteersNestedChildrenExcludedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersNestedChildrenExcludedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersNestedRemoveResponse parses an HTTP response from a VolunteersNestedRemoveWithResponse call
func ParseVolunteersNestedRemoveResponse(rsp *http.Response) (*VolunteersNestedRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersNestedRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersNestedAddResponse parses an HTTP response from a VolunteersNestedAddWithResponse call
func ParseVolunteersNestedAddResponse(rsp *http.Response) (*VolunteersNestedAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersNestedAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsDbTableRowListResponse parses an HTTP response from a CommEventsDbTableRowListWithResponse call
func ParseCommEventsDbTableRowListResponse(rsp *http.Response) (*CommEventsDbTableRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsDbTableRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated            `json:"PageInfo,omitempty"`
			List     *[]CommEventsResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsCreateResponse parses an HTTP response from a CommEventsCreateWithResponse call
func ParseCommEventsCreateResponse(rsp *http.Response) (*CommEventsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsCountResponse parses an HTTP response from a CommEventsCountWithResponse call
func ParseCommEventsCountResponse(rsp *http.Response) (*CommEventsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsCsvExportResponse parses an HTTP response from a CommEventsCsvExportWithResponse call
func ParseCommEventsCsvExportResponse(rsp *http.Response) (*CommEventsCsvExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsCsvExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCommEventsDbTableRowFindOneResponse parses an HTTP response from a CommEventsDbTableRowFindOneWithResponse call
func ParseCommEventsDbTableRowFindOneResponse(rsp *http.Response) (*CommEventsDbTableRowFindOneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsDbTableRowFindOneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsGroupbyResponse parses an HTTP response from a CommEventsGroupbyWithResponse call
func ParseCommEventsGroupbyResponse(rsp *http.Response) (*CommEventsGroupbyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsGroupbyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated `json:"PageInfo,omitempty"`
			List     *[]Groupby `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsCommEventsRowListResponse parses an HTTP response from a CommEventsCommEventsRowListWithResponse call
func ParseCommEventsCommEventsRowListResponse(rsp *http.Response) (*CommEventsCommEventsRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsCommEventsRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated                          `json:"PageInfo,omitempty"`
			List     *[]CommEventscommEventsGridResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsCommEventsRowCreateResponse parses an HTTP response from a CommEventsCommEventsRowCreateWithResponse call
func ParseCommEventsCommEventsRowCreateResponse(rsp *http.Response) (*CommEventsCommEventsRowCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsCommEventsRowCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsCommEventsRowCountResponse parses an HTTP response from a CommEventsCommEventsRowCountWithResponse call
func ParseCommEventsCommEventsRowCountResponse(rsp *http.Response) (*CommEventsCommEventsRowCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsCommEventsRowCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count *float32 `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsCommEventsRowExportResponse parses an HTTP response from a CommEventsCommEventsRowExportWithResponse call
func ParseCommEventsCommEventsRowExportResponse(rsp *http.Response) (*CommEventsCommEventsRowExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsCommEventsRowExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCommEventsCommEventsRowDeleteResponse parses an HTTP response from a CommEventsCommEventsRowDeleteWithResponse call
func ParseCommEventsCommEventsRowDeleteResponse(rsp *http.Response) (*CommEventsCommEventsRowDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsCommEventsRowDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCommEventsCommEventsRowReadResponse parses an HTTP response from a CommEventsCommEventsRowReadWithResponse call
func ParseCommEventsCommEventsRowReadResponse(rsp *http.Response) (*CommEventsCommEventsRowReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsCommEventsRowReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommEventscommEventsGridResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsCommEventsRowUpdateResponse parses an HTTP response from a CommEventsCommEventsRowUpdateWithResponse call
func ParseCommEventsCommEventsRowUpdateResponse(rsp *http.Response) (*CommEventsCommEventsRowUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsCommEventsRowUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommEventsDeleteResponse parses an HTTP response from a CommEventsDeleteWithResponse call
func ParseCommEventsDeleteResponse(rsp *http.Response) (*CommEventsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCommEventsReadResponse parses an HTTP response from a CommEventsReadWithResponse call
func ParseCommEventsReadResponse(rsp *http.Response) (*CommEventsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CommEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCommEventsUpdateResponse parses an HTTP response from a CommEventsUpdateWithResponse call
func ParseCommEventsUpdateResponse(rsp *http.Response) (*CommEventsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommEventsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommEventsRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsDbTableRowListResponse parses an HTTP response from a EventsDbTableRowListWithResponse call
func ParseEventsDbTableRowListResponse(rsp *http.Response) (*EventsDbTableRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsDbTableRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated        `json:"PageInfo,omitempty"`
			List     *[]EventsResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsCreateResponse parses an HTTP response from a EventsCreateWithResponse call
func ParseEventsCreateResponse(rsp *http.Response) (*EventsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsCountResponse parses an HTTP response from a EventsCountWithResponse call
func ParseEventsCountResponse(rsp *http.Response) (*EventsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsCsvExportResponse parses an HTTP response from a EventsCsvExportWithResponse call
func ParseEventsCsvExportResponse(rsp *http.Response) (*EventsCsvExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsCsvExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEventsDbTableRowFindOneResponse parses an HTTP response from a EventsDbTableRowFindOneWithResponse call
func ParseEventsDbTableRowFindOneResponse(rsp *http.Response) (*EventsDbTableRowFindOneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsDbTableRowFindOneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsGroupbyResponse parses an HTTP response from a EventsGroupbyWithResponse call
func ParseEventsGroupbyResponse(rsp *http.Response) (*EventsGroupbyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsGroupbyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated `json:"PageInfo,omitempty"`
			List     *[]Groupby `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsEventsRowListResponse parses an HTTP response from a EventsEventsRowListWithResponse call
func ParseEventsEventsRowListResponse(rsp *http.Response) (*EventsEventsRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated                  `json:"PageInfo,omitempty"`
			List     *[]EventseventsGridResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsEventsRowCreateResponse parses an HTTP response from a EventsEventsRowCreateWithResponse call
func ParseEventsEventsRowCreateResponse(rsp *http.Response) (*EventsEventsRowCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsEventsRowCountResponse parses an HTTP response from a EventsEventsRowCountWithResponse call
func ParseEventsEventsRowCountResponse(rsp *http.Response) (*EventsEventsRowCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count *float32 `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsEventsRowExportResponse parses an HTTP response from a EventsEventsRowExportWithResponse call
func ParseEventsEventsRowExportResponse(rsp *http.Response) (*EventsEventsRowExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEventsEventsRowDeleteResponse parses an HTTP response from a EventsEventsRowDeleteWithResponse call
func ParseEventsEventsRowDeleteResponse(rsp *http.Response) (*EventsEventsRowDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEventsEventsRowReadResponse parses an HTTP response from a EventsEventsRowReadWithResponse call
func ParseEventsEventsRowReadResponse(rsp *http.Response) (*EventsEventsRowReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventseventsGridResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsEventsRowUpdateResponse parses an HTTP response from a EventsEventsRowUpdateWithResponse call
func ParseEventsEventsRowUpdateResponse(rsp *http.Response) (*EventsEventsRowUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsDeleteResponse parses an HTTP response from a EventsDeleteWithResponse call
func ParseEventsDeleteResponse(rsp *http.Response) (*EventsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEventsReadResponse parses an HTTP response from a EventsReadWithResponse call
func ParseEventsReadResponse(rsp *http.Response) (*EventsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEventsUpdateResponse parses an HTTP response from a EventsUpdateWithResponse call
func ParseEventsUpdateResponse(rsp *http.Response) (*EventsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventsRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsNestedListResponse parses an HTTP response from a EventsNestedListWithResponse call
func ParseEventsNestedListResponse(rsp *http.Response) (*EventsNestedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsNestedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsNestedChildrenExcludedListResponse parses an HTTP response from a EventsNestedChildrenExcludedListWithResponse call
func ParseEventsNestedChildrenExcludedListResponse(rsp *http.Response) (*EventsNestedChildrenExcludedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsNestedChildrenExcludedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsNestedRemoveResponse parses an HTTP response from a EventsNestedRemoveWithResponse call
func ParseEventsNestedRemoveResponse(rsp *http.Response) (*EventsNestedRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsNestedRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsNestedAddResponse parses an HTTP response from a EventsNestedAddWithResponse call
func ParseEventsNestedAddResponse(rsp *http.Response) (*EventsNestedAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsNestedAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
