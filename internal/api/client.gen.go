// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	XcAuthScopes  = "xcAuth.Scopes"
	XcTokenScopes = "xcToken.Scopes"
)

// Attachment defines model for Attachment.
type Attachment struct {
	Icon     *string `json:"icon,omitempty"`
	Mimetype *string `json:"mimetype,omitempty"`
	Size     *int    `json:"size,omitempty"`
	Title    *string `json:"title,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// EventsRequest defines model for EventsRequest.
type EventsRequest struct {
	CreatedAt                      *string `json:"CreatedAt,omitempty"`
	End                            *string `json:"End,omitempty"`
	Id                             *int    `json:"Id,omitempty"`
	NbVolunteers                   *int    `json:"NbVolunteers,omitempty"`
	NeedComm                       *bool   `json:"NeedComm ? ,omitempty"`
	Place                          *string `json:"Place,omitempty"`
	Start                          *string `json:"Start,omitempty"`
	Title                          *string `json:"Title,omitempty"`
	Type                           *string `json:"Type,omitempty"`
	UpdatedAt                      *string `json:"UpdatedAt,omitempty"`
	NcCurgCommunicationOnEventsId  *int    `json:"nc_curg__communicationOnEvents_id,omitempty"`
	NcCurgCommunicationOnEventsId1 *int    `json:"nc_curg__communicationOnEvents_id1,omitempty"`
}

// EventsResponse defines model for EventsResponse.
type EventsResponse struct {
	CreatedAt                      *string                       `json:"CreatedAt,omitempty"`
	End                            *string                       `json:"End,omitempty"`
	Id                             *int                          `json:"Id,omitempty"`
	NbVolunteers                   *int                          `json:"NbVolunteers,omitempty"`
	NeedComm                       *bool                         `json:"NeedComm ? ,omitempty"`
	Picture                        *[]Attachment                 `json:"Picture,omitempty"`
	Place                          *string                       `json:"Place,omitempty"`
	Start                          *string                       `json:"Start,omitempty"`
	Title                          *string                       `json:"Title,omitempty"`
	Type                           *string                       `json:"Type,omitempty"`
	UpdatedAt                      *string                       `json:"UpdatedAt,omitempty"`
	Volunteers                     *float32                      `json:"Volunteers,omitempty"`
	CommunicationOnEvents          *CommunicationOnEventsRequest `json:"communicationOnEvents,omitempty"`
	NcCurgNcM2mW5i3lbdpwrs         *[]NcCurgNcM2mW5i3lbdpwrRequest `json:"nc_curg___nc_m2m_w5i3lbdpwrs,omitempty"`
	NcCurgCommunicationOnEventsId  *int                          `json:"nc_curg__communicationOnEvents_id,omitempty"`
	NcCurgCommunicationOnEventsId1 *int                          `json:"nc_curg__communicationOnEvents_id1,omitempty"`
}

// EventseventsGridRequest defines model for EventseventsGridRequest.
type EventseventsGridRequest struct {
	CreatedAt                      *string `json:"CreatedAt,omitempty"`
	End                            *string `json:"End,omitempty"`
	Id                             *int    `json:"Id,omitempty"`
	NbVolunteers                   *int    `json:"NbVolunteers,omitempty"`
	NeedComm                       *bool   `json:"NeedComm ? ,omitempty"`
	Place                          *string `json:"Place,omitempty"`
	Start                          *string `json:"Start,omitempty"`
	Title                          *string `json:"Title,omitempty"`
	Type                           *string `json:"Type,omitempty"`
	UpdatedAt                      *string `json:"UpdatedAt,omitempty"`
	NcCurgCommunicationOnEventsId  *int    `json:"nc_curg__communicationOnEvents_id,omitempty"`
	NcCurgCommunicationOnEventsId1 *int    `json:"nc_curg__communicationOnEvents_id1,omitempty"`
}

// EventseventsGridResponse defines model for EventseventsGridResponse.
type EventseventsGridResponse struct {
	CreatedAt                      *string                       `json:"CreatedAt,omitempty"`
	End                            *string                       `json:"End,omitempty"`
	Id                             *int                          `json:"Id,omitempty"`
	NbVolunteers                   *int                          `json:"NbVolunteers,omitempty"`
	NeedComm                       *bool                         `json:"NeedComm ? ,omitempty"`
	Picture                        *[]Attachment                 `json:"Picture,omitempty"`
	Place                          *string                       `json:"Place,omitempty"`
	Start                          *string                       `json:"Start,omitempty"`
	Title                          *string                       `json:"Title,omitempty"`
	Type                           *string                       `json:"Type,omitempty"`
	UpdatedAt                      *string                       `json:"UpdatedAt,omitempty"`
	Volunteers                     *float32                      `json:"Volunteers,omitempty"`
	CommunicationOnEvents          *CommunicationOnEventsRequest `json:"communicationOnEvents,omitempty"`
	NcCurgNcM2mW5i3lbdpwrs         *[]NcCurgNcM2mW5i3lbdpwrRequest `json:"nc_curg___nc_m2m_w5i3lbdpwrs,omitempty"`
	NcCurgCommunicationOnEventsId  *int                          `json:"nc_curg__communicationOnEvents_id,omitempty"`
	NcCurgCommunicationOnEventsId1 *int                          `json:"nc_curg__communicationOnEvents_id1,omitempty"`
}

// Groupby defines model for Groupby.
type Groupby struct {
	// ColumnName the value of the given column
	ColumnName *string `json:"column_name,omitempty"`

	// Count count
	Count *float32 `json:"count,omitempty"`
}

// Paginated defines model for Paginated.
type Paginated struct {
	IsFirstPage *bool    `json:"isFirstPage,omitempty"`
	IsLastPage  *bool    `json:"isLastPage,omitempty"`
	Page        *float32 `json:"page,omitempty"`
	PageSize    *int     `json:"pageSize,omitempty"`
	TotalRows   *int     `json:"totalRows,omitempty"`
}

// VolunteersRequest defines model for VolunteersRequest.
type VolunteersRequest struct {
	CreatedAt *string `json:"CreatedAt,omitempty"`
	DiscordId *string `json:"DiscordId,omitempty"`
	Email     *string `json:"Email,omitempty"`
	Firstname *string `json:"Firstname,omitempty"`
	Id        *int    `json:"Id,omitempty"`
	Lastname  *string `json:"Lastname,omitempty"`
	Tel       *string `json:"Tel,omitempty"`
	UpdatedAt *string `json:"UpdatedAt,omitempty"`
}

// VolunteersResponse defines model for VolunteersResponse.
type VolunteersResponse struct {
	CreatedAt              *string                       `json:"CreatedAt,omitempty"`
	DiscordId              *string                       `json:"DiscordId,omitempty"`
	Email                  *string                       `json:"Email,omitempty"`
	Events                 *float32                      `json:"Events,omitempty"`
	Firstname              *string                       `json:"Firstname,omitempty"`
	Id                     *int                          `json:"Id,omitempty"`
	Lastname               *string                       `json:"Lastname,omitempty"`
	Tel                    *string                       `json:"Tel,omitempty"`
	UpdatedAt              *string                       `json:"UpdatedAt,omitempty"`
	NcCurgNcM2mW5i3lbdpwrs *NcCurgNcM2mW5i3lbdpwrRequest `json:"nc_curg___nc_m2m_w5i3lbdpwrs,omitempty"`
}

// VolunteersgridGridRequest defines model for VolunteersgridGridRequest.
type VolunteersgridGridRequest struct {
	CreatedAt *string `json:"CreatedAt,omitempty"`
	DiscordId *string `json:"DiscordId,omitempty"`
	Email     *string `json:"Email,omitempty"`
	Firstname *string `json:"Firstname,omitempty"`
	Id        *int    `json:"Id,omitempty"`
	Lastname  *string `json:"Lastname,omitempty"`
	Tel       *string `json:"Tel,omitempty"`
	UpdatedAt *string `json:"UpdatedAt,omitempty"`
}

// VolunteersgridGridResponse defines model for VolunteersgridGridResponse.
type VolunteersgridGridResponse struct {
	CreatedAt              *string                       `json:"CreatedAt,omitempty"`
	DiscordId              *string                       `json:"DiscordId,omitempty"`
	Email                  *string                       `json:"Email,omitempty"`
	Events                 *float32                      `json:"Events,omitempty"`
	Firstname              *string                       `json:"Firstname,omitempty"`
	Id                     *int                          `json:"Id,omitempty"`
	Lastname               *string                       `json:"Lastname,omitempty"`
	Tel                    *string                       `json:"Tel,omitempty"`
	UpdatedAt              *string                       `json:"UpdatedAt,omitempty"`
	NcCurgNcM2mW5i3lbdpwrs *NcCurgNcM2mW5i3lbdpwrRequest `json:"nc_curg___nc_m2m_w5i3lbdpwrs,omitempty"`
}

// CommunicationOnEventsRequest defines model for communicationOnEventsRequest.
type CommunicationOnEventsRequest struct {
	AdditionnalLink    *string `json:"AdditionnalLink,omitempty"`
	CreatedAt          *string `json:"CreatedAt,omitempty"`
	DescEN             *string `json:"DescEN,omitempty"`
	DescFR             *string `json:"DescFR,omitempty"`
	Id                 *int    `json:"Id,omitempty"`
	MembershipRequired *bool   `json:"MembershipRequired,omitempty"`
	NearestStation     *string `json:"NearestStation,omitempty"`
	Price              *string `json:"Price,omitempty"`
	TicketingURL       *string `json:"TicketingURL,omitempty"`
	Title              *string `json:"Title,omitempty"`
	UpdatedAt          *string `json:"UpdatedAt,omitempty"`
	NeedTickets        *bool   `json:"needTickets,omitempty"`
}

// CommunicationOnEventsResponse defines model for communicationOnEventsResponse.
type CommunicationOnEventsResponse struct {
	AdditionnalLink    *string  `json:"AdditionnalLink,omitempty"`
	CreatedAt          *string  `json:"CreatedAt,omitempty"`
	DescEN             *string  `json:"DescEN,omitempty"`
	DescFR             *string  `json:"DescFR,omitempty"`
	Event              *float32 `json:"Event,omitempty"`
	Id                 *int     `json:"Id,omitempty"`
	MembershipRequired *bool    `json:"MembershipRequired,omitempty"`
	NearestStation     *string  `json:"NearestStation,omitempty"`
	Price              *string  `json:"Price,omitempty"`
	TicketingURL       *string  `json:"TicketingURL,omitempty"`
	Title              *string  `json:"Title,omitempty"`
	UpdatedAt          *string  `json:"UpdatedAt,omitempty"`
	NeedTickets        *bool    `json:"needTickets,omitempty"`
}

// CommunicationOnEventscommunicationOnEventsGridRequest defines model for communicationOnEventscommunicationOnEventsGridRequest.
type CommunicationOnEventscommunicationOnEventsGridRequest struct {
	AdditionnalLink    *string `json:"AdditionnalLink,omitempty"`
	CreatedAt          *string `json:"CreatedAt,omitempty"`
	DescEN             *string `json:"DescEN,omitempty"`
	DescFR             *string `json:"DescFR,omitempty"`
	Id                 *int    `json:"Id,omitempty"`
	MembershipRequired *bool   `json:"MembershipRequired,omitempty"`
	NearestStation     *string `json:"NearestStation,omitempty"`
	Price              *string `json:"Price,omitempty"`
	TicketingURL       *string `json:"TicketingURL,omitempty"`
	Title              *string `json:"Title,omitempty"`
	UpdatedAt          *string `json:"UpdatedAt,omitempty"`
	NeedTickets        *bool   `json:"needTickets,omitempty"`
}

// CommunicationOnEventscommunicationOnEventsGridResponse defines model for communicationOnEventscommunicationOnEventsGridResponse.
type CommunicationOnEventscommunicationOnEventsGridResponse struct {
	AdditionnalLink    *string  `json:"AdditionnalLink,omitempty"`
	CreatedAt          *string  `json:"CreatedAt,omitempty"`
	DescEN             *string  `json:"DescEN,omitempty"`
	DescFR             *string  `json:"DescFR,omitempty"`
	Event              *float32 `json:"Event,omitempty"`
	Id                 *int     `json:"Id,omitempty"`
	MembershipRequired *bool    `json:"MembershipRequired,omitempty"`
	NearestStation     *string  `json:"NearestStation,omitempty"`
	Price              *string  `json:"Price,omitempty"`
	TicketingURL       *string  `json:"TicketingURL,omitempty"`
	Title              *string  `json:"Title,omitempty"`
	UpdatedAt          *string  `json:"UpdatedAt,omitempty"`
	NeedTickets        *bool    `json:"needTickets,omitempty"`
}

// NcCurgNcM2mW5i3lbdpwrRequest defines model for nc_curg___nc_m2m_w5i3lbdpwrRequest.
type NcCurgNcM2mW5i3lbdpwrRequest struct {
	Table1Id *int `json:"table1_id,omitempty"`
	Table2Id *int `json:"table2_id,omitempty"`
}

// EventsBulkDeleteJSONBody defines parameters for EventsBulkDelete.
type EventsBulkDeleteJSONBody = interface{}

// EventsBulkUpdateJSONBody defines parameters for EventsBulkUpdate.
type EventsBulkUpdateJSONBody = interface{}

// EventsBulkCreateJSONBody defines parameters for EventsBulkCreate.
type EventsBulkCreateJSONBody = interface{}

// EventsBulkDeleteAllParams defines parameters for EventsBulkDeleteAll.
type EventsBulkDeleteAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// EventsBulkUpdateAllJSONBody defines parameters for EventsBulkUpdateAll.
type EventsBulkUpdateAllJSONBody = interface{}

// EventsBulkUpdateAllParams defines parameters for EventsBulkUpdateAll.
type EventsBulkUpdateAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// VolunteersBulkDeleteJSONBody defines parameters for VolunteersBulkDelete.
type VolunteersBulkDeleteJSONBody = interface{}

// VolunteersBulkUpdateJSONBody defines parameters for VolunteersBulkUpdate.
type VolunteersBulkUpdateJSONBody = interface{}

// VolunteersBulkCreateJSONBody defines parameters for VolunteersBulkCreate.
type VolunteersBulkCreateJSONBody = interface{}

// VolunteersBulkDeleteAllParams defines parameters for VolunteersBulkDeleteAll.
type VolunteersBulkDeleteAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// VolunteersBulkUpdateAllJSONBody defines parameters for VolunteersBulkUpdateAll.
type VolunteersBulkUpdateAllJSONBody = interface{}

// VolunteersBulkUpdateAllParams defines parameters for VolunteersBulkUpdateAll.
type VolunteersBulkUpdateAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// CommunicationoneventsBulkDeleteJSONBody defines parameters for CommunicationoneventsBulkDelete.
type CommunicationoneventsBulkDeleteJSONBody = interface{}

// CommunicationoneventsBulkUpdateJSONBody defines parameters for CommunicationoneventsBulkUpdate.
type CommunicationoneventsBulkUpdateJSONBody = interface{}

// CommunicationoneventsBulkCreateJSONBody defines parameters for CommunicationoneventsBulkCreate.
type CommunicationoneventsBulkCreateJSONBody = interface{}

// CommunicationoneventsBulkDeleteAllParams defines parameters for CommunicationoneventsBulkDeleteAll.
type CommunicationoneventsBulkDeleteAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// CommunicationoneventsBulkUpdateAllJSONBody defines parameters for CommunicationoneventsBulkUpdateAll.
type CommunicationoneventsBulkUpdateAllJSONBody = interface{}

// CommunicationoneventsBulkUpdateAllParams defines parameters for CommunicationoneventsBulkUpdateAll.
type CommunicationoneventsBulkUpdateAllParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// EventsDbTableRowListParams defines parameters for EventsDbTableRowList.
type EventsDbTableRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsWhere This can be used for filtering rows in nested column `nc_curg___nc_m2m_w5i3lbdpwrs`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][where]=(field1,eq,value)`
	NestedNcCurgNcM2mW5i3lbdpwrsWhere *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][where],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][where],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsOffset The `offset` parameter used for pagination  of nested `nc_curg___nc_m2m_w5i3lbdpwrs` rows, the value helps to select collection from a certain index.
	NestedNcCurgNcM2mW5i3lbdpwrsOffset *float32 `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsLimit The `limit` parameter used for pagination of nested `nc_curg___nc_m2m_w5i3lbdpwrs` rows, the response collection size depends on limit value and default value is `25`.
	NestedNcCurgNcM2mW5i3lbdpwrsLimit *float32 `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsFields Array of field names or comma separated filed names to include in the in nested column `nc_curg___nc_m2m_w5i3lbdpwrs` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields]=field1,field2`
	NestedNcCurgNcM2mW5i3lbdpwrsFields *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsSort Comma separated field names to sort rows in nested column `nc_curg___nc_m2m_w5i3lbdpwrs` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort]=field1,-field2`
	NestedNcCurgNcM2mW5i3lbdpwrsSort *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort],omitempty"`

	// NestedCommunicationOnEventsFields Array of field names or comma separated filed names to include in the in nested column `communicationOnEvents` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[communicationOnEvents][fields]=field1,field2`
	NestedCommunicationOnEventsFields *string `form:"nested[communicationOnEvents][fields],omitempty" json:"nested[communicationOnEvents][fields],omitempty"`
}

// EventsCountParams defines parameters for EventsCount.
type EventsCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// EventsCsvExportParams defines parameters for EventsCsvExport.
type EventsCsvExportParams struct {
	// Offset Helps to start export from a certain index. You can get the next set of data offset from previous response header named `nc-export-offset`.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// EventsDbTableRowFindOneParams defines parameters for EventsDbTableRowFindOne.
type EventsDbTableRowFindOneParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// EventsGroupbyParams defines parameters for EventsGroupby.
type EventsGroupbyParams struct {
	// ColumnName Column name of the column you want to group by, eg. `column_name=column1`
	ColumnName *string `form:"column_name,omitempty" json:"column_name,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`
}

// EventsEventsRowListParams defines parameters for EventsEventsRowList.
type EventsEventsRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsWhere This can be used for filtering rows in nested column `nc_curg___nc_m2m_w5i3lbdpwrs`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][where]=(field1,eq,value)`
	NestedNcCurgNcM2mW5i3lbdpwrsWhere *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][where],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][where],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsOffset The `offset` parameter used for pagination  of nested `nc_curg___nc_m2m_w5i3lbdpwrs` rows, the value helps to select collection from a certain index.
	NestedNcCurgNcM2mW5i3lbdpwrsOffset *float32 `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsLimit The `limit` parameter used for pagination of nested `nc_curg___nc_m2m_w5i3lbdpwrs` rows, the response collection size depends on limit value and default value is `25`.
	NestedNcCurgNcM2mW5i3lbdpwrsLimit *float32 `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsFields Array of field names or comma separated filed names to include in the in nested column `nc_curg___nc_m2m_w5i3lbdpwrs` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields]=field1,field2`
	NestedNcCurgNcM2mW5i3lbdpwrsFields *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsSort Comma separated field names to sort rows in nested column `nc_curg___nc_m2m_w5i3lbdpwrs` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort]=field1,-field2`
	NestedNcCurgNcM2mW5i3lbdpwrsSort *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort],omitempty"`

	// NestedCommunicationOnEventsFields Array of field names or comma separated filed names to include in the in nested column `communicationOnEvents` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[communicationOnEvents][fields]=field1,field2`
	NestedCommunicationOnEventsFields *string `form:"nested[communicationOnEvents][fields],omitempty" json:"nested[communicationOnEvents][fields],omitempty"`
}

// EventsEventsRowCountParams defines parameters for EventsEventsRowCount.
type EventsEventsRowCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// EventsReadParams defines parameters for EventsRead.
type EventsReadParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// EventsUpdateJSONBody defines parameters for EventsUpdate.
type EventsUpdateJSONBody = interface{}

// EventsNestedListParams defines parameters for EventsNestedList.
type EventsNestedListParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// EventsNestedChildrenExcludedListParams defines parameters for EventsNestedChildrenExcludedList.
type EventsNestedChildrenExcludedListParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// EventsNestedAddParams defines parameters for EventsNestedAdd.
type EventsNestedAddParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// VolunteersDbTableRowListParams defines parameters for VolunteersDbTableRowList.
type VolunteersDbTableRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsWhere This can be used for filtering rows in nested column `nc_curg___nc_m2m_w5i3lbdpwrs`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][where]=(field1,eq,value)`
	NestedNcCurgNcM2mW5i3lbdpwrsWhere *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][where],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][where],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsOffset The `offset` parameter used for pagination  of nested `nc_curg___nc_m2m_w5i3lbdpwrs` rows, the value helps to select collection from a certain index.
	NestedNcCurgNcM2mW5i3lbdpwrsOffset *float32 `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsLimit The `limit` parameter used for pagination of nested `nc_curg___nc_m2m_w5i3lbdpwrs` rows, the response collection size depends on limit value and default value is `25`.
	NestedNcCurgNcM2mW5i3lbdpwrsLimit *float32 `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsFields Array of field names or comma separated filed names to include in the in nested column `nc_curg___nc_m2m_w5i3lbdpwrs` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields]=field1,field2`
	NestedNcCurgNcM2mW5i3lbdpwrsFields *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsSort Comma separated field names to sort rows in nested column `nc_curg___nc_m2m_w5i3lbdpwrs` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort]=field1,-field2`
	NestedNcCurgNcM2mW5i3lbdpwrsSort *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort],omitempty"`
}

// VolunteersCountParams defines parameters for VolunteersCount.
type VolunteersCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// VolunteersCsvExportParams defines parameters for VolunteersCsvExport.
type VolunteersCsvExportParams struct {
	// Offset Helps to start export from a certain index. You can get the next set of data offset from previous response header named `nc-export-offset`.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// VolunteersDbTableRowFindOneParams defines parameters for VolunteersDbTableRowFindOne.
type VolunteersDbTableRowFindOneParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// VolunteersGroupbyParams defines parameters for VolunteersGroupby.
type VolunteersGroupbyParams struct {
	// ColumnName Column name of the column you want to group by, eg. `column_name=column1`
	ColumnName *string `form:"column_name,omitempty" json:"column_name,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`
}

// VolunteersGridRowListParams defines parameters for VolunteersGridRowList.
type VolunteersGridRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsWhere This can be used for filtering rows in nested column `nc_curg___nc_m2m_w5i3lbdpwrs`, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][where]=(field1,eq,value)`
	NestedNcCurgNcM2mW5i3lbdpwrsWhere *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][where],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][where],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsOffset The `offset` parameter used for pagination  of nested `nc_curg___nc_m2m_w5i3lbdpwrs` rows, the value helps to select collection from a certain index.
	NestedNcCurgNcM2mW5i3lbdpwrsOffset *float32 `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsLimit The `limit` parameter used for pagination of nested `nc_curg___nc_m2m_w5i3lbdpwrs` rows, the response collection size depends on limit value and default value is `25`.
	NestedNcCurgNcM2mW5i3lbdpwrsLimit *float32 `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsFields Array of field names or comma separated filed names to include in the in nested column `nc_curg___nc_m2m_w5i3lbdpwrs` result. In array syntax pass it like `fields[]=field1&fields[]=field2.`. Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields]=field1,field2`
	NestedNcCurgNcM2mW5i3lbdpwrsFields *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields],omitempty"`

	// NestedNcCurgNcM2mW5i3lbdpwrsSort Comma separated field names to sort rows in nested column `nc_curg___nc_m2m_w5i3lbdpwrs` rows, it will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort]=field1,-field2`
	NestedNcCurgNcM2mW5i3lbdpwrsSort *string `form:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort],omitempty" json:"nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort],omitempty"`
}

// VolunteersGridRowCountParams defines parameters for VolunteersGridRowCount.
type VolunteersGridRowCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// VolunteersReadParams defines parameters for VolunteersRead.
type VolunteersReadParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// VolunteersUpdateJSONBody defines parameters for VolunteersUpdate.
type VolunteersUpdateJSONBody = interface{}

// VolunteersNestedListParams defines parameters for VolunteersNestedList.
type VolunteersNestedListParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// VolunteersNestedChildrenExcludedListParams defines parameters for VolunteersNestedChildrenExcludedList.
type VolunteersNestedChildrenExcludedListParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// VolunteersNestedAddParams defines parameters for VolunteersNestedAdd.
type VolunteersNestedAddParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CommunicationoneventsDbTableRowListParams defines parameters for CommunicationoneventsDbTableRowList.
type CommunicationoneventsDbTableRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CommunicationoneventsCountParams defines parameters for CommunicationoneventsCount.
type CommunicationoneventsCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// CommunicationoneventsCsvExportParams defines parameters for CommunicationoneventsCsvExport.
type CommunicationoneventsCsvExportParams struct {
	// Offset Helps to start export from a certain index. You can get the next set of data offset from previous response header named `nc-export-offset`.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CommunicationoneventsDbTableRowFindOneParams defines parameters for CommunicationoneventsDbTableRowFindOne.
type CommunicationoneventsDbTableRowFindOneParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// CommunicationoneventsGroupbyParams defines parameters for CommunicationoneventsGroupby.
type CommunicationoneventsGroupbyParams struct {
	// ColumnName Column name of the column you want to group by, eg. `column_name=column1`
	ColumnName *string `form:"column_name,omitempty" json:"column_name,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`
}

// CommunicationOnEventsCommunicationOnEventsRowListParams defines parameters for CommunicationOnEventsCommunicationOnEventsRowList.
type CommunicationOnEventsCommunicationOnEventsRowListParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Sort Comma separated field names to sort rows, rows will sort in ascending order based on provided columns. To sort in descending order provide `-` prefix along with column name, like `-field`. Example : `sort=field1,-field2`
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// CommunicationOnEventsCommunicationOnEventsRowCountParams defines parameters for CommunicationOnEventsCommunicationOnEventsRowCount.
type CommunicationOnEventsCommunicationOnEventsRowCountParams struct {
	// Where This can be used for filtering rows, which accepts complicated where conditions. For more info visit [here](https://docs.nocodb.com/developer-resources/rest-apis#comparison-operators). Example : `where=(field1,eq,value)`
	Where *string `form:"where,omitempty" json:"where,omitempty"`
}

// CommunicationoneventsReadParams defines parameters for CommunicationoneventsRead.
type CommunicationoneventsReadParams struct {
	// Fields Array of field names or comma separated filed names to include in the response objects. In array syntax pass it like `fields[]=field1&fields[]=field2` or alternately `fields=field1,field2`.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// CommunicationoneventsUpdateJSONBody defines parameters for CommunicationoneventsUpdate.
type CommunicationoneventsUpdateJSONBody = interface{}

// CommunicationoneventsNestedListParams defines parameters for CommunicationoneventsNestedList.
type CommunicationoneventsNestedListParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CommunicationoneventsNestedChildrenExcludedListParams defines parameters for CommunicationoneventsNestedChildrenExcludedList.
type CommunicationoneventsNestedChildrenExcludedListParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CommunicationoneventsNestedAddParams defines parameters for CommunicationoneventsNestedAdd.
type CommunicationoneventsNestedAddParams struct {
	// Limit The `limit` parameter used for pagination, the response collection size depends on limit value with default value `25` and maximum value `1000`, which can be overridden by environment variables `DB_QUERY_LIMIT_DEFAULT` and `DB_QUERY_LIMIT_MAX` respectively.
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Shuffle The `shuffle` parameter used for pagination, the response will be shuffled if it is set to 1.
	Shuffle *float32 `form:"shuffle,omitempty" json:"shuffle,omitempty"`

	// Offset The `offset` parameter used for pagination, the value helps to select collection from a certain index.
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// EventsBulkDeleteJSONRequestBody defines body for EventsBulkDelete for application/json ContentType.
type EventsBulkDeleteJSONRequestBody = EventsBulkDeleteJSONBody

// EventsBulkUpdateJSONRequestBody defines body for EventsBulkUpdate for application/json ContentType.
type EventsBulkUpdateJSONRequestBody = EventsBulkUpdateJSONBody

// EventsBulkCreateJSONRequestBody defines body for EventsBulkCreate for application/json ContentType.
type EventsBulkCreateJSONRequestBody = EventsBulkCreateJSONBody

// EventsBulkUpdateAllJSONRequestBody defines body for EventsBulkUpdateAll for application/json ContentType.
type EventsBulkUpdateAllJSONRequestBody = EventsBulkUpdateAllJSONBody

// VolunteersBulkDeleteJSONRequestBody defines body for VolunteersBulkDelete for application/json ContentType.
type VolunteersBulkDeleteJSONRequestBody = VolunteersBulkDeleteJSONBody

// VolunteersBulkUpdateJSONRequestBody defines body for VolunteersBulkUpdate for application/json ContentType.
type VolunteersBulkUpdateJSONRequestBody = VolunteersBulkUpdateJSONBody

// VolunteersBulkCreateJSONRequestBody defines body for VolunteersBulkCreate for application/json ContentType.
type VolunteersBulkCreateJSONRequestBody = VolunteersBulkCreateJSONBody

// VolunteersBulkUpdateAllJSONRequestBody defines body for VolunteersBulkUpdateAll for application/json ContentType.
type VolunteersBulkUpdateAllJSONRequestBody = VolunteersBulkUpdateAllJSONBody

// CommunicationoneventsBulkDeleteJSONRequestBody defines body for CommunicationoneventsBulkDelete for application/json ContentType.
type CommunicationoneventsBulkDeleteJSONRequestBody = CommunicationoneventsBulkDeleteJSONBody

// CommunicationoneventsBulkUpdateJSONRequestBody defines body for CommunicationoneventsBulkUpdate for application/json ContentType.
type CommunicationoneventsBulkUpdateJSONRequestBody = CommunicationoneventsBulkUpdateJSONBody

// CommunicationoneventsBulkCreateJSONRequestBody defines body for CommunicationoneventsBulkCreate for application/json ContentType.
type CommunicationoneventsBulkCreateJSONRequestBody = CommunicationoneventsBulkCreateJSONBody

// CommunicationoneventsBulkUpdateAllJSONRequestBody defines body for CommunicationoneventsBulkUpdateAll for application/json ContentType.
type CommunicationoneventsBulkUpdateAllJSONRequestBody = CommunicationoneventsBulkUpdateAllJSONBody

// EventsCreateJSONRequestBody defines body for EventsCreate for application/json ContentType.
type EventsCreateJSONRequestBody = EventsRequest

// EventsEventsRowCreateJSONRequestBody defines body for EventsEventsRowCreate for application/json ContentType.
type EventsEventsRowCreateJSONRequestBody = EventseventsGridRequest

// EventsEventsRowUpdateJSONRequestBody defines body for EventsEventsRowUpdate for application/json ContentType.
type EventsEventsRowUpdateJSONRequestBody = EventseventsGridRequest

// EventsUpdateJSONRequestBody defines body for EventsUpdate for application/json ContentType.
type EventsUpdateJSONRequestBody = EventsUpdateJSONBody

// VolunteersCreateJSONRequestBody defines body for VolunteersCreate for application/json ContentType.
type VolunteersCreateJSONRequestBody = VolunteersRequest

// VolunteersGridRowCreateJSONRequestBody defines body for VolunteersGridRowCreate for application/json ContentType.
type VolunteersGridRowCreateJSONRequestBody = VolunteersgridGridRequest

// VolunteersGridRowUpdateJSONRequestBody defines body for VolunteersGridRowUpdate for application/json ContentType.
type VolunteersGridRowUpdateJSONRequestBody = VolunteersgridGridRequest

// VolunteersUpdateJSONRequestBody defines body for VolunteersUpdate for application/json ContentType.
type VolunteersUpdateJSONRequestBody = VolunteersUpdateJSONBody

// CommunicationoneventsCreateJSONRequestBody defines body for CommunicationoneventsCreate for application/json ContentType.
type CommunicationoneventsCreateJSONRequestBody = CommunicationOnEventsRequest

// CommunicationOnEventsCommunicationOnEventsRowCreateJSONRequestBody defines body for CommunicationOnEventsCommunicationOnEventsRowCreate for application/json ContentType.
type CommunicationOnEventsCommunicationOnEventsRowCreateJSONRequestBody = CommunicationOnEventscommunicationOnEventsGridRequest

// CommunicationOnEventsCommunicationOnEventsRowUpdateJSONRequestBody defines body for CommunicationOnEventsCommunicationOnEventsRowUpdate for application/json ContentType.
type CommunicationOnEventsCommunicationOnEventsRowUpdateJSONRequestBody = CommunicationOnEventscommunicationOnEventsGridRequest

// CommunicationoneventsUpdateJSONRequestBody defines body for CommunicationoneventsUpdate for application/json ContentType.
type CommunicationoneventsUpdateJSONRequestBody = CommunicationoneventsUpdateJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// EventsBulkDeleteWithBody request with any body
	EventsBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsBulkDelete(ctx context.Context, body EventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsBulkUpdateWithBody request with any body
	EventsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsBulkUpdate(ctx context.Context, body EventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsBulkCreateWithBody request with any body
	EventsBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsBulkCreate(ctx context.Context, body EventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsBulkDeleteAll request
	EventsBulkDeleteAll(ctx context.Context, params *EventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsBulkUpdateAllWithBody request with any body
	EventsBulkUpdateAllWithBody(ctx context.Context, params *EventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsBulkUpdateAll(ctx context.Context, params *EventsBulkUpdateAllParams, body EventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersBulkDeleteWithBody request with any body
	VolunteersBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersBulkDelete(ctx context.Context, body VolunteersBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersBulkUpdateWithBody request with any body
	VolunteersBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersBulkUpdate(ctx context.Context, body VolunteersBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersBulkCreateWithBody request with any body
	VolunteersBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersBulkCreate(ctx context.Context, body VolunteersBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersBulkDeleteAll request
	VolunteersBulkDeleteAll(ctx context.Context, params *VolunteersBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersBulkUpdateAllWithBody request with any body
	VolunteersBulkUpdateAllWithBody(ctx context.Context, params *VolunteersBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersBulkUpdateAll(ctx context.Context, params *VolunteersBulkUpdateAllParams, body VolunteersBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsBulkDeleteWithBody request with any body
	CommunicationoneventsBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommunicationoneventsBulkDelete(ctx context.Context, body CommunicationoneventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsBulkUpdateWithBody request with any body
	CommunicationoneventsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommunicationoneventsBulkUpdate(ctx context.Context, body CommunicationoneventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsBulkCreateWithBody request with any body
	CommunicationoneventsBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommunicationoneventsBulkCreate(ctx context.Context, body CommunicationoneventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsBulkDeleteAll request
	CommunicationoneventsBulkDeleteAll(ctx context.Context, params *CommunicationoneventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsBulkUpdateAllWithBody request with any body
	CommunicationoneventsBulkUpdateAllWithBody(ctx context.Context, params *CommunicationoneventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommunicationoneventsBulkUpdateAll(ctx context.Context, params *CommunicationoneventsBulkUpdateAllParams, body CommunicationoneventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsDbTableRowList request
	EventsDbTableRowList(ctx context.Context, params *EventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsCreateWithBody request with any body
	EventsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsCreate(ctx context.Context, body EventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsCount request
	EventsCount(ctx context.Context, params *EventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsCsvExport request
	EventsCsvExport(ctx context.Context, pType string, params *EventsCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsDbTableRowFindOne request
	EventsDbTableRowFindOne(ctx context.Context, params *EventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsGroupby request
	EventsGroupby(ctx context.Context, params *EventsGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowList request
	EventsEventsRowList(ctx context.Context, params *EventsEventsRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowCreateWithBody request with any body
	EventsEventsRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsEventsRowCreate(ctx context.Context, body EventsEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowCount request
	EventsEventsRowCount(ctx context.Context, params *EventsEventsRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowExport request
	EventsEventsRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowDelete request
	EventsEventsRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowRead request
	EventsEventsRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsEventsRowUpdateWithBody request with any body
	EventsEventsRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsEventsRowUpdate(ctx context.Context, rowId string, body EventsEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsDelete request
	EventsDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsRead request
	EventsRead(ctx context.Context, rowId string, params *EventsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsUpdateWithBody request with any body
	EventsUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsUpdate(ctx context.Context, rowId string, body EventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsNestedList request
	EventsNestedList(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsNestedChildrenExcludedList request
	EventsNestedChildrenExcludedList(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsNestedRemove request
	EventsNestedRemove(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsNestedAdd request
	EventsNestedAdd(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *EventsNestedAddParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersDbTableRowList request
	VolunteersDbTableRowList(ctx context.Context, params *VolunteersDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersCreateWithBody request with any body
	VolunteersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersCreate(ctx context.Context, body VolunteersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersCount request
	VolunteersCount(ctx context.Context, params *VolunteersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersCsvExport request
	VolunteersCsvExport(ctx context.Context, pType string, params *VolunteersCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersDbTableRowFindOne request
	VolunteersDbTableRowFindOne(ctx context.Context, params *VolunteersDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersGroupby request
	VolunteersGroupby(ctx context.Context, params *VolunteersGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersGridRowList request
	VolunteersGridRowList(ctx context.Context, params *VolunteersGridRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersGridRowCreateWithBody request with any body
	VolunteersGridRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersGridRowCreate(ctx context.Context, body VolunteersGridRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersGridRowCount request
	VolunteersGridRowCount(ctx context.Context, params *VolunteersGridRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersGridRowExport request
	VolunteersGridRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersGridRowDelete request
	VolunteersGridRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersGridRowRead request
	VolunteersGridRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersGridRowUpdateWithBody request with any body
	VolunteersGridRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersGridRowUpdate(ctx context.Context, rowId string, body VolunteersGridRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersDelete request
	VolunteersDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersRead request
	VolunteersRead(ctx context.Context, rowId string, params *VolunteersReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersUpdateWithBody request with any body
	VolunteersUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolunteersUpdate(ctx context.Context, rowId string, body VolunteersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersNestedList request
	VolunteersNestedList(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersNestedChildrenExcludedList request
	VolunteersNestedChildrenExcludedList(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersNestedRemove request
	VolunteersNestedRemove(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolunteersNestedAdd request
	VolunteersNestedAdd(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *VolunteersNestedAddParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsDbTableRowList request
	CommunicationoneventsDbTableRowList(ctx context.Context, params *CommunicationoneventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsCreateWithBody request with any body
	CommunicationoneventsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommunicationoneventsCreate(ctx context.Context, body CommunicationoneventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsCount request
	CommunicationoneventsCount(ctx context.Context, params *CommunicationoneventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsCsvExport request
	CommunicationoneventsCsvExport(ctx context.Context, pType string, params *CommunicationoneventsCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsDbTableRowFindOne request
	CommunicationoneventsDbTableRowFindOne(ctx context.Context, params *CommunicationoneventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsGroupby request
	CommunicationoneventsGroupby(ctx context.Context, params *CommunicationoneventsGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationOnEventsCommunicationOnEventsRowList request
	CommunicationOnEventsCommunicationOnEventsRowList(ctx context.Context, params *CommunicationOnEventsCommunicationOnEventsRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationOnEventsCommunicationOnEventsRowCreateWithBody request with any body
	CommunicationOnEventsCommunicationOnEventsRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommunicationOnEventsCommunicationOnEventsRowCreate(ctx context.Context, body CommunicationOnEventsCommunicationOnEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationOnEventsCommunicationOnEventsRowCount request
	CommunicationOnEventsCommunicationOnEventsRowCount(ctx context.Context, params *CommunicationOnEventsCommunicationOnEventsRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationOnEventsCommunicationOnEventsRowExport request
	CommunicationOnEventsCommunicationOnEventsRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationOnEventsCommunicationOnEventsRowDelete request
	CommunicationOnEventsCommunicationOnEventsRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationOnEventsCommunicationOnEventsRowRead request
	CommunicationOnEventsCommunicationOnEventsRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationOnEventsCommunicationOnEventsRowUpdateWithBody request with any body
	CommunicationOnEventsCommunicationOnEventsRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommunicationOnEventsCommunicationOnEventsRowUpdate(ctx context.Context, rowId string, body CommunicationOnEventsCommunicationOnEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsDelete request
	CommunicationoneventsDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsRead request
	CommunicationoneventsRead(ctx context.Context, rowId string, params *CommunicationoneventsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsUpdateWithBody request with any body
	CommunicationoneventsUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommunicationoneventsUpdate(ctx context.Context, rowId string, body CommunicationoneventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsNestedList request
	CommunicationoneventsNestedList(ctx context.Context, rowId string, relationType string, columnName string, params *CommunicationoneventsNestedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsNestedChildrenExcludedList request
	CommunicationoneventsNestedChildrenExcludedList(ctx context.Context, rowId string, relationType string, columnName string, params *CommunicationoneventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsNestedRemove request
	CommunicationoneventsNestedRemove(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommunicationoneventsNestedAdd request
	CommunicationoneventsNestedAdd(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *CommunicationoneventsNestedAddParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) EventsBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkDelete(ctx context.Context, body EventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkUpdate(ctx context.Context, body EventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkCreate(ctx context.Context, body EventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkDeleteAll(ctx context.Context, params *EventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkDeleteAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkUpdateAllWithBody(ctx context.Context, params *EventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkUpdateAllRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsBulkUpdateAll(ctx context.Context, params *EventsBulkUpdateAllParams, body EventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsBulkUpdateAllRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkDelete(ctx context.Context, body VolunteersBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkUpdate(ctx context.Context, body VolunteersBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkCreate(ctx context.Context, body VolunteersBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkDeleteAll(ctx context.Context, params *VolunteersBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkDeleteAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkUpdateAllWithBody(ctx context.Context, params *VolunteersBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkUpdateAllRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersBulkUpdateAll(ctx context.Context, params *VolunteersBulkUpdateAllParams, body VolunteersBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersBulkUpdateAllRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsBulkDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsBulkDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsBulkDelete(ctx context.Context, body CommunicationoneventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsBulkDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsBulkUpdate(ctx context.Context, body CommunicationoneventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsBulkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsBulkCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsBulkCreate(ctx context.Context, body CommunicationoneventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsBulkCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsBulkDeleteAll(ctx context.Context, params *CommunicationoneventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsBulkDeleteAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsBulkUpdateAllWithBody(ctx context.Context, params *CommunicationoneventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsBulkUpdateAllRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsBulkUpdateAll(ctx context.Context, params *CommunicationoneventsBulkUpdateAllParams, body CommunicationoneventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsBulkUpdateAllRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsDbTableRowList(ctx context.Context, params *EventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsDbTableRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsCreate(ctx context.Context, body EventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsCount(ctx context.Context, params *EventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsCsvExport(ctx context.Context, pType string, params *EventsCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsCsvExportRequest(c.Server, pType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsDbTableRowFindOne(ctx context.Context, params *EventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsDbTableRowFindOneRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsGroupby(ctx context.Context, params *EventsGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsGroupbyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowList(ctx context.Context, params *EventsEventsRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowCreate(ctx context.Context, body EventsEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowCount(ctx context.Context, params *EventsEventsRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowExportRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowReadRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsEventsRowUpdate(ctx context.Context, rowId string, body EventsEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsEventsRowUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsRead(ctx context.Context, rowId string, params *EventsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsReadRequest(c.Server, rowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsUpdate(ctx context.Context, rowId string, body EventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsNestedList(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsNestedListRequest(c.Server, rowId, relationType, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsNestedChildrenExcludedList(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsNestedChildrenExcludedListRequest(c.Server, rowId, relationType, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsNestedRemove(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsNestedRemoveRequest(c.Server, rowId, relationType, columnName, refRowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsNestedAdd(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *EventsNestedAddParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsNestedAddRequest(c.Server, rowId, relationType, columnName, refRowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersDbTableRowList(ctx context.Context, params *VolunteersDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersDbTableRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersCreate(ctx context.Context, body VolunteersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersCount(ctx context.Context, params *VolunteersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersCsvExport(ctx context.Context, pType string, params *VolunteersCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersCsvExportRequest(c.Server, pType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersDbTableRowFindOne(ctx context.Context, params *VolunteersDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersDbTableRowFindOneRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersGroupby(ctx context.Context, params *VolunteersGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersGroupbyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersGridRowList(ctx context.Context, params *VolunteersGridRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersGridRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersGridRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersGridRowCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersGridRowCreate(ctx context.Context, body VolunteersGridRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersGridRowCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersGridRowCount(ctx context.Context, params *VolunteersGridRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersGridRowCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersGridRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersGridRowExportRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersGridRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersGridRowDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersGridRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersGridRowReadRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersGridRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersGridRowUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersGridRowUpdate(ctx context.Context, rowId string, body VolunteersGridRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersGridRowUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersRead(ctx context.Context, rowId string, params *VolunteersReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersReadRequest(c.Server, rowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersUpdate(ctx context.Context, rowId string, body VolunteersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersNestedList(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersNestedListRequest(c.Server, rowId, relationType, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersNestedChildrenExcludedList(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersNestedChildrenExcludedListRequest(c.Server, rowId, relationType, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersNestedRemove(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersNestedRemoveRequest(c.Server, rowId, relationType, columnName, refRowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolunteersNestedAdd(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *VolunteersNestedAddParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolunteersNestedAddRequest(c.Server, rowId, relationType, columnName, refRowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsDbTableRowList(ctx context.Context, params *CommunicationoneventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsDbTableRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsCreate(ctx context.Context, body CommunicationoneventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsCount(ctx context.Context, params *CommunicationoneventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsCsvExport(ctx context.Context, pType string, params *CommunicationoneventsCsvExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsCsvExportRequest(c.Server, pType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsDbTableRowFindOne(ctx context.Context, params *CommunicationoneventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsDbTableRowFindOneRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsGroupby(ctx context.Context, params *CommunicationoneventsGroupbyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsGroupbyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationOnEventsCommunicationOnEventsRowList(ctx context.Context, params *CommunicationOnEventsCommunicationOnEventsRowListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationOnEventsCommunicationOnEventsRowListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationOnEventsCommunicationOnEventsRowCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationOnEventsCommunicationOnEventsRowCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationOnEventsCommunicationOnEventsRowCreate(ctx context.Context, body CommunicationOnEventsCommunicationOnEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationOnEventsCommunicationOnEventsRowCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationOnEventsCommunicationOnEventsRowCount(ctx context.Context, params *CommunicationOnEventsCommunicationOnEventsRowCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationOnEventsCommunicationOnEventsRowCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationOnEventsCommunicationOnEventsRowExport(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationOnEventsCommunicationOnEventsRowExportRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationOnEventsCommunicationOnEventsRowDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationOnEventsCommunicationOnEventsRowDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationOnEventsCommunicationOnEventsRowRead(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationOnEventsCommunicationOnEventsRowReadRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationOnEventsCommunicationOnEventsRowUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationOnEventsCommunicationOnEventsRowUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationOnEventsCommunicationOnEventsRowUpdate(ctx context.Context, rowId string, body CommunicationOnEventsCommunicationOnEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationOnEventsCommunicationOnEventsRowUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsDelete(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsDeleteRequest(c.Server, rowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsRead(ctx context.Context, rowId string, params *CommunicationoneventsReadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsReadRequest(c.Server, rowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsUpdateWithBody(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsUpdateRequestWithBody(c.Server, rowId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsUpdate(ctx context.Context, rowId string, body CommunicationoneventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsUpdateRequest(c.Server, rowId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsNestedList(ctx context.Context, rowId string, relationType string, columnName string, params *CommunicationoneventsNestedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsNestedListRequest(c.Server, rowId, relationType, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsNestedChildrenExcludedList(ctx context.Context, rowId string, relationType string, columnName string, params *CommunicationoneventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsNestedChildrenExcludedListRequest(c.Server, rowId, relationType, columnName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsNestedRemove(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsNestedRemoveRequest(c.Server, rowId, relationType, columnName, refRowId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommunicationoneventsNestedAdd(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *CommunicationoneventsNestedAddParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommunicationoneventsNestedAddRequest(c.Server, rowId, relationType, columnName, refRowId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewEventsBulkDeleteRequest calls the generic EventsBulkDelete builder with application/json body
func NewEventsBulkDeleteRequest(server string, body EventsBulkDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsBulkDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewEventsBulkDeleteRequestWithBody generates requests for EventsBulkDelete with any type of body
func NewEventsBulkDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/Events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsBulkUpdateRequest calls the generic EventsBulkUpdate builder with application/json body
func NewEventsBulkUpdateRequest(server string, body EventsBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewEventsBulkUpdateRequestWithBody generates requests for EventsBulkUpdate with any type of body
func NewEventsBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/Events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsBulkCreateRequest calls the generic EventsBulkCreate builder with application/json body
func NewEventsBulkCreateRequest(server string, body EventsBulkCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsBulkCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEventsBulkCreateRequestWithBody generates requests for EventsBulkCreate with any type of body
func NewEventsBulkCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/Events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsBulkDeleteAllRequest generates requests for EventsBulkDeleteAll
func NewEventsBulkDeleteAllRequest(server string, params *EventsBulkDeleteAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/Events/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsBulkUpdateAllRequest calls the generic EventsBulkUpdateAll builder with application/json body
func NewEventsBulkUpdateAllRequest(server string, params *EventsBulkUpdateAllParams, body EventsBulkUpdateAllJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsBulkUpdateAllRequestWithBody(server, params, "application/json", bodyReader)
}

// NewEventsBulkUpdateAllRequestWithBody generates requests for EventsBulkUpdateAll with any type of body
func NewEventsBulkUpdateAllRequestWithBody(server string, params *EventsBulkUpdateAllParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/Events/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersBulkDeleteRequest calls the generic VolunteersBulkDelete builder with application/json body
func NewVolunteersBulkDeleteRequest(server string, body VolunteersBulkDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersBulkDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewVolunteersBulkDeleteRequestWithBody generates requests for VolunteersBulkDelete with any type of body
func NewVolunteersBulkDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersBulkUpdateRequest calls the generic VolunteersBulkUpdate builder with application/json body
func NewVolunteersBulkUpdateRequest(server string, body VolunteersBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewVolunteersBulkUpdateRequestWithBody generates requests for VolunteersBulkUpdate with any type of body
func NewVolunteersBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersBulkCreateRequest calls the generic VolunteersBulkCreate builder with application/json body
func NewVolunteersBulkCreateRequest(server string, body VolunteersBulkCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersBulkCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewVolunteersBulkCreateRequestWithBody generates requests for VolunteersBulkCreate with any type of body
func NewVolunteersBulkCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersBulkDeleteAllRequest generates requests for VolunteersBulkDeleteAll
func NewVolunteersBulkDeleteAllRequest(server string, params *VolunteersBulkDeleteAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/Volunteers/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersBulkUpdateAllRequest calls the generic VolunteersBulkUpdateAll builder with application/json body
func NewVolunteersBulkUpdateAllRequest(server string, params *VolunteersBulkUpdateAllParams, body VolunteersBulkUpdateAllJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersBulkUpdateAllRequestWithBody(server, params, "application/json", bodyReader)
}

// NewVolunteersBulkUpdateAllRequestWithBody generates requests for VolunteersBulkUpdateAll with any type of body
func NewVolunteersBulkUpdateAllRequestWithBody(server string, params *VolunteersBulkUpdateAllParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/Volunteers/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommunicationoneventsBulkDeleteRequest calls the generic CommunicationoneventsBulkDelete builder with application/json body
func NewCommunicationoneventsBulkDeleteRequest(server string, body CommunicationoneventsBulkDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommunicationoneventsBulkDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewCommunicationoneventsBulkDeleteRequestWithBody generates requests for CommunicationoneventsBulkDelete with any type of body
func NewCommunicationoneventsBulkDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/communicationOnEvents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommunicationoneventsBulkUpdateRequest calls the generic CommunicationoneventsBulkUpdate builder with application/json body
func NewCommunicationoneventsBulkUpdateRequest(server string, body CommunicationoneventsBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommunicationoneventsBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewCommunicationoneventsBulkUpdateRequestWithBody generates requests for CommunicationoneventsBulkUpdate with any type of body
func NewCommunicationoneventsBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/communicationOnEvents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommunicationoneventsBulkCreateRequest calls the generic CommunicationoneventsBulkCreate builder with application/json body
func NewCommunicationoneventsBulkCreateRequest(server string, body CommunicationoneventsBulkCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommunicationoneventsBulkCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCommunicationoneventsBulkCreateRequestWithBody generates requests for CommunicationoneventsBulkCreate with any type of body
func NewCommunicationoneventsBulkCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/communicationOnEvents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommunicationoneventsBulkDeleteAllRequest generates requests for CommunicationoneventsBulkDeleteAll
func NewCommunicationoneventsBulkDeleteAllRequest(server string, params *CommunicationoneventsBulkDeleteAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/communicationOnEvents/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationoneventsBulkUpdateAllRequest calls the generic CommunicationoneventsBulkUpdateAll builder with application/json body
func NewCommunicationoneventsBulkUpdateAllRequest(server string, params *CommunicationoneventsBulkUpdateAllParams, body CommunicationoneventsBulkUpdateAllJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommunicationoneventsBulkUpdateAllRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommunicationoneventsBulkUpdateAllRequestWithBody generates requests for CommunicationoneventsBulkUpdateAll with any type of body
func NewCommunicationoneventsBulkUpdateAllRequestWithBody(server string, params *CommunicationoneventsBulkUpdateAllParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/bulk/v1/p1d5e0hzwz1r39a/communicationOnEvents/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsDbTableRowListRequest generates requests for EventsDbTableRowList
func NewEventsDbTableRowListRequest(server string, params *EventsDbTableRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsWhere != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][where]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsWhere); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsOffset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsOffset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsSort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsSort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedCommunicationOnEventsFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[communicationOnEvents][fields]", runtime.ParamLocationQuery, *params.NestedCommunicationOnEventsFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsCreateRequest calls the generic EventsCreate builder with application/json body
func NewEventsCreateRequest(server string, body EventsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEventsCreateRequestWithBody generates requests for EventsCreate with any type of body
func NewEventsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsCountRequest generates requests for EventsCount
func NewEventsCountRequest(server string, params *EventsCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsCsvExportRequest generates requests for EventsCsvExport
func NewEventsCsvExportRequest(server string, pType string, params *EventsCsvExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsDbTableRowFindOneRequest generates requests for EventsDbTableRowFindOne
func NewEventsDbTableRowFindOneRequest(server string, params *EventsDbTableRowFindOneParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/find-one")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsGroupbyRequest generates requests for EventsGroupby
func NewEventsGroupbyRequest(server string, params *EventsGroupbyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/groupby")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ColumnName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column_name", runtime.ParamLocationQuery, *params.ColumnName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowListRequest generates requests for EventsEventsRowList
func NewEventsEventsRowListRequest(server string, params *EventsEventsRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/views/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsWhere != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][where]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsWhere); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsOffset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsOffset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsSort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsSort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedCommunicationOnEventsFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[communicationOnEvents][fields]", runtime.ParamLocationQuery, *params.NestedCommunicationOnEventsFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowCreateRequest calls the generic EventsEventsRowCreate builder with application/json body
func NewEventsEventsRowCreateRequest(server string, body EventsEventsRowCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsEventsRowCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEventsEventsRowCreateRequestWithBody generates requests for EventsEventsRowCreate with any type of body
func NewEventsEventsRowCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/views/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsEventsRowCountRequest generates requests for EventsEventsRowCount
func NewEventsEventsRowCountRequest(server string, params *EventsEventsRowCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/views/events/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowExportRequest generates requests for EventsEventsRowExport
func NewEventsEventsRowExportRequest(server string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/views/events/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowDeleteRequest generates requests for EventsEventsRowDelete
func NewEventsEventsRowDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/views/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowReadRequest generates requests for EventsEventsRowRead
func NewEventsEventsRowReadRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/views/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsEventsRowUpdateRequest calls the generic EventsEventsRowUpdate builder with application/json body
func NewEventsEventsRowUpdateRequest(server string, rowId string, body EventsEventsRowUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsEventsRowUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewEventsEventsRowUpdateRequestWithBody generates requests for EventsEventsRowUpdate with any type of body
func NewEventsEventsRowUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/views/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsDeleteRequest generates requests for EventsDelete
func NewEventsDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsReadRequest generates requests for EventsRead
func NewEventsReadRequest(server string, rowId string, params *EventsReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsUpdateRequest calls the generic EventsUpdate builder with application/json body
func NewEventsUpdateRequest(server string, rowId string, body EventsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewEventsUpdateRequestWithBody generates requests for EventsUpdate with any type of body
func NewEventsUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEventsNestedListRequest generates requests for EventsNestedList
func NewEventsNestedListRequest(server string, rowId string, relationType string, columnName string, params *EventsNestedListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsNestedChildrenExcludedListRequest generates requests for EventsNestedChildrenExcludedList
func NewEventsNestedChildrenExcludedListRequest(server string, rowId string, relationType string, columnName string, params *EventsNestedChildrenExcludedListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/%s/%s/%s/exclude", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsNestedRemoveRequest generates requests for EventsNestedRemove
func NewEventsNestedRemoveRequest(server string, rowId string, relationType string, columnName string, refRowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "refRowId", runtime.ParamLocationPath, refRowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsNestedAddRequest generates requests for EventsNestedAdd
func NewEventsNestedAddRequest(server string, rowId string, relationType string, columnName string, refRowId string, params *EventsNestedAddParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "refRowId", runtime.ParamLocationPath, refRowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Events/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersDbTableRowListRequest generates requests for VolunteersDbTableRowList
func NewVolunteersDbTableRowListRequest(server string, params *VolunteersDbTableRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsWhere != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][where]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsWhere); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsOffset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsOffset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsSort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsSort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersCreateRequest calls the generic VolunteersCreate builder with application/json body
func NewVolunteersCreateRequest(server string, body VolunteersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewVolunteersCreateRequestWithBody generates requests for VolunteersCreate with any type of body
func NewVolunteersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersCountRequest generates requests for VolunteersCount
func NewVolunteersCountRequest(server string, params *VolunteersCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersCsvExportRequest generates requests for VolunteersCsvExport
func NewVolunteersCsvExportRequest(server string, pType string, params *VolunteersCsvExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersDbTableRowFindOneRequest generates requests for VolunteersDbTableRowFindOne
func NewVolunteersDbTableRowFindOneRequest(server string, params *VolunteersDbTableRowFindOneParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/find-one")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersGroupbyRequest generates requests for VolunteersGroupby
func NewVolunteersGroupbyRequest(server string, params *VolunteersGroupbyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/groupby")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ColumnName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column_name", runtime.ParamLocationQuery, *params.ColumnName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersGridRowListRequest generates requests for VolunteersGridRowList
func NewVolunteersGridRowListRequest(server string, params *VolunteersGridRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/views/grid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsWhere != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][where]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsWhere); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsOffset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][offset]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsOffset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][limit]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][fields]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NestedNcCurgNcM2mW5i3lbdpwrsSort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nested[nc_curg___nc_m2m_w5i3lbdpwrs][sort]", runtime.ParamLocationQuery, *params.NestedNcCurgNcM2mW5i3lbdpwrsSort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersGridRowCreateRequest calls the generic VolunteersGridRowCreate builder with application/json body
func NewVolunteersGridRowCreateRequest(server string, body VolunteersGridRowCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersGridRowCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewVolunteersGridRowCreateRequestWithBody generates requests for VolunteersGridRowCreate with any type of body
func NewVolunteersGridRowCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/views/grid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersGridRowCountRequest generates requests for VolunteersGridRowCount
func NewVolunteersGridRowCountRequest(server string, params *VolunteersGridRowCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/views/grid/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersGridRowExportRequest generates requests for VolunteersGridRowExport
func NewVolunteersGridRowExportRequest(server string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/views/grid/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersGridRowDeleteRequest generates requests for VolunteersGridRowDelete
func NewVolunteersGridRowDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/views/grid/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersGridRowReadRequest generates requests for VolunteersGridRowRead
func NewVolunteersGridRowReadRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/views/grid/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersGridRowUpdateRequest calls the generic VolunteersGridRowUpdate builder with application/json body
func NewVolunteersGridRowUpdateRequest(server string, rowId string, body VolunteersGridRowUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersGridRowUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewVolunteersGridRowUpdateRequestWithBody generates requests for VolunteersGridRowUpdate with any type of body
func NewVolunteersGridRowUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/views/grid/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersDeleteRequest generates requests for VolunteersDelete
func NewVolunteersDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersReadRequest generates requests for VolunteersRead
func NewVolunteersReadRequest(server string, rowId string, params *VolunteersReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersUpdateRequest calls the generic VolunteersUpdate builder with application/json body
func NewVolunteersUpdateRequest(server string, rowId string, body VolunteersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolunteersUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewVolunteersUpdateRequestWithBody generates requests for VolunteersUpdate with any type of body
func NewVolunteersUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolunteersNestedListRequest generates requests for VolunteersNestedList
func NewVolunteersNestedListRequest(server string, rowId string, relationType string, columnName string, params *VolunteersNestedListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersNestedChildrenExcludedListRequest generates requests for VolunteersNestedChildrenExcludedList
func NewVolunteersNestedChildrenExcludedListRequest(server string, rowId string, relationType string, columnName string, params *VolunteersNestedChildrenExcludedListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/%s/%s/%s/exclude", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersNestedRemoveRequest generates requests for VolunteersNestedRemove
func NewVolunteersNestedRemoveRequest(server string, rowId string, relationType string, columnName string, refRowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "refRowId", runtime.ParamLocationPath, refRowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolunteersNestedAddRequest generates requests for VolunteersNestedAdd
func NewVolunteersNestedAddRequest(server string, rowId string, relationType string, columnName string, refRowId string, params *VolunteersNestedAddParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "refRowId", runtime.ParamLocationPath, refRowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/Volunteers/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationoneventsDbTableRowListRequest generates requests for CommunicationoneventsDbTableRowList
func NewCommunicationoneventsDbTableRowListRequest(server string, params *CommunicationoneventsDbTableRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationoneventsCreateRequest calls the generic CommunicationoneventsCreate builder with application/json body
func NewCommunicationoneventsCreateRequest(server string, body CommunicationoneventsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommunicationoneventsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCommunicationoneventsCreateRequestWithBody generates requests for CommunicationoneventsCreate with any type of body
func NewCommunicationoneventsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommunicationoneventsCountRequest generates requests for CommunicationoneventsCount
func NewCommunicationoneventsCountRequest(server string, params *CommunicationoneventsCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationoneventsCsvExportRequest generates requests for CommunicationoneventsCsvExport
func NewCommunicationoneventsCsvExportRequest(server string, pType string, params *CommunicationoneventsCsvExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationoneventsDbTableRowFindOneRequest generates requests for CommunicationoneventsDbTableRowFindOne
func NewCommunicationoneventsDbTableRowFindOneRequest(server string, params *CommunicationoneventsDbTableRowFindOneParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/find-one")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationoneventsGroupbyRequest generates requests for CommunicationoneventsGroupby
func NewCommunicationoneventsGroupbyRequest(server string, params *CommunicationoneventsGroupbyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/groupby")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ColumnName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column_name", runtime.ParamLocationQuery, *params.ColumnName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationOnEventsCommunicationOnEventsRowListRequest generates requests for CommunicationOnEventsCommunicationOnEventsRowList
func NewCommunicationOnEventsCommunicationOnEventsRowListRequest(server string, params *CommunicationOnEventsCommunicationOnEventsRowListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/views/communicationOnEvents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationOnEventsCommunicationOnEventsRowCreateRequest calls the generic CommunicationOnEventsCommunicationOnEventsRowCreate builder with application/json body
func NewCommunicationOnEventsCommunicationOnEventsRowCreateRequest(server string, body CommunicationOnEventsCommunicationOnEventsRowCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommunicationOnEventsCommunicationOnEventsRowCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCommunicationOnEventsCommunicationOnEventsRowCreateRequestWithBody generates requests for CommunicationOnEventsCommunicationOnEventsRowCreate with any type of body
func NewCommunicationOnEventsCommunicationOnEventsRowCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/views/communicationOnEvents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommunicationOnEventsCommunicationOnEventsRowCountRequest generates requests for CommunicationOnEventsCommunicationOnEventsRowCount
func NewCommunicationOnEventsCommunicationOnEventsRowCountRequest(server string, params *CommunicationOnEventsCommunicationOnEventsRowCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/views/communicationOnEvents/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Where != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "where", runtime.ParamLocationQuery, *params.Where); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationOnEventsCommunicationOnEventsRowExportRequest generates requests for CommunicationOnEventsCommunicationOnEventsRowExport
func NewCommunicationOnEventsCommunicationOnEventsRowExportRequest(server string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/views/communicationOnEvents/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationOnEventsCommunicationOnEventsRowDeleteRequest generates requests for CommunicationOnEventsCommunicationOnEventsRowDelete
func NewCommunicationOnEventsCommunicationOnEventsRowDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/views/communicationOnEvents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationOnEventsCommunicationOnEventsRowReadRequest generates requests for CommunicationOnEventsCommunicationOnEventsRowRead
func NewCommunicationOnEventsCommunicationOnEventsRowReadRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/views/communicationOnEvents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationOnEventsCommunicationOnEventsRowUpdateRequest calls the generic CommunicationOnEventsCommunicationOnEventsRowUpdate builder with application/json body
func NewCommunicationOnEventsCommunicationOnEventsRowUpdateRequest(server string, rowId string, body CommunicationOnEventsCommunicationOnEventsRowUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommunicationOnEventsCommunicationOnEventsRowUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewCommunicationOnEventsCommunicationOnEventsRowUpdateRequestWithBody generates requests for CommunicationOnEventsCommunicationOnEventsRowUpdate with any type of body
func NewCommunicationOnEventsCommunicationOnEventsRowUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/views/communicationOnEvents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommunicationoneventsDeleteRequest generates requests for CommunicationoneventsDelete
func NewCommunicationoneventsDeleteRequest(server string, rowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationoneventsReadRequest generates requests for CommunicationoneventsRead
func NewCommunicationoneventsReadRequest(server string, rowId string, params *CommunicationoneventsReadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationoneventsUpdateRequest calls the generic CommunicationoneventsUpdate builder with application/json body
func NewCommunicationoneventsUpdateRequest(server string, rowId string, body CommunicationoneventsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommunicationoneventsUpdateRequestWithBody(server, rowId, "application/json", bodyReader)
}

// NewCommunicationoneventsUpdateRequestWithBody generates requests for CommunicationoneventsUpdate with any type of body
func NewCommunicationoneventsUpdateRequestWithBody(server string, rowId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommunicationoneventsNestedListRequest generates requests for CommunicationoneventsNestedList
func NewCommunicationoneventsNestedListRequest(server string, rowId string, relationType string, columnName string, params *CommunicationoneventsNestedListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationoneventsNestedChildrenExcludedListRequest generates requests for CommunicationoneventsNestedChildrenExcludedList
func NewCommunicationoneventsNestedChildrenExcludedListRequest(server string, rowId string, relationType string, columnName string, params *CommunicationoneventsNestedChildrenExcludedListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/%s/%s/%s/exclude", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationoneventsNestedRemoveRequest generates requests for CommunicationoneventsNestedRemove
func NewCommunicationoneventsNestedRemoveRequest(server string, rowId string, relationType string, columnName string, refRowId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "refRowId", runtime.ParamLocationPath, refRowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommunicationoneventsNestedAddRequest generates requests for CommunicationoneventsNestedAdd
func NewCommunicationoneventsNestedAddRequest(server string, rowId string, relationType string, columnName string, refRowId string, params *CommunicationoneventsNestedAddParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "rowId", runtime.ParamLocationPath, rowId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "relationType", runtime.ParamLocationPath, relationType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "columnName", runtime.ParamLocationPath, columnName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "refRowId", runtime.ParamLocationPath, refRowId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/db/data/v1/p1d5e0hzwz1r39a/communicationOnEvents/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Shuffle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shuffle", runtime.ParamLocationQuery, *params.Shuffle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// EventsBulkDeleteWithBodyWithResponse request with any body
	EventsBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkDeleteResponse, error)

	EventsBulkDeleteWithResponse(ctx context.Context, body EventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkDeleteResponse, error)

	// EventsBulkUpdateWithBodyWithResponse request with any body
	EventsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkUpdateResponse, error)

	EventsBulkUpdateWithResponse(ctx context.Context, body EventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkUpdateResponse, error)

	// EventsBulkCreateWithBodyWithResponse request with any body
	EventsBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkCreateResponse, error)

	EventsBulkCreateWithResponse(ctx context.Context, body EventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkCreateResponse, error)

	// EventsBulkDeleteAllWithResponse request
	EventsBulkDeleteAllWithResponse(ctx context.Context, params *EventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*EventsBulkDeleteAllResponse, error)

	// EventsBulkUpdateAllWithBodyWithResponse request with any body
	EventsBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *EventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkUpdateAllResponse, error)

	EventsBulkUpdateAllWithResponse(ctx context.Context, params *EventsBulkUpdateAllParams, body EventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkUpdateAllResponse, error)

	// VolunteersBulkDeleteWithBodyWithResponse request with any body
	VolunteersBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteResponse, error)

	VolunteersBulkDeleteWithResponse(ctx context.Context, body VolunteersBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteResponse, error)

	// VolunteersBulkUpdateWithBodyWithResponse request with any body
	VolunteersBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateResponse, error)

	VolunteersBulkUpdateWithResponse(ctx context.Context, body VolunteersBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateResponse, error)

	// VolunteersBulkCreateWithBodyWithResponse request with any body
	VolunteersBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkCreateResponse, error)

	VolunteersBulkCreateWithResponse(ctx context.Context, body VolunteersBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkCreateResponse, error)

	// VolunteersBulkDeleteAllWithResponse request
	VolunteersBulkDeleteAllWithResponse(ctx context.Context, params *VolunteersBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteAllResponse, error)

	// VolunteersBulkUpdateAllWithBodyWithResponse request with any body
	VolunteersBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *VolunteersBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateAllResponse, error)

	VolunteersBulkUpdateAllWithResponse(ctx context.Context, params *VolunteersBulkUpdateAllParams, body VolunteersBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateAllResponse, error)

	// CommunicationoneventsBulkDeleteWithBodyWithResponse request with any body
	CommunicationoneventsBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkDeleteResponse, error)

	CommunicationoneventsBulkDeleteWithResponse(ctx context.Context, body CommunicationoneventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkDeleteResponse, error)

	// CommunicationoneventsBulkUpdateWithBodyWithResponse request with any body
	CommunicationoneventsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkUpdateResponse, error)

	CommunicationoneventsBulkUpdateWithResponse(ctx context.Context, body CommunicationoneventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkUpdateResponse, error)

	// CommunicationoneventsBulkCreateWithBodyWithResponse request with any body
	CommunicationoneventsBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkCreateResponse, error)

	CommunicationoneventsBulkCreateWithResponse(ctx context.Context, body CommunicationoneventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkCreateResponse, error)

	// CommunicationoneventsBulkDeleteAllWithResponse request
	CommunicationoneventsBulkDeleteAllWithResponse(ctx context.Context, params *CommunicationoneventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkDeleteAllResponse, error)

	// CommunicationoneventsBulkUpdateAllWithBodyWithResponse request with any body
	CommunicationoneventsBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *CommunicationoneventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkUpdateAllResponse, error)

	CommunicationoneventsBulkUpdateAllWithResponse(ctx context.Context, params *CommunicationoneventsBulkUpdateAllParams, body CommunicationoneventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkUpdateAllResponse, error)

	// EventsDbTableRowListWithResponse request
	EventsDbTableRowListWithResponse(ctx context.Context, params *EventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*EventsDbTableRowListResponse, error)

	// EventsCreateWithBodyWithResponse request with any body
	EventsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsCreateResponse, error)

	EventsCreateWithResponse(ctx context.Context, body EventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsCreateResponse, error)

	// EventsCountWithResponse request
	EventsCountWithResponse(ctx context.Context, params *EventsCountParams, reqEditors ...RequestEditorFn) (*EventsCountResponse, error)

	// EventsCsvExportWithResponse request
	EventsCsvExportWithResponse(ctx context.Context, pType string, params *EventsCsvExportParams, reqEditors ...RequestEditorFn) (*EventsCsvExportResponse, error)

	// EventsDbTableRowFindOneWithResponse request
	EventsDbTableRowFindOneWithResponse(ctx context.Context, params *EventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*EventsDbTableRowFindOneResponse, error)

	// EventsGroupbyWithResponse request
	EventsGroupbyWithResponse(ctx context.Context, params *EventsGroupbyParams, reqEditors ...RequestEditorFn) (*EventsGroupbyResponse, error)

	// EventsEventsRowListWithResponse request
	EventsEventsRowListWithResponse(ctx context.Context, params *EventsEventsRowListParams, reqEditors ...RequestEditorFn) (*EventsEventsRowListResponse, error)

	// EventsEventsRowCreateWithBodyWithResponse request with any body
	EventsEventsRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsEventsRowCreateResponse, error)

	EventsEventsRowCreateWithResponse(ctx context.Context, body EventsEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsEventsRowCreateResponse, error)

	// EventsEventsRowCountWithResponse request
	EventsEventsRowCountWithResponse(ctx context.Context, params *EventsEventsRowCountParams, reqEditors ...RequestEditorFn) (*EventsEventsRowCountResponse, error)

	// EventsEventsRowExportWithResponse request
	EventsEventsRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*EventsEventsRowExportResponse, error)

	// EventsEventsRowDeleteWithResponse request
	EventsEventsRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsEventsRowDeleteResponse, error)

	// EventsEventsRowReadWithResponse request
	EventsEventsRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsEventsRowReadResponse, error)

	// EventsEventsRowUpdateWithBodyWithResponse request with any body
	EventsEventsRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsEventsRowUpdateResponse, error)

	EventsEventsRowUpdateWithResponse(ctx context.Context, rowId string, body EventsEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsEventsRowUpdateResponse, error)

	// EventsDeleteWithResponse request
	EventsDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsDeleteResponse, error)

	// EventsReadWithResponse request
	EventsReadWithResponse(ctx context.Context, rowId string, params *EventsReadParams, reqEditors ...RequestEditorFn) (*EventsReadResponse, error)

	// EventsUpdateWithBodyWithResponse request with any body
	EventsUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsUpdateResponse, error)

	EventsUpdateWithResponse(ctx context.Context, rowId string, body EventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsUpdateResponse, error)

	// EventsNestedListWithResponse request
	EventsNestedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedListParams, reqEditors ...RequestEditorFn) (*EventsNestedListResponse, error)

	// EventsNestedChildrenExcludedListWithResponse request
	EventsNestedChildrenExcludedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*EventsNestedChildrenExcludedListResponse, error)

	// EventsNestedRemoveWithResponse request
	EventsNestedRemoveWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*EventsNestedRemoveResponse, error)

	// EventsNestedAddWithResponse request
	EventsNestedAddWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *EventsNestedAddParams, reqEditors ...RequestEditorFn) (*EventsNestedAddResponse, error)

	// VolunteersDbTableRowListWithResponse request
	VolunteersDbTableRowListWithResponse(ctx context.Context, params *VolunteersDbTableRowListParams, reqEditors ...RequestEditorFn) (*VolunteersDbTableRowListResponse, error)

	// VolunteersCreateWithBodyWithResponse request with any body
	VolunteersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersCreateResponse, error)

	VolunteersCreateWithResponse(ctx context.Context, body VolunteersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersCreateResponse, error)

	// VolunteersCountWithResponse request
	VolunteersCountWithResponse(ctx context.Context, params *VolunteersCountParams, reqEditors ...RequestEditorFn) (*VolunteersCountResponse, error)

	// VolunteersCsvExportWithResponse request
	VolunteersCsvExportWithResponse(ctx context.Context, pType string, params *VolunteersCsvExportParams, reqEditors ...RequestEditorFn) (*VolunteersCsvExportResponse, error)

	// VolunteersDbTableRowFindOneWithResponse request
	VolunteersDbTableRowFindOneWithResponse(ctx context.Context, params *VolunteersDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*VolunteersDbTableRowFindOneResponse, error)

	// VolunteersGroupbyWithResponse request
	VolunteersGroupbyWithResponse(ctx context.Context, params *VolunteersGroupbyParams, reqEditors ...RequestEditorFn) (*VolunteersGroupbyResponse, error)

	// VolunteersGridRowListWithResponse request
	VolunteersGridRowListWithResponse(ctx context.Context, params *VolunteersGridRowListParams, reqEditors ...RequestEditorFn) (*VolunteersGridRowListResponse, error)

	// VolunteersGridRowCreateWithBodyWithResponse request with any body
	VolunteersGridRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersGridRowCreateResponse, error)

	VolunteersGridRowCreateWithResponse(ctx context.Context, body VolunteersGridRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersGridRowCreateResponse, error)

	// VolunteersGridRowCountWithResponse request
	VolunteersGridRowCountWithResponse(ctx context.Context, params *VolunteersGridRowCountParams, reqEditors ...RequestEditorFn) (*VolunteersGridRowCountResponse, error)

	// VolunteersGridRowExportWithResponse request
	VolunteersGridRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*VolunteersGridRowExportResponse, error)

	// VolunteersGridRowDeleteWithResponse request
	VolunteersGridRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersGridRowDeleteResponse, error)

	// VolunteersGridRowReadWithResponse request
	VolunteersGridRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersGridRowReadResponse, error)

	// VolunteersGridRowUpdateWithBodyWithResponse request with any body
	VolunteersGridRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersGridRowUpdateResponse, error)

	VolunteersGridRowUpdateWithResponse(ctx context.Context, rowId string, body VolunteersGridRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersGridRowUpdateResponse, error)

	// VolunteersDeleteWithResponse request
	VolunteersDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersDeleteResponse, error)

	// VolunteersReadWithResponse request
	VolunteersReadWithResponse(ctx context.Context, rowId string, params *VolunteersReadParams, reqEditors ...RequestEditorFn) (*VolunteersReadResponse, error)

	// VolunteersUpdateWithBodyWithResponse request with any body
	VolunteersUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersUpdateResponse, error)

	VolunteersUpdateWithResponse(ctx context.Context, rowId string, body VolunteersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersUpdateResponse, error)

	// VolunteersNestedListWithResponse request
	VolunteersNestedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedListParams, reqEditors ...RequestEditorFn) (*VolunteersNestedListResponse, error)

	// VolunteersNestedChildrenExcludedListWithResponse request
	VolunteersNestedChildrenExcludedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*VolunteersNestedChildrenExcludedListResponse, error)

	// VolunteersNestedRemoveWithResponse request
	VolunteersNestedRemoveWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*VolunteersNestedRemoveResponse, error)

	// VolunteersNestedAddWithResponse request
	VolunteersNestedAddWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *VolunteersNestedAddParams, reqEditors ...RequestEditorFn) (*VolunteersNestedAddResponse, error)

	// CommunicationoneventsDbTableRowListWithResponse request
	CommunicationoneventsDbTableRowListWithResponse(ctx context.Context, params *CommunicationoneventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsDbTableRowListResponse, error)

	// CommunicationoneventsCreateWithBodyWithResponse request with any body
	CommunicationoneventsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsCreateResponse, error)

	CommunicationoneventsCreateWithResponse(ctx context.Context, body CommunicationoneventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsCreateResponse, error)

	// CommunicationoneventsCountWithResponse request
	CommunicationoneventsCountWithResponse(ctx context.Context, params *CommunicationoneventsCountParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsCountResponse, error)

	// CommunicationoneventsCsvExportWithResponse request
	CommunicationoneventsCsvExportWithResponse(ctx context.Context, pType string, params *CommunicationoneventsCsvExportParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsCsvExportResponse, error)

	// CommunicationoneventsDbTableRowFindOneWithResponse request
	CommunicationoneventsDbTableRowFindOneWithResponse(ctx context.Context, params *CommunicationoneventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsDbTableRowFindOneResponse, error)

	// CommunicationoneventsGroupbyWithResponse request
	CommunicationoneventsGroupbyWithResponse(ctx context.Context, params *CommunicationoneventsGroupbyParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsGroupbyResponse, error)

	// CommunicationOnEventsCommunicationOnEventsRowListWithResponse request
	CommunicationOnEventsCommunicationOnEventsRowListWithResponse(ctx context.Context, params *CommunicationOnEventsCommunicationOnEventsRowListParams, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowListResponse, error)

	// CommunicationOnEventsCommunicationOnEventsRowCreateWithBodyWithResponse request with any body
	CommunicationOnEventsCommunicationOnEventsRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowCreateResponse, error)

	CommunicationOnEventsCommunicationOnEventsRowCreateWithResponse(ctx context.Context, body CommunicationOnEventsCommunicationOnEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowCreateResponse, error)

	// CommunicationOnEventsCommunicationOnEventsRowCountWithResponse request
	CommunicationOnEventsCommunicationOnEventsRowCountWithResponse(ctx context.Context, params *CommunicationOnEventsCommunicationOnEventsRowCountParams, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowCountResponse, error)

	// CommunicationOnEventsCommunicationOnEventsRowExportWithResponse request
	CommunicationOnEventsCommunicationOnEventsRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowExportResponse, error)

	// CommunicationOnEventsCommunicationOnEventsRowDeleteWithResponse request
	CommunicationOnEventsCommunicationOnEventsRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowDeleteResponse, error)

	// CommunicationOnEventsCommunicationOnEventsRowReadWithResponse request
	CommunicationOnEventsCommunicationOnEventsRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowReadResponse, error)

	// CommunicationOnEventsCommunicationOnEventsRowUpdateWithBodyWithResponse request with any body
	CommunicationOnEventsCommunicationOnEventsRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowUpdateResponse, error)

	CommunicationOnEventsCommunicationOnEventsRowUpdateWithResponse(ctx context.Context, rowId string, body CommunicationOnEventsCommunicationOnEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowUpdateResponse, error)

	// CommunicationoneventsDeleteWithResponse request
	CommunicationoneventsDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommunicationoneventsDeleteResponse, error)

	// CommunicationoneventsReadWithResponse request
	CommunicationoneventsReadWithResponse(ctx context.Context, rowId string, params *CommunicationoneventsReadParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsReadResponse, error)

	// CommunicationoneventsUpdateWithBodyWithResponse request with any body
	CommunicationoneventsUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsUpdateResponse, error)

	CommunicationoneventsUpdateWithResponse(ctx context.Context, rowId string, body CommunicationoneventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsUpdateResponse, error)

	// CommunicationoneventsNestedListWithResponse request
	CommunicationoneventsNestedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *CommunicationoneventsNestedListParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsNestedListResponse, error)

	// CommunicationoneventsNestedChildrenExcludedListWithResponse request
	CommunicationoneventsNestedChildrenExcludedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *CommunicationoneventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsNestedChildrenExcludedListResponse, error)

	// CommunicationoneventsNestedRemoveWithResponse request
	CommunicationoneventsNestedRemoveWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*CommunicationoneventsNestedRemoveResponse, error)

	// CommunicationoneventsNestedAddWithResponse request
	CommunicationoneventsNestedAddWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *CommunicationoneventsNestedAddParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsNestedAddResponse, error)
}

type EventsBulkDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsBulkDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsBulkDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsBulkCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsBulkCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsBulkCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsBulkDeleteAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsBulkDeleteAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsBulkDeleteAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsBulkUpdateAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsBulkUpdateAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsBulkUpdateAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersBulkDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersBulkDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersBulkDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersBulkCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersBulkCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersBulkCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersBulkDeleteAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersBulkDeleteAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersBulkDeleteAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersBulkUpdateAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersBulkUpdateAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersBulkUpdateAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsBulkDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsBulkDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsBulkDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsBulkCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsBulkCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsBulkCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsBulkDeleteAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsBulkDeleteAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsBulkDeleteAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsBulkUpdateAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsBulkUpdateAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsBulkUpdateAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsDbTableRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated        `json:"PageInfo,omitempty"`
		List     *[]EventsResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r EventsDbTableRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsDbTableRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventsResponse
}

// Status returns HTTPResponse.Status
func (r EventsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsCsvExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EventsCsvExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsCsvExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsDbTableRowFindOneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventsResponse
}

// Status returns HTTPResponse.Status
func (r EventsDbTableRowFindOneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsDbTableRowFindOneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsGroupbyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated `json:"PageInfo,omitempty"`
		List     *[]Groupby `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r EventsGroupbyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsGroupbyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated                  `json:"PageInfo,omitempty"`
		List     *[]EventseventsGridResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count *float32 `json:"count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventseventsGridResponse
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsEventsRowUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsEventsRowUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsEventsRowUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EventsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EventsResponse
}

// Status returns HTTPResponse.Status
func (r EventsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventsRequest
}

// Status returns HTTPResponse.Status
func (r EventsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsNestedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsNestedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsNestedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsNestedChildrenExcludedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsNestedChildrenExcludedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsNestedChildrenExcludedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsNestedRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsNestedRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsNestedRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsNestedAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r EventsNestedAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsNestedAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersDbTableRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated            `json:"PageInfo,omitempty"`
		List     *[]VolunteersResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r VolunteersDbTableRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersDbTableRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolunteersResponse
}

// Status returns HTTPResponse.Status
func (r VolunteersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersCsvExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VolunteersCsvExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersCsvExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersDbTableRowFindOneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolunteersResponse
}

// Status returns HTTPResponse.Status
func (r VolunteersDbTableRowFindOneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersDbTableRowFindOneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersGroupbyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated `json:"PageInfo,omitempty"`
		List     *[]Groupby `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r VolunteersGroupbyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersGroupbyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersGridRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated                    `json:"PageInfo,omitempty"`
		List     *[]VolunteersgridGridResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r VolunteersGridRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersGridRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersGridRowCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersGridRowCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersGridRowCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersGridRowCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count *float32 `json:"count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r VolunteersGridRowCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersGridRowCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersGridRowExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VolunteersGridRowExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersGridRowExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersGridRowDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VolunteersGridRowDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersGridRowDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersGridRowReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolunteersgridGridResponse
}

// Status returns HTTPResponse.Status
func (r VolunteersGridRowReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersGridRowReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersGridRowUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersGridRowUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersGridRowUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VolunteersDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VolunteersResponse
}

// Status returns HTTPResponse.Status
func (r VolunteersReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolunteersRequest
}

// Status returns HTTPResponse.Status
func (r VolunteersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersNestedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersNestedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersNestedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersNestedChildrenExcludedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersNestedChildrenExcludedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersNestedChildrenExcludedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersNestedRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersNestedRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersNestedRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolunteersNestedAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VolunteersNestedAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolunteersNestedAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsDbTableRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated                       `json:"PageInfo,omitempty"`
		List     *[]CommunicationOnEventsResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsDbTableRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsDbTableRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommunicationOnEventsResponse
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsCsvExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsCsvExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsCsvExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsDbTableRowFindOneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommunicationOnEventsResponse
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsDbTableRowFindOneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsDbTableRowFindOneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsGroupbyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated `json:"PageInfo,omitempty"`
		List     *[]Groupby `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsGroupbyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsGroupbyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationOnEventsCommunicationOnEventsRowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PageInfo *Paginated                                                `json:"PageInfo,omitempty"`
		List     *[]CommunicationOnEventscommunicationOnEventsGridResponse `json:"list,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommunicationOnEventsCommunicationOnEventsRowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationOnEventsCommunicationOnEventsRowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationOnEventsCommunicationOnEventsRowCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationOnEventsCommunicationOnEventsRowCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationOnEventsCommunicationOnEventsRowCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationOnEventsCommunicationOnEventsRowCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count *float32 `json:"count,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CommunicationOnEventsCommunicationOnEventsRowCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationOnEventsCommunicationOnEventsRowCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationOnEventsCommunicationOnEventsRowExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CommunicationOnEventsCommunicationOnEventsRowExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationOnEventsCommunicationOnEventsRowExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationOnEventsCommunicationOnEventsRowDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CommunicationOnEventsCommunicationOnEventsRowDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationOnEventsCommunicationOnEventsRowDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationOnEventsCommunicationOnEventsRowReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommunicationOnEventscommunicationOnEventsGridResponse
}

// Status returns HTTPResponse.Status
func (r CommunicationOnEventsCommunicationOnEventsRowReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationOnEventsCommunicationOnEventsRowReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationOnEventsCommunicationOnEventsRowUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationOnEventsCommunicationOnEventsRowUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationOnEventsCommunicationOnEventsRowUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CommunicationOnEventsResponse
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommunicationOnEventsRequest
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsNestedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsNestedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsNestedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsNestedChildrenExcludedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsNestedChildrenExcludedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsNestedChildrenExcludedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsNestedRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsNestedRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsNestedRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommunicationoneventsNestedAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r CommunicationoneventsNestedAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommunicationoneventsNestedAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// EventsBulkDeleteWithBodyWithResponse request with arbitrary body returning *EventsBulkDeleteResponse
func (c *ClientWithResponses) EventsBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkDeleteResponse, error) {
	rsp, err := c.EventsBulkDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkDeleteResponse(rsp)
}

func (c *ClientWithResponses) EventsBulkDeleteWithResponse(ctx context.Context, body EventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkDeleteResponse, error) {
	rsp, err := c.EventsBulkDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkDeleteResponse(rsp)
}

// EventsBulkUpdateWithBodyWithResponse request with arbitrary body returning *EventsBulkUpdateResponse
func (c *ClientWithResponses) EventsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkUpdateResponse, error) {
	rsp, err := c.EventsBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) EventsBulkUpdateWithResponse(ctx context.Context, body EventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkUpdateResponse, error) {
	rsp, err := c.EventsBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkUpdateResponse(rsp)
}

// EventsBulkCreateWithBodyWithResponse request with arbitrary body returning *EventsBulkCreateResponse
func (c *ClientWithResponses) EventsBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkCreateResponse, error) {
	rsp, err := c.EventsBulkCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkCreateResponse(rsp)
}

func (c *ClientWithResponses) EventsBulkCreateWithResponse(ctx context.Context, body EventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkCreateResponse, error) {
	rsp, err := c.EventsBulkCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkCreateResponse(rsp)
}

// EventsBulkDeleteAllWithResponse request returning *EventsBulkDeleteAllResponse
func (c *ClientWithResponses) EventsBulkDeleteAllWithResponse(ctx context.Context, params *EventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*EventsBulkDeleteAllResponse, error) {
	rsp, err := c.EventsBulkDeleteAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkDeleteAllResponse(rsp)
}

// EventsBulkUpdateAllWithBodyWithResponse request with arbitrary body returning *EventsBulkUpdateAllResponse
func (c *ClientWithResponses) EventsBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *EventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsBulkUpdateAllResponse, error) {
	rsp, err := c.EventsBulkUpdateAllWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkUpdateAllResponse(rsp)
}

func (c *ClientWithResponses) EventsBulkUpdateAllWithResponse(ctx context.Context, params *EventsBulkUpdateAllParams, body EventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsBulkUpdateAllResponse, error) {
	rsp, err := c.EventsBulkUpdateAll(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsBulkUpdateAllResponse(rsp)
}

// VolunteersBulkDeleteWithBodyWithResponse request with arbitrary body returning *VolunteersBulkDeleteResponse
func (c *ClientWithResponses) VolunteersBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteResponse, error) {
	rsp, err := c.VolunteersBulkDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkDeleteResponse(rsp)
}

func (c *ClientWithResponses) VolunteersBulkDeleteWithResponse(ctx context.Context, body VolunteersBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteResponse, error) {
	rsp, err := c.VolunteersBulkDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkDeleteResponse(rsp)
}

// VolunteersBulkUpdateWithBodyWithResponse request with arbitrary body returning *VolunteersBulkUpdateResponse
func (c *ClientWithResponses) VolunteersBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateResponse, error) {
	rsp, err := c.VolunteersBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersBulkUpdateWithResponse(ctx context.Context, body VolunteersBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateResponse, error) {
	rsp, err := c.VolunteersBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkUpdateResponse(rsp)
}

// VolunteersBulkCreateWithBodyWithResponse request with arbitrary body returning *VolunteersBulkCreateResponse
func (c *ClientWithResponses) VolunteersBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkCreateResponse, error) {
	rsp, err := c.VolunteersBulkCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkCreateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersBulkCreateWithResponse(ctx context.Context, body VolunteersBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkCreateResponse, error) {
	rsp, err := c.VolunteersBulkCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkCreateResponse(rsp)
}

// VolunteersBulkDeleteAllWithResponse request returning *VolunteersBulkDeleteAllResponse
func (c *ClientWithResponses) VolunteersBulkDeleteAllWithResponse(ctx context.Context, params *VolunteersBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*VolunteersBulkDeleteAllResponse, error) {
	rsp, err := c.VolunteersBulkDeleteAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkDeleteAllResponse(rsp)
}

// VolunteersBulkUpdateAllWithBodyWithResponse request with arbitrary body returning *VolunteersBulkUpdateAllResponse
func (c *ClientWithResponses) VolunteersBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *VolunteersBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateAllResponse, error) {
	rsp, err := c.VolunteersBulkUpdateAllWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkUpdateAllResponse(rsp)
}

func (c *ClientWithResponses) VolunteersBulkUpdateAllWithResponse(ctx context.Context, params *VolunteersBulkUpdateAllParams, body VolunteersBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersBulkUpdateAllResponse, error) {
	rsp, err := c.VolunteersBulkUpdateAll(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersBulkUpdateAllResponse(rsp)
}

// CommunicationoneventsBulkDeleteWithBodyWithResponse request with arbitrary body returning *CommunicationoneventsBulkDeleteResponse
func (c *ClientWithResponses) CommunicationoneventsBulkDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkDeleteResponse, error) {
	rsp, err := c.CommunicationoneventsBulkDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsBulkDeleteResponse(rsp)
}

func (c *ClientWithResponses) CommunicationoneventsBulkDeleteWithResponse(ctx context.Context, body CommunicationoneventsBulkDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkDeleteResponse, error) {
	rsp, err := c.CommunicationoneventsBulkDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsBulkDeleteResponse(rsp)
}

// CommunicationoneventsBulkUpdateWithBodyWithResponse request with arbitrary body returning *CommunicationoneventsBulkUpdateResponse
func (c *ClientWithResponses) CommunicationoneventsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkUpdateResponse, error) {
	rsp, err := c.CommunicationoneventsBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) CommunicationoneventsBulkUpdateWithResponse(ctx context.Context, body CommunicationoneventsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkUpdateResponse, error) {
	rsp, err := c.CommunicationoneventsBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsBulkUpdateResponse(rsp)
}

// CommunicationoneventsBulkCreateWithBodyWithResponse request with arbitrary body returning *CommunicationoneventsBulkCreateResponse
func (c *ClientWithResponses) CommunicationoneventsBulkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkCreateResponse, error) {
	rsp, err := c.CommunicationoneventsBulkCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsBulkCreateResponse(rsp)
}

func (c *ClientWithResponses) CommunicationoneventsBulkCreateWithResponse(ctx context.Context, body CommunicationoneventsBulkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkCreateResponse, error) {
	rsp, err := c.CommunicationoneventsBulkCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsBulkCreateResponse(rsp)
}

// CommunicationoneventsBulkDeleteAllWithResponse request returning *CommunicationoneventsBulkDeleteAllResponse
func (c *ClientWithResponses) CommunicationoneventsBulkDeleteAllWithResponse(ctx context.Context, params *CommunicationoneventsBulkDeleteAllParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkDeleteAllResponse, error) {
	rsp, err := c.CommunicationoneventsBulkDeleteAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsBulkDeleteAllResponse(rsp)
}

// CommunicationoneventsBulkUpdateAllWithBodyWithResponse request with arbitrary body returning *CommunicationoneventsBulkUpdateAllResponse
func (c *ClientWithResponses) CommunicationoneventsBulkUpdateAllWithBodyWithResponse(ctx context.Context, params *CommunicationoneventsBulkUpdateAllParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkUpdateAllResponse, error) {
	rsp, err := c.CommunicationoneventsBulkUpdateAllWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsBulkUpdateAllResponse(rsp)
}

func (c *ClientWithResponses) CommunicationoneventsBulkUpdateAllWithResponse(ctx context.Context, params *CommunicationoneventsBulkUpdateAllParams, body CommunicationoneventsBulkUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsBulkUpdateAllResponse, error) {
	rsp, err := c.CommunicationoneventsBulkUpdateAll(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsBulkUpdateAllResponse(rsp)
}

// EventsDbTableRowListWithResponse request returning *EventsDbTableRowListResponse
func (c *ClientWithResponses) EventsDbTableRowListWithResponse(ctx context.Context, params *EventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*EventsDbTableRowListResponse, error) {
	rsp, err := c.EventsDbTableRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsDbTableRowListResponse(rsp)
}

// EventsCreateWithBodyWithResponse request with arbitrary body returning *EventsCreateResponse
func (c *ClientWithResponses) EventsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsCreateResponse, error) {
	rsp, err := c.EventsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsCreateResponse(rsp)
}

func (c *ClientWithResponses) EventsCreateWithResponse(ctx context.Context, body EventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsCreateResponse, error) {
	rsp, err := c.EventsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsCreateResponse(rsp)
}

// EventsCountWithResponse request returning *EventsCountResponse
func (c *ClientWithResponses) EventsCountWithResponse(ctx context.Context, params *EventsCountParams, reqEditors ...RequestEditorFn) (*EventsCountResponse, error) {
	rsp, err := c.EventsCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsCountResponse(rsp)
}

// EventsCsvExportWithResponse request returning *EventsCsvExportResponse
func (c *ClientWithResponses) EventsCsvExportWithResponse(ctx context.Context, pType string, params *EventsCsvExportParams, reqEditors ...RequestEditorFn) (*EventsCsvExportResponse, error) {
	rsp, err := c.EventsCsvExport(ctx, pType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsCsvExportResponse(rsp)
}

// EventsDbTableRowFindOneWithResponse request returning *EventsDbTableRowFindOneResponse
func (c *ClientWithResponses) EventsDbTableRowFindOneWithResponse(ctx context.Context, params *EventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*EventsDbTableRowFindOneResponse, error) {
	rsp, err := c.EventsDbTableRowFindOne(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsDbTableRowFindOneResponse(rsp)
}

// EventsGroupbyWithResponse request returning *EventsGroupbyResponse
func (c *ClientWithResponses) EventsGroupbyWithResponse(ctx context.Context, params *EventsGroupbyParams, reqEditors ...RequestEditorFn) (*EventsGroupbyResponse, error) {
	rsp, err := c.EventsGroupby(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsGroupbyResponse(rsp)
}

// EventsEventsRowListWithResponse request returning *EventsEventsRowListResponse
func (c *ClientWithResponses) EventsEventsRowListWithResponse(ctx context.Context, params *EventsEventsRowListParams, reqEditors ...RequestEditorFn) (*EventsEventsRowListResponse, error) {
	rsp, err := c.EventsEventsRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowListResponse(rsp)
}

// EventsEventsRowCreateWithBodyWithResponse request with arbitrary body returning *EventsEventsRowCreateResponse
func (c *ClientWithResponses) EventsEventsRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsEventsRowCreateResponse, error) {
	rsp, err := c.EventsEventsRowCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowCreateResponse(rsp)
}

func (c *ClientWithResponses) EventsEventsRowCreateWithResponse(ctx context.Context, body EventsEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsEventsRowCreateResponse, error) {
	rsp, err := c.EventsEventsRowCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowCreateResponse(rsp)
}

// EventsEventsRowCountWithResponse request returning *EventsEventsRowCountResponse
func (c *ClientWithResponses) EventsEventsRowCountWithResponse(ctx context.Context, params *EventsEventsRowCountParams, reqEditors ...RequestEditorFn) (*EventsEventsRowCountResponse, error) {
	rsp, err := c.EventsEventsRowCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowCountResponse(rsp)
}

// EventsEventsRowExportWithResponse request returning *EventsEventsRowExportResponse
func (c *ClientWithResponses) EventsEventsRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*EventsEventsRowExportResponse, error) {
	rsp, err := c.EventsEventsRowExport(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowExportResponse(rsp)
}

// EventsEventsRowDeleteWithResponse request returning *EventsEventsRowDeleteResponse
func (c *ClientWithResponses) EventsEventsRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsEventsRowDeleteResponse, error) {
	rsp, err := c.EventsEventsRowDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowDeleteResponse(rsp)
}

// EventsEventsRowReadWithResponse request returning *EventsEventsRowReadResponse
func (c *ClientWithResponses) EventsEventsRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsEventsRowReadResponse, error) {
	rsp, err := c.EventsEventsRowRead(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowReadResponse(rsp)
}

// EventsEventsRowUpdateWithBodyWithResponse request with arbitrary body returning *EventsEventsRowUpdateResponse
func (c *ClientWithResponses) EventsEventsRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsEventsRowUpdateResponse, error) {
	rsp, err := c.EventsEventsRowUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowUpdateResponse(rsp)
}

func (c *ClientWithResponses) EventsEventsRowUpdateWithResponse(ctx context.Context, rowId string, body EventsEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsEventsRowUpdateResponse, error) {
	rsp, err := c.EventsEventsRowUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsEventsRowUpdateResponse(rsp)
}

// EventsDeleteWithResponse request returning *EventsDeleteResponse
func (c *ClientWithResponses) EventsDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*EventsDeleteResponse, error) {
	rsp, err := c.EventsDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsDeleteResponse(rsp)
}

// EventsReadWithResponse request returning *EventsReadResponse
func (c *ClientWithResponses) EventsReadWithResponse(ctx context.Context, rowId string, params *EventsReadParams, reqEditors ...RequestEditorFn) (*EventsReadResponse, error) {
	rsp, err := c.EventsRead(ctx, rowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsReadResponse(rsp)
}

// EventsUpdateWithBodyWithResponse request with arbitrary body returning *EventsUpdateResponse
func (c *ClientWithResponses) EventsUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsUpdateResponse, error) {
	rsp, err := c.EventsUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EventsUpdateWithResponse(ctx context.Context, rowId string, body EventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsUpdateResponse, error) {
	rsp, err := c.EventsUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsUpdateResponse(rsp)
}

// EventsNestedListWithResponse request returning *EventsNestedListResponse
func (c *ClientWithResponses) EventsNestedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedListParams, reqEditors ...RequestEditorFn) (*EventsNestedListResponse, error) {
	rsp, err := c.EventsNestedList(ctx, rowId, relationType, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsNestedListResponse(rsp)
}

// EventsNestedChildrenExcludedListWithResponse request returning *EventsNestedChildrenExcludedListResponse
func (c *ClientWithResponses) EventsNestedChildrenExcludedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *EventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*EventsNestedChildrenExcludedListResponse, error) {
	rsp, err := c.EventsNestedChildrenExcludedList(ctx, rowId, relationType, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsNestedChildrenExcludedListResponse(rsp)
}

// EventsNestedRemoveWithResponse request returning *EventsNestedRemoveResponse
func (c *ClientWithResponses) EventsNestedRemoveWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*EventsNestedRemoveResponse, error) {
	rsp, err := c.EventsNestedRemove(ctx, rowId, relationType, columnName, refRowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsNestedRemoveResponse(rsp)
}

// EventsNestedAddWithResponse request returning *EventsNestedAddResponse
func (c *ClientWithResponses) EventsNestedAddWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *EventsNestedAddParams, reqEditors ...RequestEditorFn) (*EventsNestedAddResponse, error) {
	rsp, err := c.EventsNestedAdd(ctx, rowId, relationType, columnName, refRowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsNestedAddResponse(rsp)
}

// VolunteersDbTableRowListWithResponse request returning *VolunteersDbTableRowListResponse
func (c *ClientWithResponses) VolunteersDbTableRowListWithResponse(ctx context.Context, params *VolunteersDbTableRowListParams, reqEditors ...RequestEditorFn) (*VolunteersDbTableRowListResponse, error) {
	rsp, err := c.VolunteersDbTableRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersDbTableRowListResponse(rsp)
}

// VolunteersCreateWithBodyWithResponse request with arbitrary body returning *VolunteersCreateResponse
func (c *ClientWithResponses) VolunteersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersCreateResponse, error) {
	rsp, err := c.VolunteersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersCreateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersCreateWithResponse(ctx context.Context, body VolunteersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersCreateResponse, error) {
	rsp, err := c.VolunteersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersCreateResponse(rsp)
}

// VolunteersCountWithResponse request returning *VolunteersCountResponse
func (c *ClientWithResponses) VolunteersCountWithResponse(ctx context.Context, params *VolunteersCountParams, reqEditors ...RequestEditorFn) (*VolunteersCountResponse, error) {
	rsp, err := c.VolunteersCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersCountResponse(rsp)
}

// VolunteersCsvExportWithResponse request returning *VolunteersCsvExportResponse
func (c *ClientWithResponses) VolunteersCsvExportWithResponse(ctx context.Context, pType string, params *VolunteersCsvExportParams, reqEditors ...RequestEditorFn) (*VolunteersCsvExportResponse, error) {
	rsp, err := c.VolunteersCsvExport(ctx, pType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersCsvExportResponse(rsp)
}

// VolunteersDbTableRowFindOneWithResponse request returning *VolunteersDbTableRowFindOneResponse
func (c *ClientWithResponses) VolunteersDbTableRowFindOneWithResponse(ctx context.Context, params *VolunteersDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*VolunteersDbTableRowFindOneResponse, error) {
	rsp, err := c.VolunteersDbTableRowFindOne(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersDbTableRowFindOneResponse(rsp)
}

// VolunteersGroupbyWithResponse request returning *VolunteersGroupbyResponse
func (c *ClientWithResponses) VolunteersGroupbyWithResponse(ctx context.Context, params *VolunteersGroupbyParams, reqEditors ...RequestEditorFn) (*VolunteersGroupbyResponse, error) {
	rsp, err := c.VolunteersGroupby(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersGroupbyResponse(rsp)
}

// VolunteersGridRowListWithResponse request returning *VolunteersGridRowListResponse
func (c *ClientWithResponses) VolunteersGridRowListWithResponse(ctx context.Context, params *VolunteersGridRowListParams, reqEditors ...RequestEditorFn) (*VolunteersGridRowListResponse, error) {
	rsp, err := c.VolunteersGridRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersGridRowListResponse(rsp)
}

// VolunteersGridRowCreateWithBodyWithResponse request with arbitrary body returning *VolunteersGridRowCreateResponse
func (c *ClientWithResponses) VolunteersGridRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersGridRowCreateResponse, error) {
	rsp, err := c.VolunteersGridRowCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersGridRowCreateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersGridRowCreateWithResponse(ctx context.Context, body VolunteersGridRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersGridRowCreateResponse, error) {
	rsp, err := c.VolunteersGridRowCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersGridRowCreateResponse(rsp)
}

// VolunteersGridRowCountWithResponse request returning *VolunteersGridRowCountResponse
func (c *ClientWithResponses) VolunteersGridRowCountWithResponse(ctx context.Context, params *VolunteersGridRowCountParams, reqEditors ...RequestEditorFn) (*VolunteersGridRowCountResponse, error) {
	rsp, err := c.VolunteersGridRowCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersGridRowCountResponse(rsp)
}

// VolunteersGridRowExportWithResponse request returning *VolunteersGridRowExportResponse
func (c *ClientWithResponses) VolunteersGridRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*VolunteersGridRowExportResponse, error) {
	rsp, err := c.VolunteersGridRowExport(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersGridRowExportResponse(rsp)
}

// VolunteersGridRowDeleteWithResponse request returning *VolunteersGridRowDeleteResponse
func (c *ClientWithResponses) VolunteersGridRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersGridRowDeleteResponse, error) {
	rsp, err := c.VolunteersGridRowDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersGridRowDeleteResponse(rsp)
}

// VolunteersGridRowReadWithResponse request returning *VolunteersGridRowReadResponse
func (c *ClientWithResponses) VolunteersGridRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersGridRowReadResponse, error) {
	rsp, err := c.VolunteersGridRowRead(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersGridRowReadResponse(rsp)
}

// VolunteersGridRowUpdateWithBodyWithResponse request with arbitrary body returning *VolunteersGridRowUpdateResponse
func (c *ClientWithResponses) VolunteersGridRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersGridRowUpdateResponse, error) {
	rsp, err := c.VolunteersGridRowUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersGridRowUpdateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersGridRowUpdateWithResponse(ctx context.Context, rowId string, body VolunteersGridRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersGridRowUpdateResponse, error) {
	rsp, err := c.VolunteersGridRowUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersGridRowUpdateResponse(rsp)
}

// VolunteersDeleteWithResponse request returning *VolunteersDeleteResponse
func (c *ClientWithResponses) VolunteersDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*VolunteersDeleteResponse, error) {
	rsp, err := c.VolunteersDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersDeleteResponse(rsp)
}

// VolunteersReadWithResponse request returning *VolunteersReadResponse
func (c *ClientWithResponses) VolunteersReadWithResponse(ctx context.Context, rowId string, params *VolunteersReadParams, reqEditors ...RequestEditorFn) (*VolunteersReadResponse, error) {
	rsp, err := c.VolunteersRead(ctx, rowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersReadResponse(rsp)
}

// VolunteersUpdateWithBodyWithResponse request with arbitrary body returning *VolunteersUpdateResponse
func (c *ClientWithResponses) VolunteersUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolunteersUpdateResponse, error) {
	rsp, err := c.VolunteersUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersUpdateResponse(rsp)
}

func (c *ClientWithResponses) VolunteersUpdateWithResponse(ctx context.Context, rowId string, body VolunteersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolunteersUpdateResponse, error) {
	rsp, err := c.VolunteersUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersUpdateResponse(rsp)
}

// VolunteersNestedListWithResponse request returning *VolunteersNestedListResponse
func (c *ClientWithResponses) VolunteersNestedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedListParams, reqEditors ...RequestEditorFn) (*VolunteersNestedListResponse, error) {
	rsp, err := c.VolunteersNestedList(ctx, rowId, relationType, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersNestedListResponse(rsp)
}

// VolunteersNestedChildrenExcludedListWithResponse request returning *VolunteersNestedChildrenExcludedListResponse
func (c *ClientWithResponses) VolunteersNestedChildrenExcludedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *VolunteersNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*VolunteersNestedChildrenExcludedListResponse, error) {
	rsp, err := c.VolunteersNestedChildrenExcludedList(ctx, rowId, relationType, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersNestedChildrenExcludedListResponse(rsp)
}

// VolunteersNestedRemoveWithResponse request returning *VolunteersNestedRemoveResponse
func (c *ClientWithResponses) VolunteersNestedRemoveWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*VolunteersNestedRemoveResponse, error) {
	rsp, err := c.VolunteersNestedRemove(ctx, rowId, relationType, columnName, refRowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersNestedRemoveResponse(rsp)
}

// VolunteersNestedAddWithResponse request returning *VolunteersNestedAddResponse
func (c *ClientWithResponses) VolunteersNestedAddWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *VolunteersNestedAddParams, reqEditors ...RequestEditorFn) (*VolunteersNestedAddResponse, error) {
	rsp, err := c.VolunteersNestedAdd(ctx, rowId, relationType, columnName, refRowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolunteersNestedAddResponse(rsp)
}

// CommunicationoneventsDbTableRowListWithResponse request returning *CommunicationoneventsDbTableRowListResponse
func (c *ClientWithResponses) CommunicationoneventsDbTableRowListWithResponse(ctx context.Context, params *CommunicationoneventsDbTableRowListParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsDbTableRowListResponse, error) {
	rsp, err := c.CommunicationoneventsDbTableRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsDbTableRowListResponse(rsp)
}

// CommunicationoneventsCreateWithBodyWithResponse request with arbitrary body returning *CommunicationoneventsCreateResponse
func (c *ClientWithResponses) CommunicationoneventsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsCreateResponse, error) {
	rsp, err := c.CommunicationoneventsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsCreateResponse(rsp)
}

func (c *ClientWithResponses) CommunicationoneventsCreateWithResponse(ctx context.Context, body CommunicationoneventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsCreateResponse, error) {
	rsp, err := c.CommunicationoneventsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsCreateResponse(rsp)
}

// CommunicationoneventsCountWithResponse request returning *CommunicationoneventsCountResponse
func (c *ClientWithResponses) CommunicationoneventsCountWithResponse(ctx context.Context, params *CommunicationoneventsCountParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsCountResponse, error) {
	rsp, err := c.CommunicationoneventsCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsCountResponse(rsp)
}

// CommunicationoneventsCsvExportWithResponse request returning *CommunicationoneventsCsvExportResponse
func (c *ClientWithResponses) CommunicationoneventsCsvExportWithResponse(ctx context.Context, pType string, params *CommunicationoneventsCsvExportParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsCsvExportResponse, error) {
	rsp, err := c.CommunicationoneventsCsvExport(ctx, pType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsCsvExportResponse(rsp)
}

// CommunicationoneventsDbTableRowFindOneWithResponse request returning *CommunicationoneventsDbTableRowFindOneResponse
func (c *ClientWithResponses) CommunicationoneventsDbTableRowFindOneWithResponse(ctx context.Context, params *CommunicationoneventsDbTableRowFindOneParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsDbTableRowFindOneResponse, error) {
	rsp, err := c.CommunicationoneventsDbTableRowFindOne(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsDbTableRowFindOneResponse(rsp)
}

// CommunicationoneventsGroupbyWithResponse request returning *CommunicationoneventsGroupbyResponse
func (c *ClientWithResponses) CommunicationoneventsGroupbyWithResponse(ctx context.Context, params *CommunicationoneventsGroupbyParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsGroupbyResponse, error) {
	rsp, err := c.CommunicationoneventsGroupby(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsGroupbyResponse(rsp)
}

// CommunicationOnEventsCommunicationOnEventsRowListWithResponse request returning *CommunicationOnEventsCommunicationOnEventsRowListResponse
func (c *ClientWithResponses) CommunicationOnEventsCommunicationOnEventsRowListWithResponse(ctx context.Context, params *CommunicationOnEventsCommunicationOnEventsRowListParams, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowListResponse, error) {
	rsp, err := c.CommunicationOnEventsCommunicationOnEventsRowList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationOnEventsCommunicationOnEventsRowListResponse(rsp)
}

// CommunicationOnEventsCommunicationOnEventsRowCreateWithBodyWithResponse request with arbitrary body returning *CommunicationOnEventsCommunicationOnEventsRowCreateResponse
func (c *ClientWithResponses) CommunicationOnEventsCommunicationOnEventsRowCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowCreateResponse, error) {
	rsp, err := c.CommunicationOnEventsCommunicationOnEventsRowCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationOnEventsCommunicationOnEventsRowCreateResponse(rsp)
}

func (c *ClientWithResponses) CommunicationOnEventsCommunicationOnEventsRowCreateWithResponse(ctx context.Context, body CommunicationOnEventsCommunicationOnEventsRowCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowCreateResponse, error) {
	rsp, err := c.CommunicationOnEventsCommunicationOnEventsRowCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationOnEventsCommunicationOnEventsRowCreateResponse(rsp)
}

// CommunicationOnEventsCommunicationOnEventsRowCountWithResponse request returning *CommunicationOnEventsCommunicationOnEventsRowCountResponse
func (c *ClientWithResponses) CommunicationOnEventsCommunicationOnEventsRowCountWithResponse(ctx context.Context, params *CommunicationOnEventsCommunicationOnEventsRowCountParams, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowCountResponse, error) {
	rsp, err := c.CommunicationOnEventsCommunicationOnEventsRowCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationOnEventsCommunicationOnEventsRowCountResponse(rsp)
}

// CommunicationOnEventsCommunicationOnEventsRowExportWithResponse request returning *CommunicationOnEventsCommunicationOnEventsRowExportResponse
func (c *ClientWithResponses) CommunicationOnEventsCommunicationOnEventsRowExportWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowExportResponse, error) {
	rsp, err := c.CommunicationOnEventsCommunicationOnEventsRowExport(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationOnEventsCommunicationOnEventsRowExportResponse(rsp)
}

// CommunicationOnEventsCommunicationOnEventsRowDeleteWithResponse request returning *CommunicationOnEventsCommunicationOnEventsRowDeleteResponse
func (c *ClientWithResponses) CommunicationOnEventsCommunicationOnEventsRowDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowDeleteResponse, error) {
	rsp, err := c.CommunicationOnEventsCommunicationOnEventsRowDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationOnEventsCommunicationOnEventsRowDeleteResponse(rsp)
}

// CommunicationOnEventsCommunicationOnEventsRowReadWithResponse request returning *CommunicationOnEventsCommunicationOnEventsRowReadResponse
func (c *ClientWithResponses) CommunicationOnEventsCommunicationOnEventsRowReadWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowReadResponse, error) {
	rsp, err := c.CommunicationOnEventsCommunicationOnEventsRowRead(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationOnEventsCommunicationOnEventsRowReadResponse(rsp)
}

// CommunicationOnEventsCommunicationOnEventsRowUpdateWithBodyWithResponse request with arbitrary body returning *CommunicationOnEventsCommunicationOnEventsRowUpdateResponse
func (c *ClientWithResponses) CommunicationOnEventsCommunicationOnEventsRowUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowUpdateResponse, error) {
	rsp, err := c.CommunicationOnEventsCommunicationOnEventsRowUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationOnEventsCommunicationOnEventsRowUpdateResponse(rsp)
}

func (c *ClientWithResponses) CommunicationOnEventsCommunicationOnEventsRowUpdateWithResponse(ctx context.Context, rowId string, body CommunicationOnEventsCommunicationOnEventsRowUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationOnEventsCommunicationOnEventsRowUpdateResponse, error) {
	rsp, err := c.CommunicationOnEventsCommunicationOnEventsRowUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationOnEventsCommunicationOnEventsRowUpdateResponse(rsp)
}

// CommunicationoneventsDeleteWithResponse request returning *CommunicationoneventsDeleteResponse
func (c *ClientWithResponses) CommunicationoneventsDeleteWithResponse(ctx context.Context, rowId string, reqEditors ...RequestEditorFn) (*CommunicationoneventsDeleteResponse, error) {
	rsp, err := c.CommunicationoneventsDelete(ctx, rowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsDeleteResponse(rsp)
}

// CommunicationoneventsReadWithResponse request returning *CommunicationoneventsReadResponse
func (c *ClientWithResponses) CommunicationoneventsReadWithResponse(ctx context.Context, rowId string, params *CommunicationoneventsReadParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsReadResponse, error) {
	rsp, err := c.CommunicationoneventsRead(ctx, rowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsReadResponse(rsp)
}

// CommunicationoneventsUpdateWithBodyWithResponse request with arbitrary body returning *CommunicationoneventsUpdateResponse
func (c *ClientWithResponses) CommunicationoneventsUpdateWithBodyWithResponse(ctx context.Context, rowId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommunicationoneventsUpdateResponse, error) {
	rsp, err := c.CommunicationoneventsUpdateWithBody(ctx, rowId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsUpdateResponse(rsp)
}

func (c *ClientWithResponses) CommunicationoneventsUpdateWithResponse(ctx context.Context, rowId string, body CommunicationoneventsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CommunicationoneventsUpdateResponse, error) {
	rsp, err := c.CommunicationoneventsUpdate(ctx, rowId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsUpdateResponse(rsp)
}

// CommunicationoneventsNestedListWithResponse request returning *CommunicationoneventsNestedListResponse
func (c *ClientWithResponses) CommunicationoneventsNestedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *CommunicationoneventsNestedListParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsNestedListResponse, error) {
	rsp, err := c.CommunicationoneventsNestedList(ctx, rowId, relationType, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsNestedListResponse(rsp)
}

// CommunicationoneventsNestedChildrenExcludedListWithResponse request returning *CommunicationoneventsNestedChildrenExcludedListResponse
func (c *ClientWithResponses) CommunicationoneventsNestedChildrenExcludedListWithResponse(ctx context.Context, rowId string, relationType string, columnName string, params *CommunicationoneventsNestedChildrenExcludedListParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsNestedChildrenExcludedListResponse, error) {
	rsp, err := c.CommunicationoneventsNestedChildrenExcludedList(ctx, rowId, relationType, columnName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsNestedChildrenExcludedListResponse(rsp)
}

// CommunicationoneventsNestedRemoveWithResponse request returning *CommunicationoneventsNestedRemoveResponse
func (c *ClientWithResponses) CommunicationoneventsNestedRemoveWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, reqEditors ...RequestEditorFn) (*CommunicationoneventsNestedRemoveResponse, error) {
	rsp, err := c.CommunicationoneventsNestedRemove(ctx, rowId, relationType, columnName, refRowId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsNestedRemoveResponse(rsp)
}

// CommunicationoneventsNestedAddWithResponse request returning *CommunicationoneventsNestedAddResponse
func (c *ClientWithResponses) CommunicationoneventsNestedAddWithResponse(ctx context.Context, rowId string, relationType string, columnName string, refRowId string, params *CommunicationoneventsNestedAddParams, reqEditors ...RequestEditorFn) (*CommunicationoneventsNestedAddResponse, error) {
	rsp, err := c.CommunicationoneventsNestedAdd(ctx, rowId, relationType, columnName, refRowId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommunicationoneventsNestedAddResponse(rsp)
}

// ParseEventsBulkDeleteResponse parses an HTTP response from a EventsBulkDeleteWithResponse call
func ParseEventsBulkDeleteResponse(rsp *http.Response) (*EventsBulkDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsBulkDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsBulkUpdateResponse parses an HTTP response from a EventsBulkUpdateWithResponse call
func ParseEventsBulkUpdateResponse(rsp *http.Response) (*EventsBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsBulkCreateResponse parses an HTTP response from a EventsBulkCreateWithResponse call
func ParseEventsBulkCreateResponse(rsp *http.Response) (*EventsBulkCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsBulkCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsBulkDeleteAllResponse parses an HTTP response from a EventsBulkDeleteAllWithResponse call
func ParseEventsBulkDeleteAllResponse(rsp *http.Response) (*EventsBulkDeleteAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsBulkDeleteAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsBulkUpdateAllResponse parses an HTTP response from a EventsBulkUpdateAllWithResponse call
func ParseEventsBulkUpdateAllResponse(rsp *http.Response) (*EventsBulkUpdateAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsBulkUpdateAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersBulkDeleteResponse parses an HTTP response from a VolunteersBulkDeleteWithResponse call
func ParseVolunteersBulkDeleteResponse(rsp *http.Response) (*VolunteersBulkDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersBulkDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersBulkUpdateResponse parses an HTTP response from a VolunteersBulkUpdateWithResponse call
func ParseVolunteersBulkUpdateResponse(rsp *http.Response) (*VolunteersBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersBulkCreateResponse parses an HTTP response from a VolunteersBulkCreateWithResponse call
func ParseVolunteersBulkCreateResponse(rsp *http.Response) (*VolunteersBulkCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersBulkCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersBulkDeleteAllResponse parses an HTTP response from a VolunteersBulkDeleteAllWithResponse call
func ParseVolunteersBulkDeleteAllResponse(rsp *http.Response) (*VolunteersBulkDeleteAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersBulkDeleteAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersBulkUpdateAllResponse parses an HTTP response from a VolunteersBulkUpdateAllWithResponse call
func ParseVolunteersBulkUpdateAllResponse(rsp *http.Response) (*VolunteersBulkUpdateAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersBulkUpdateAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsBulkDeleteResponse parses an HTTP response from a CommunicationoneventsBulkDeleteWithResponse call
func ParseCommunicationoneventsBulkDeleteResponse(rsp *http.Response) (*CommunicationoneventsBulkDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsBulkDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsBulkUpdateResponse parses an HTTP response from a CommunicationoneventsBulkUpdateWithResponse call
func ParseCommunicationoneventsBulkUpdateResponse(rsp *http.Response) (*CommunicationoneventsBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsBulkCreateResponse parses an HTTP response from a CommunicationoneventsBulkCreateWithResponse call
func ParseCommunicationoneventsBulkCreateResponse(rsp *http.Response) (*CommunicationoneventsBulkCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsBulkCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsBulkDeleteAllResponse parses an HTTP response from a CommunicationoneventsBulkDeleteAllWithResponse call
func ParseCommunicationoneventsBulkDeleteAllResponse(rsp *http.Response) (*CommunicationoneventsBulkDeleteAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsBulkDeleteAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsBulkUpdateAllResponse parses an HTTP response from a CommunicationoneventsBulkUpdateAllWithResponse call
func ParseCommunicationoneventsBulkUpdateAllResponse(rsp *http.Response) (*CommunicationoneventsBulkUpdateAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsBulkUpdateAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsDbTableRowListResponse parses an HTTP response from a EventsDbTableRowListWithResponse call
func ParseEventsDbTableRowListResponse(rsp *http.Response) (*EventsDbTableRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsDbTableRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated        `json:"PageInfo,omitempty"`
			List     *[]EventsResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsCreateResponse parses an HTTP response from a EventsCreateWithResponse call
func ParseEventsCreateResponse(rsp *http.Response) (*EventsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsCountResponse parses an HTTP response from a EventsCountWithResponse call
func ParseEventsCountResponse(rsp *http.Response) (*EventsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsCsvExportResponse parses an HTTP response from a EventsCsvExportWithResponse call
func ParseEventsCsvExportResponse(rsp *http.Response) (*EventsCsvExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsCsvExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEventsDbTableRowFindOneResponse parses an HTTP response from a EventsDbTableRowFindOneWithResponse call
func ParseEventsDbTableRowFindOneResponse(rsp *http.Response) (*EventsDbTableRowFindOneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsDbTableRowFindOneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsGroupbyResponse parses an HTTP response from a EventsGroupbyWithResponse call
func ParseEventsGroupbyResponse(rsp *http.Response) (*EventsGroupbyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsGroupbyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated `json:"PageInfo,omitempty"`
			List     *[]Groupby `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsEventsRowListResponse parses an HTTP response from a EventsEventsRowListWithResponse call
func ParseEventsEventsRowListResponse(rsp *http.Response) (*EventsEventsRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated                  `json:"PageInfo,omitempty"`
			List     *[]EventseventsGridResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsEventsRowCreateResponse parses an HTTP response from a EventsEventsRowCreateWithResponse call
func ParseEventsEventsRowCreateResponse(rsp *http.Response) (*EventsEventsRowCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsEventsRowCountResponse parses an HTTP response from a EventsEventsRowCountWithResponse call
func ParseEventsEventsRowCountResponse(rsp *http.Response) (*EventsEventsRowCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count *float32 `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsEventsRowExportResponse parses an HTTP response from a EventsEventsRowExportWithResponse call
func ParseEventsEventsRowExportResponse(rsp *http.Response) (*EventsEventsRowExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEventsEventsRowDeleteResponse parses an HTTP response from a EventsEventsRowDeleteWithResponse call
func ParseEventsEventsRowDeleteResponse(rsp *http.Response) (*EventsEventsRowDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEventsEventsRowReadResponse parses an HTTP response from a EventsEventsRowReadWithResponse call
func ParseEventsEventsRowReadResponse(rsp *http.Response) (*EventsEventsRowReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventseventsGridResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsEventsRowUpdateResponse parses an HTTP response from a EventsEventsRowUpdateWithResponse call
func ParseEventsEventsRowUpdateResponse(rsp *http.Response) (*EventsEventsRowUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsEventsRowUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsDeleteResponse parses an HTTP response from a EventsDeleteWithResponse call
func ParseEventsDeleteResponse(rsp *http.Response) (*EventsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEventsReadResponse parses an HTTP response from a EventsReadWithResponse call
func ParseEventsReadResponse(rsp *http.Response) (*EventsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEventsUpdateResponse parses an HTTP response from a EventsUpdateWithResponse call
func ParseEventsUpdateResponse(rsp *http.Response) (*EventsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventsRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsNestedListResponse parses an HTTP response from a EventsNestedListWithResponse call
func ParseEventsNestedListResponse(rsp *http.Response) (*EventsNestedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsNestedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsNestedChildrenExcludedListResponse parses an HTTP response from a EventsNestedChildrenExcludedListWithResponse call
func ParseEventsNestedChildrenExcludedListResponse(rsp *http.Response) (*EventsNestedChildrenExcludedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsNestedChildrenExcludedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsNestedRemoveResponse parses an HTTP response from a EventsNestedRemoveWithResponse call
func ParseEventsNestedRemoveResponse(rsp *http.Response) (*EventsNestedRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsNestedRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEventsNestedAddResponse parses an HTTP response from a EventsNestedAddWithResponse call
func ParseEventsNestedAddResponse(rsp *http.Response) (*EventsNestedAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsNestedAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersDbTableRowListResponse parses an HTTP response from a VolunteersDbTableRowListWithResponse call
func ParseVolunteersDbTableRowListResponse(rsp *http.Response) (*VolunteersDbTableRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersDbTableRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated            `json:"PageInfo,omitempty"`
			List     *[]VolunteersResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersCreateResponse parses an HTTP response from a VolunteersCreateWithResponse call
func ParseVolunteersCreateResponse(rsp *http.Response) (*VolunteersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolunteersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersCountResponse parses an HTTP response from a VolunteersCountWithResponse call
func ParseVolunteersCountResponse(rsp *http.Response) (*VolunteersCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersCsvExportResponse parses an HTTP response from a VolunteersCsvExportWithResponse call
func ParseVolunteersCsvExportResponse(rsp *http.Response) (*VolunteersCsvExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersCsvExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVolunteersDbTableRowFindOneResponse parses an HTTP response from a VolunteersDbTableRowFindOneWithResponse call
func ParseVolunteersDbTableRowFindOneResponse(rsp *http.Response) (*VolunteersDbTableRowFindOneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersDbTableRowFindOneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolunteersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersGroupbyResponse parses an HTTP response from a VolunteersGroupbyWithResponse call
func ParseVolunteersGroupbyResponse(rsp *http.Response) (*VolunteersGroupbyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersGroupbyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated `json:"PageInfo,omitempty"`
			List     *[]Groupby `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersGridRowListResponse parses an HTTP response from a VolunteersGridRowListWithResponse call
func ParseVolunteersGridRowListResponse(rsp *http.Response) (*VolunteersGridRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersGridRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated                    `json:"PageInfo,omitempty"`
			List     *[]VolunteersgridGridResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersGridRowCreateResponse parses an HTTP response from a VolunteersGridRowCreateWithResponse call
func ParseVolunteersGridRowCreateResponse(rsp *http.Response) (*VolunteersGridRowCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersGridRowCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersGridRowCountResponse parses an HTTP response from a VolunteersGridRowCountWithResponse call
func ParseVolunteersGridRowCountResponse(rsp *http.Response) (*VolunteersGridRowCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersGridRowCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count *float32 `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersGridRowExportResponse parses an HTTP response from a VolunteersGridRowExportWithResponse call
func ParseVolunteersGridRowExportResponse(rsp *http.Response) (*VolunteersGridRowExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersGridRowExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVolunteersGridRowDeleteResponse parses an HTTP response from a VolunteersGridRowDeleteWithResponse call
func ParseVolunteersGridRowDeleteResponse(rsp *http.Response) (*VolunteersGridRowDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersGridRowDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVolunteersGridRowReadResponse parses an HTTP response from a VolunteersGridRowReadWithResponse call
func ParseVolunteersGridRowReadResponse(rsp *http.Response) (*VolunteersGridRowReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersGridRowReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolunteersgridGridResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersGridRowUpdateResponse parses an HTTP response from a VolunteersGridRowUpdateWithResponse call
func ParseVolunteersGridRowUpdateResponse(rsp *http.Response) (*VolunteersGridRowUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersGridRowUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersDeleteResponse parses an HTTP response from a VolunteersDeleteWithResponse call
func ParseVolunteersDeleteResponse(rsp *http.Response) (*VolunteersDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVolunteersReadResponse parses an HTTP response from a VolunteersReadWithResponse call
func ParseVolunteersReadResponse(rsp *http.Response) (*VolunteersReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VolunteersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseVolunteersUpdateResponse parses an HTTP response from a VolunteersUpdateWithResponse call
func ParseVolunteersUpdateResponse(rsp *http.Response) (*VolunteersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolunteersRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersNestedListResponse parses an HTTP response from a VolunteersNestedListWithResponse call
func ParseVolunteersNestedListResponse(rsp *http.Response) (*VolunteersNestedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersNestedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersNestedChildrenExcludedListResponse parses an HTTP response from a VolunteersNestedChildrenExcludedListWithResponse call
func ParseVolunteersNestedChildrenExcludedListResponse(rsp *http.Response) (*VolunteersNestedChildrenExcludedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersNestedChildrenExcludedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersNestedRemoveResponse parses an HTTP response from a VolunteersNestedRemoveWithResponse call
func ParseVolunteersNestedRemoveResponse(rsp *http.Response) (*VolunteersNestedRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersNestedRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolunteersNestedAddResponse parses an HTTP response from a VolunteersNestedAddWithResponse call
func ParseVolunteersNestedAddResponse(rsp *http.Response) (*VolunteersNestedAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VolunteersNestedAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsDbTableRowListResponse parses an HTTP response from a CommunicationoneventsDbTableRowListWithResponse call
func ParseCommunicationoneventsDbTableRowListResponse(rsp *http.Response) (*CommunicationoneventsDbTableRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsDbTableRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated                       `json:"PageInfo,omitempty"`
			List     *[]CommunicationOnEventsResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsCreateResponse parses an HTTP response from a CommunicationoneventsCreateWithResponse call
func ParseCommunicationoneventsCreateResponse(rsp *http.Response) (*CommunicationoneventsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommunicationOnEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsCountResponse parses an HTTP response from a CommunicationoneventsCountWithResponse call
func ParseCommunicationoneventsCountResponse(rsp *http.Response) (*CommunicationoneventsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsCsvExportResponse parses an HTTP response from a CommunicationoneventsCsvExportWithResponse call
func ParseCommunicationoneventsCsvExportResponse(rsp *http.Response) (*CommunicationoneventsCsvExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsCsvExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCommunicationoneventsDbTableRowFindOneResponse parses an HTTP response from a CommunicationoneventsDbTableRowFindOneWithResponse call
func ParseCommunicationoneventsDbTableRowFindOneResponse(rsp *http.Response) (*CommunicationoneventsDbTableRowFindOneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsDbTableRowFindOneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommunicationOnEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsGroupbyResponse parses an HTTP response from a CommunicationoneventsGroupbyWithResponse call
func ParseCommunicationoneventsGroupbyResponse(rsp *http.Response) (*CommunicationoneventsGroupbyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsGroupbyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated `json:"PageInfo,omitempty"`
			List     *[]Groupby `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationOnEventsCommunicationOnEventsRowListResponse parses an HTTP response from a CommunicationOnEventsCommunicationOnEventsRowListWithResponse call
func ParseCommunicationOnEventsCommunicationOnEventsRowListResponse(rsp *http.Response) (*CommunicationOnEventsCommunicationOnEventsRowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationOnEventsCommunicationOnEventsRowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PageInfo *Paginated                                                `json:"PageInfo,omitempty"`
			List     *[]CommunicationOnEventscommunicationOnEventsGridResponse `json:"list,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationOnEventsCommunicationOnEventsRowCreateResponse parses an HTTP response from a CommunicationOnEventsCommunicationOnEventsRowCreateWithResponse call
func ParseCommunicationOnEventsCommunicationOnEventsRowCreateResponse(rsp *http.Response) (*CommunicationOnEventsCommunicationOnEventsRowCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationOnEventsCommunicationOnEventsRowCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationOnEventsCommunicationOnEventsRowCountResponse parses an HTTP response from a CommunicationOnEventsCommunicationOnEventsRowCountWithResponse call
func ParseCommunicationOnEventsCommunicationOnEventsRowCountResponse(rsp *http.Response) (*CommunicationOnEventsCommunicationOnEventsRowCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationOnEventsCommunicationOnEventsRowCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count *float32 `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationOnEventsCommunicationOnEventsRowExportResponse parses an HTTP response from a CommunicationOnEventsCommunicationOnEventsRowExportWithResponse call
func ParseCommunicationOnEventsCommunicationOnEventsRowExportResponse(rsp *http.Response) (*CommunicationOnEventsCommunicationOnEventsRowExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationOnEventsCommunicationOnEventsRowExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCommunicationOnEventsCommunicationOnEventsRowDeleteResponse parses an HTTP response from a CommunicationOnEventsCommunicationOnEventsRowDeleteWithResponse call
func ParseCommunicationOnEventsCommunicationOnEventsRowDeleteResponse(rsp *http.Response) (*CommunicationOnEventsCommunicationOnEventsRowDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationOnEventsCommunicationOnEventsRowDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCommunicationOnEventsCommunicationOnEventsRowReadResponse parses an HTTP response from a CommunicationOnEventsCommunicationOnEventsRowReadWithResponse call
func ParseCommunicationOnEventsCommunicationOnEventsRowReadResponse(rsp *http.Response) (*CommunicationOnEventsCommunicationOnEventsRowReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationOnEventsCommunicationOnEventsRowReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommunicationOnEventscommunicationOnEventsGridResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationOnEventsCommunicationOnEventsRowUpdateResponse parses an HTTP response from a CommunicationOnEventsCommunicationOnEventsRowUpdateWithResponse call
func ParseCommunicationOnEventsCommunicationOnEventsRowUpdateResponse(rsp *http.Response) (*CommunicationOnEventsCommunicationOnEventsRowUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationOnEventsCommunicationOnEventsRowUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsDeleteResponse parses an HTTP response from a CommunicationoneventsDeleteWithResponse call
func ParseCommunicationoneventsDeleteResponse(rsp *http.Response) (*CommunicationoneventsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCommunicationoneventsReadResponse parses an HTTP response from a CommunicationoneventsReadWithResponse call
func ParseCommunicationoneventsReadResponse(rsp *http.Response) (*CommunicationoneventsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CommunicationOnEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsUpdateResponse parses an HTTP response from a CommunicationoneventsUpdateWithResponse call
func ParseCommunicationoneventsUpdateResponse(rsp *http.Response) (*CommunicationoneventsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommunicationOnEventsRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsNestedListResponse parses an HTTP response from a CommunicationoneventsNestedListWithResponse call
func ParseCommunicationoneventsNestedListResponse(rsp *http.Response) (*CommunicationoneventsNestedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsNestedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsNestedChildrenExcludedListResponse parses an HTTP response from a CommunicationoneventsNestedChildrenExcludedListWithResponse call
func ParseCommunicationoneventsNestedChildrenExcludedListResponse(rsp *http.Response) (*CommunicationoneventsNestedChildrenExcludedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsNestedChildrenExcludedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsNestedRemoveResponse parses an HTTP response from a CommunicationoneventsNestedRemoveWithResponse call
func ParseCommunicationoneventsNestedRemoveResponse(rsp *http.Response) (*CommunicationoneventsNestedRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsNestedRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommunicationoneventsNestedAddResponse parses an HTTP response from a CommunicationoneventsNestedAddWithResponse call
func ParseCommunicationoneventsNestedAddResponse(rsp *http.Response) (*CommunicationoneventsNestedAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommunicationoneventsNestedAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
